
punched_tape.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  0800a298  0800a298  0001a298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a598  0800a598  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800a598  0800a598  0001a598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5a0  0800a5a0  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5a0  0800a5a0  0001a5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5a4  0800a5a4  0001a5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800a5a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008fc  20000098  0800a640  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000994  0800a640  00020994  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d14  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e48  00000000  00000000  00036ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  0003ac28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  0003bdc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a29b  00000000  00000000  0003cda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b91  00000000  00000000  00057043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ec15  00000000  00000000  00070bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ff7e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054a8  00000000  00000000  000ff83c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a280 	.word	0x0800a280

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	0800a280 	.word	0x0800a280

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08c      	sub	sp, #48	; 0x30
 8000598:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
 80005ae:	4b62      	ldr	r3, [pc, #392]	; (8000738 <MX_GPIO_Init+0x1a4>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a61      	ldr	r2, [pc, #388]	; (8000738 <MX_GPIO_Init+0x1a4>)
 80005b4:	f043 0310 	orr.w	r3, r3, #16
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b5f      	ldr	r3, [pc, #380]	; (8000738 <MX_GPIO_Init+0x1a4>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0310 	and.w	r3, r3, #16
 80005c2:	61bb      	str	r3, [r7, #24]
 80005c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	4b5b      	ldr	r3, [pc, #364]	; (8000738 <MX_GPIO_Init+0x1a4>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a5a      	ldr	r2, [pc, #360]	; (8000738 <MX_GPIO_Init+0x1a4>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b58      	ldr	r3, [pc, #352]	; (8000738 <MX_GPIO_Init+0x1a4>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
 80005e6:	4b54      	ldr	r3, [pc, #336]	; (8000738 <MX_GPIO_Init+0x1a4>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a53      	ldr	r2, [pc, #332]	; (8000738 <MX_GPIO_Init+0x1a4>)
 80005ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b51      	ldr	r3, [pc, #324]	; (8000738 <MX_GPIO_Init+0x1a4>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	4b4d      	ldr	r3, [pc, #308]	; (8000738 <MX_GPIO_Init+0x1a4>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a4c      	ldr	r2, [pc, #304]	; (8000738 <MX_GPIO_Init+0x1a4>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b4a      	ldr	r3, [pc, #296]	; (8000738 <MX_GPIO_Init+0x1a4>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	4b46      	ldr	r3, [pc, #280]	; (8000738 <MX_GPIO_Init+0x1a4>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a45      	ldr	r2, [pc, #276]	; (8000738 <MX_GPIO_Init+0x1a4>)
 8000624:	f043 0302 	orr.w	r3, r3, #2
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b43      	ldr	r3, [pc, #268]	; (8000738 <MX_GPIO_Init+0x1a4>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b3f      	ldr	r3, [pc, #252]	; (8000738 <MX_GPIO_Init+0x1a4>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a3e      	ldr	r2, [pc, #248]	; (8000738 <MX_GPIO_Init+0x1a4>)
 8000640:	f043 0308 	orr.w	r3, r3, #8
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b3c      	ldr	r3, [pc, #240]	; (8000738 <MX_GPIO_Init+0x1a4>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2108      	movs	r1, #8
 8000656:	4839      	ldr	r0, [pc, #228]	; (800073c <MX_GPIO_Init+0x1a8>)
 8000658:	f001 f966 	bl	8001928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	2101      	movs	r1, #1
 8000660:	4837      	ldr	r0, [pc, #220]	; (8000740 <MX_GPIO_Init+0x1ac>)
 8000662:	f001 f961 	bl	8001928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000666:	2200      	movs	r2, #0
 8000668:	f24f 0110 	movw	r1, #61456	; 0xf010
 800066c:	4835      	ldr	r0, [pc, #212]	; (8000744 <MX_GPIO_Init+0x1b0>)
 800066e:	f001 f95b 	bl	8001928 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PE7 PE8 PE9
                           PE10 PE11 PE12 */
  GPIO_InitStruct.Pin = DATA_Ready_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000672:	f641 7384 	movw	r3, #8068	; 0x1f84
 8000676:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000678:	2300      	movs	r3, #0
 800067a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000680:	f107 031c 	add.w	r3, r7, #28
 8000684:	4619      	mov	r1, r3
 8000686:	482d      	ldr	r0, [pc, #180]	; (800073c <MX_GPIO_Init+0x1a8>)
 8000688:	f000 fe8e 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800068c:	2308      	movs	r3, #8
 800068e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2300      	movs	r3, #0
 800069a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	4619      	mov	r1, r3
 80006a2:	4826      	ldr	r0, [pc, #152]	; (800073c <MX_GPIO_Init+0x1a8>)
 80006a4:	f000 fe80 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80006a8:	2332      	movs	r3, #50	; 0x32
 80006aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006ac:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006b6:	f107 031c 	add.w	r3, r7, #28
 80006ba:	4619      	mov	r1, r3
 80006bc:	481f      	ldr	r0, [pc, #124]	; (800073c <MX_GPIO_Init+0x1a8>)
 80006be:	f000 fe73 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80006c2:	2301      	movs	r3, #1
 80006c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c6:	2301      	movs	r3, #1
 80006c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ce:	2300      	movs	r3, #0
 80006d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	4619      	mov	r1, r3
 80006d8:	4819      	ldr	r0, [pc, #100]	; (8000740 <MX_GPIO_Init+0x1ac>)
 80006da:	f000 fe65 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006de:	2301      	movs	r3, #1
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006e2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	4619      	mov	r1, r3
 80006f2:	4815      	ldr	r0, [pc, #84]	; (8000748 <MX_GPIO_Init+0x1b4>)
 80006f4:	f000 fe58 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006f8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80006fc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	2300      	movs	r3, #0
 8000708:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	4619      	mov	r1, r3
 8000710:	480c      	ldr	r0, [pc, #48]	; (8000744 <MX_GPIO_Init+0x1b0>)
 8000712:	f000 fe49 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000716:	2320      	movs	r3, #32
 8000718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071a:	2300      	movs	r3, #0
 800071c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	4619      	mov	r1, r3
 8000728:	4806      	ldr	r0, [pc, #24]	; (8000744 <MX_GPIO_Init+0x1b0>)
 800072a:	f000 fe3d 	bl	80013a8 <HAL_GPIO_Init>

}
 800072e:	bf00      	nop
 8000730:	3730      	adds	r7, #48	; 0x30
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800
 800073c:	40021000 	.word	0x40021000
 8000740:	40020800 	.word	0x40020800
 8000744:	40020c00 	.word	0x40020c00
 8000748:	40020000 	.word	0x40020000

0800074c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_I2C1_Init+0x50>)
 8000752:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <MX_I2C1_Init+0x54>)
 8000754:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_I2C1_Init+0x50>)
 8000758:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <MX_I2C1_Init+0x58>)
 800075a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_I2C1_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_I2C1_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_I2C1_Init+0x50>)
 800076a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800076e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <MX_I2C1_Init+0x50>)
 8000772:	2200      	movs	r2, #0
 8000774:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_I2C1_Init+0x50>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <MX_I2C1_Init+0x50>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_I2C1_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_I2C1_Init+0x50>)
 800078a:	f002 fd15 	bl	80031b8 <HAL_I2C_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000794:	f000 fad6 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	200000b4 	.word	0x200000b4
 80007a0:	40005400 	.word	0x40005400
 80007a4:	000186a0 	.word	0x000186a0

080007a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a19      	ldr	r2, [pc, #100]	; (800082c <HAL_I2C_MspInit+0x84>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d12c      	bne.n	8000824 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	4b18      	ldr	r3, [pc, #96]	; (8000830 <HAL_I2C_MspInit+0x88>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a17      	ldr	r2, [pc, #92]	; (8000830 <HAL_I2C_MspInit+0x88>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <HAL_I2C_MspInit+0x88>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80007e6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80007ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ec:	2312      	movs	r3, #18
 80007ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f0:	2301      	movs	r3, #1
 80007f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007f8:	2304      	movs	r3, #4
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	480c      	ldr	r0, [pc, #48]	; (8000834 <HAL_I2C_MspInit+0x8c>)
 8000804:	f000 fdd0 	bl	80013a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <HAL_I2C_MspInit+0x88>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	4a07      	ldr	r2, [pc, #28]	; (8000830 <HAL_I2C_MspInit+0x88>)
 8000812:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000816:	6413      	str	r3, [r2, #64]	; 0x40
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <HAL_I2C_MspInit+0x88>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	; 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40005400 	.word	0x40005400
 8000830:	40023800 	.word	0x40023800
 8000834:	40020400 	.word	0x40020400

08000838 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_I2S2_Init+0x50>)
 800083e:	4a13      	ldr	r2, [pc, #76]	; (800088c <MX_I2S2_Init+0x54>)
 8000840:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_I2S2_Init+0x50>)
 8000844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000848:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_I2S2_Init+0x50>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000850:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <MX_I2S2_Init+0x50>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_I2S2_Init+0x50>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MX_I2S2_Init+0x50>)
 800085e:	4a0c      	ldr	r2, [pc, #48]	; (8000890 <MX_I2S2_Init+0x58>)
 8000860:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_I2S2_Init+0x50>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <MX_I2S2_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_I2S2_Init+0x50>)
 8000870:	2201      	movs	r2, #1
 8000872:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_I2S2_Init+0x50>)
 8000876:	f002 fe6b 	bl	8003550 <HAL_I2S_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000880:	f000 fa60 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000108 	.word	0x20000108
 800088c:	40003800 	.word	0x40003800
 8000890:	00017700 	.word	0x00017700

08000894 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_I2S3_Init+0x54>)
 800089a:	4a14      	ldr	r2, [pc, #80]	; (80008ec <MX_I2S3_Init+0x58>)
 800089c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_I2S3_Init+0x54>)
 80008a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <MX_I2S3_Init+0x54>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_I2S3_Init+0x54>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <MX_I2S3_Init+0x54>)
 80008b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_I2S3_Init+0x54>)
 80008bc:	4a0c      	ldr	r2, [pc, #48]	; (80008f0 <MX_I2S3_Init+0x5c>)
 80008be:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_I2S3_Init+0x54>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_I2S3_Init+0x54>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_I2S3_Init+0x54>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_I2S3_Init+0x54>)
 80008d4:	f002 fe3c 	bl	8003550 <HAL_I2S_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008de:	f000 fa31 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000150 	.word	0x20000150
 80008ec:	40003c00 	.word	0x40003c00
 80008f0:	00017700 	.word	0x00017700

080008f4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08e      	sub	sp, #56	; 0x38
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a59      	ldr	r2, [pc, #356]	; (8000a78 <HAL_I2S_MspInit+0x184>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d15b      	bne.n	80009ce <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
 800091a:	4b58      	ldr	r3, [pc, #352]	; (8000a7c <HAL_I2S_MspInit+0x188>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	4a57      	ldr	r2, [pc, #348]	; (8000a7c <HAL_I2S_MspInit+0x188>)
 8000920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000924:	6413      	str	r3, [r2, #64]	; 0x40
 8000926:	4b55      	ldr	r3, [pc, #340]	; (8000a7c <HAL_I2S_MspInit+0x188>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800092e:	623b      	str	r3, [r7, #32]
 8000930:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
 8000936:	4b51      	ldr	r3, [pc, #324]	; (8000a7c <HAL_I2S_MspInit+0x188>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a50      	ldr	r2, [pc, #320]	; (8000a7c <HAL_I2S_MspInit+0x188>)
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b4e      	ldr	r3, [pc, #312]	; (8000a7c <HAL_I2S_MspInit+0x188>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	61fb      	str	r3, [r7, #28]
 800094c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	61bb      	str	r3, [r7, #24]
 8000952:	4b4a      	ldr	r3, [pc, #296]	; (8000a7c <HAL_I2S_MspInit+0x188>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a49      	ldr	r2, [pc, #292]	; (8000a7c <HAL_I2S_MspInit+0x188>)
 8000958:	f043 0302 	orr.w	r3, r3, #2
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b47      	ldr	r3, [pc, #284]	; (8000a7c <HAL_I2S_MspInit+0x188>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0302 	and.w	r3, r3, #2
 8000966:	61bb      	str	r3, [r7, #24]
 8000968:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800096a:	2304      	movs	r3, #4
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800097a:	2306      	movs	r3, #6
 800097c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000982:	4619      	mov	r1, r3
 8000984:	483e      	ldr	r0, [pc, #248]	; (8000a80 <HAL_I2S_MspInit+0x18c>)
 8000986:	f000 fd0f 	bl	80013a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800098a:	2308      	movs	r3, #8
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800099a:	2305      	movs	r3, #5
 800099c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a2:	4619      	mov	r1, r3
 80009a4:	4836      	ldr	r0, [pc, #216]	; (8000a80 <HAL_I2S_MspInit+0x18c>)
 80009a6:	f000 fcff 	bl	80013a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80009aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009bc:	2305      	movs	r3, #5
 80009be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c4:	4619      	mov	r1, r3
 80009c6:	482f      	ldr	r0, [pc, #188]	; (8000a84 <HAL_I2S_MspInit+0x190>)
 80009c8:	f000 fcee 	bl	80013a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80009cc:	e04f      	b.n	8000a6e <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a2d      	ldr	r2, [pc, #180]	; (8000a88 <HAL_I2S_MspInit+0x194>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d14a      	bne.n	8000a6e <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	4b27      	ldr	r3, [pc, #156]	; (8000a7c <HAL_I2S_MspInit+0x188>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	4a26      	ldr	r2, [pc, #152]	; (8000a7c <HAL_I2S_MspInit+0x188>)
 80009e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009e6:	6413      	str	r3, [r2, #64]	; 0x40
 80009e8:	4b24      	ldr	r3, [pc, #144]	; (8000a7c <HAL_I2S_MspInit+0x188>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <HAL_I2S_MspInit+0x188>)
 80009fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fc:	4a1f      	ldr	r2, [pc, #124]	; (8000a7c <HAL_I2S_MspInit+0x188>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	6313      	str	r3, [r2, #48]	; 0x30
 8000a04:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <HAL_I2S_MspInit+0x188>)
 8000a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a08:	f003 0301 	and.w	r3, r3, #1
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <HAL_I2S_MspInit+0x188>)
 8000a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a18:	4a18      	ldr	r2, [pc, #96]	; (8000a7c <HAL_I2S_MspInit+0x188>)
 8000a1a:	f043 0304 	orr.w	r3, r3, #4
 8000a1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a20:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <HAL_I2S_MspInit+0x188>)
 8000a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a24:	f003 0304 	and.w	r3, r3, #4
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a2c:	2310      	movs	r3, #16
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a3c:	2306      	movs	r3, #6
 8000a3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a44:	4619      	mov	r1, r3
 8000a46:	4811      	ldr	r0, [pc, #68]	; (8000a8c <HAL_I2S_MspInit+0x198>)
 8000a48:	f000 fcae 	bl	80013a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a4c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a5e:	2306      	movs	r3, #6
 8000a60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a66:	4619      	mov	r1, r3
 8000a68:	4805      	ldr	r0, [pc, #20]	; (8000a80 <HAL_I2S_MspInit+0x18c>)
 8000a6a:	f000 fc9d 	bl	80013a8 <HAL_GPIO_Init>
}
 8000a6e:	bf00      	nop
 8000a70:	3738      	adds	r7, #56	; 0x38
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40003800 	.word	0x40003800
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40020800 	.word	0x40020800
 8000a84:	40020400 	.word	0x40020400
 8000a88:	40003c00 	.word	0x40003c00
 8000a8c:	40020000 	.word	0x40020000

08000a90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a90:	b5b0      	push	{r4, r5, r7, lr}
 8000a92:	b090      	sub	sp, #64	; 0x40
 8000a94:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a96:	f000 fab1 	bl	8000ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a9a:	f000 f8cb 	bl	8000c34 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a9e:	f000 f931 	bl	8000d04 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa2:	f7ff fd77 	bl	8000594 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000aa6:	f7ff fe51 	bl	800074c <MX_I2C1_Init>
  MX_I2S2_Init();
 8000aaa:	f7ff fec5 	bl	8000838 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000aae:	f7ff fef1 	bl	8000894 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000ab2:	f000 f957 	bl	8000d64 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000ab6:	f007 fc6b 	bl	8008390 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  initialise_monitor_handles();
 8000aba:	f009 fb65 	bl	800a188 <initialise_monitor_handles>
  printf("Semihosting test...\n\r");
 8000abe:	4856      	ldr	r0, [pc, #344]	; (8000c18 <main+0x188>)
 8000ac0:	f008 ff5c 	bl	800997c <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    int states[] = {0, 0, 0, 0, 0, 0};
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
 8000ad4:	615a      	str	r2, [r3, #20]
    uint16_t pins[] = {GPIO_PIN_7, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12};
 8000ad6:	4a51      	ldr	r2, [pc, #324]	; (8000c1c <main+0x18c>)
 8000ad8:	463b      	mov	r3, r7
 8000ada:	ca07      	ldmia	r2, {r0, r1, r2}
 8000adc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    FILE* file_path = fopen("C:\\Users\\klyms\\punched_type\\line_1.txt", "w");
 8000ae0:	494f      	ldr	r1, [pc, #316]	; (8000c20 <main+0x190>)
 8000ae2:	4850      	ldr	r0, [pc, #320]	; (8000c24 <main+0x194>)
 8000ae4:	f008 f9d4 	bl	8008e90 <fopen>
 8000ae8:	62f8      	str	r0, [r7, #44]	; 0x2c
    while (1)
    {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000aea:	f007 fc77 	bl	80083dc <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

       	for (int i = 0; i < 6; ++i){
 8000aee:	2300      	movs	r3, #0
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000af2:	e01e      	b.n	8000b32 <main+0xa2>
       		if (HAL_GPIO_ReadPin(GPIOE, pins[i]) == GPIO_PIN_SET){
 8000af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	3330      	adds	r3, #48	; 0x30
 8000afa:	443b      	add	r3, r7
 8000afc:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8000b00:	4619      	mov	r1, r3
 8000b02:	4849      	ldr	r0, [pc, #292]	; (8000c28 <main+0x198>)
 8000b04:	f000 feea 	bl	80018dc <HAL_GPIO_ReadPin>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d107      	bne.n	8000b1e <main+0x8e>
      				states[i] = 1;
 8000b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	3330      	adds	r3, #48	; 0x30
 8000b14:	443b      	add	r3, r7
 8000b16:	2201      	movs	r2, #1
 8000b18:	f843 2c24 	str.w	r2, [r3, #-36]
 8000b1c:	e006      	b.n	8000b2c <main+0x9c>
       		} else{
       			states[i] = 0;
 8000b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	3330      	adds	r3, #48	; 0x30
 8000b24:	443b      	add	r3, r7
 8000b26:	2200      	movs	r2, #0
 8000b28:	f843 2c24 	str.w	r2, [r3, #-36]
       	for (int i = 0; i < 6; ++i){
 8000b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b2e:	3301      	adds	r3, #1
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b34:	2b05      	cmp	r3, #5
 8000b36:	dddd      	ble.n	8000af4 <main+0x64>
       		}
       	}
       	printf("%i%i%i%i%i%i\r\n", states[0], states[1], states[2], states[3], states[4], states[5]);
 8000b38:	68f8      	ldr	r0, [r7, #12]
 8000b3a:	693c      	ldr	r4, [r7, #16]
 8000b3c:	697d      	ldr	r5, [r7, #20]
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	69fa      	ldr	r2, [r7, #28]
 8000b42:	6a39      	ldr	r1, [r7, #32]
 8000b44:	9102      	str	r1, [sp, #8]
 8000b46:	9201      	str	r2, [sp, #4]
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	462b      	mov	r3, r5
 8000b4c:	4622      	mov	r2, r4
 8000b4e:	4601      	mov	r1, r0
 8000b50:	4836      	ldr	r0, [pc, #216]	; (8000c2c <main+0x19c>)
 8000b52:	f008 ff13 	bl	800997c <iprintf>
     	fprintf(file_path, "%i%i%i%i%i%i\r\n", states[0], states[1], states[2], states[3], states[4], states[5]);
 8000b56:	68fc      	ldr	r4, [r7, #12]
 8000b58:	693d      	ldr	r5, [r7, #16]
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	69ba      	ldr	r2, [r7, #24]
 8000b5e:	69f9      	ldr	r1, [r7, #28]
 8000b60:	6a38      	ldr	r0, [r7, #32]
 8000b62:	9003      	str	r0, [sp, #12]
 8000b64:	9102      	str	r1, [sp, #8]
 8000b66:	9201      	str	r2, [sp, #4]
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	462b      	mov	r3, r5
 8000b6c:	4622      	mov	r2, r4
 8000b6e:	492f      	ldr	r1, [pc, #188]	; (8000c2c <main+0x19c>)
 8000b70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000b72:	f008 f995 	bl	8008ea0 <fiprintf>
     	fflush(file_path);
 8000b76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000b78:	f008 f84e 	bl	8008c18 <fflush>
     	fclose(file_path);
 8000b7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000b7e:	f007 ff81 	bl	8008a84 <fclose>
     	file_path = fopen("C:\\Users\\klyms\\punched_type\\line_1.txt", "a");
 8000b82:	492b      	ldr	r1, [pc, #172]	; (8000c30 <main+0x1a0>)
 8000b84:	4827      	ldr	r0, [pc, #156]	; (8000c24 <main+0x194>)
 8000b86:	f008 f983 	bl	8008e90 <fopen>
 8000b8a:	62f8      	str	r0, [r7, #44]	; 0x2c
     	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10) == GPIO_PIN_SET ){
 8000b8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b90:	4825      	ldr	r0, [pc, #148]	; (8000c28 <main+0x198>)
 8000b92:	f000 fea3 	bl	80018dc <HAL_GPIO_ReadPin>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d1a6      	bne.n	8000aea <main+0x5a>
     	   		for (int i = 0; i < 6; ++i){
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8000ba0:	e01e      	b.n	8000be0 <main+0x150>
     	   			if (HAL_GPIO_ReadPin(GPIOE, pins[i]) == GPIO_PIN_SET){
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	3330      	adds	r3, #48	; 0x30
 8000ba8:	443b      	add	r3, r7
 8000baa:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8000bae:	4619      	mov	r1, r3
 8000bb0:	481d      	ldr	r0, [pc, #116]	; (8000c28 <main+0x198>)
 8000bb2:	f000 fe93 	bl	80018dc <HAL_GPIO_ReadPin>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d107      	bne.n	8000bcc <main+0x13c>
     	   					states[i] = 1;
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	3330      	adds	r3, #48	; 0x30
 8000bc2:	443b      	add	r3, r7
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f843 2c24 	str.w	r2, [r3, #-36]
 8000bca:	e006      	b.n	8000bda <main+0x14a>
     	   			} else{
     	   				states[i] = 0;
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	3330      	adds	r3, #48	; 0x30
 8000bd2:	443b      	add	r3, r7
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f843 2c24 	str.w	r2, [r3, #-36]
     	   		for (int i = 0; i < 6; ++i){
 8000bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bdc:	3301      	adds	r3, #1
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
 8000be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be2:	2b05      	cmp	r3, #5
 8000be4:	dddd      	ble.n	8000ba2 <main+0x112>
     	    		}
     	    	}
     	     	printf("%i%i%i%i%i%i\r\n", states[0], states[1], states[2], states[3], states[4], states[5]);
 8000be6:	68f8      	ldr	r0, [r7, #12]
 8000be8:	693c      	ldr	r4, [r7, #16]
 8000bea:	697d      	ldr	r5, [r7, #20]
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	69fa      	ldr	r2, [r7, #28]
 8000bf0:	6a39      	ldr	r1, [r7, #32]
 8000bf2:	9102      	str	r1, [sp, #8]
 8000bf4:	9201      	str	r2, [sp, #4]
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	462b      	mov	r3, r5
 8000bfa:	4622      	mov	r2, r4
 8000bfc:	4601      	mov	r1, r0
 8000bfe:	480b      	ldr	r0, [pc, #44]	; (8000c2c <main+0x19c>)
 8000c00:	f008 febc 	bl	800997c <iprintf>
     	  		while( HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10) == GPIO_PIN_SET ){
 8000c04:	bf00      	nop
 8000c06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c0a:	4807      	ldr	r0, [pc, #28]	; (8000c28 <main+0x198>)
 8000c0c:	f000 fe66 	bl	80018dc <HAL_GPIO_ReadPin>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d0f7      	beq.n	8000c06 <main+0x176>
    MX_USB_HOST_Process();
 8000c16:	e768      	b.n	8000aea <main+0x5a>
 8000c18:	0800a298 	.word	0x0800a298
 8000c1c:	0800a2f0 	.word	0x0800a2f0
 8000c20:	0800a2b0 	.word	0x0800a2b0
 8000c24:	0800a2b4 	.word	0x0800a2b4
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	0800a2dc 	.word	0x0800a2dc
 8000c30:	0800a2ec 	.word	0x0800a2ec

08000c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b094      	sub	sp, #80	; 0x50
 8000c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3a:	f107 0320 	add.w	r3, r7, #32
 8000c3e:	2230      	movs	r2, #48	; 0x30
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f008 fab2 	bl	80091ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	4b27      	ldr	r3, [pc, #156]	; (8000cfc <SystemClock_Config+0xc8>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c60:	4a26      	ldr	r2, [pc, #152]	; (8000cfc <SystemClock_Config+0xc8>)
 8000c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c66:	6413      	str	r3, [r2, #64]	; 0x40
 8000c68:	4b24      	ldr	r3, [pc, #144]	; (8000cfc <SystemClock_Config+0xc8>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c74:	2300      	movs	r3, #0
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <SystemClock_Config+0xcc>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a20      	ldr	r2, [pc, #128]	; (8000d00 <SystemClock_Config+0xcc>)
 8000c7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c82:	6013      	str	r3, [r2, #0]
 8000c84:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <SystemClock_Config+0xcc>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c90:	2301      	movs	r3, #1
 8000c92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ca8:	23c0      	movs	r3, #192	; 0xc0
 8000caa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cac:	2304      	movs	r3, #4
 8000cae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000cb0:	2308      	movs	r3, #8
 8000cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb4:	f107 0320 	add.w	r3, r7, #32
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f003 f9a7 	bl	800400c <HAL_RCC_OscConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cc4:	f000 f83e 	bl	8000d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc8:	230f      	movs	r3, #15
 8000cca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cd4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000cde:	f107 030c 	add.w	r3, r7, #12
 8000ce2:	2103      	movs	r1, #3
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f003 fcb9 	bl	800465c <HAL_RCC_ClockConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000cf0:	f000 f828 	bl	8000d44 <Error_Handler>
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	3750      	adds	r7, #80	; 0x50
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40007000 	.word	0x40007000

08000d04 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
 8000d18:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000d1e:	23c8      	movs	r3, #200	; 0xc8
 8000d20:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000d22:	2305      	movs	r3, #5
 8000d24:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d26:	2302      	movs	r3, #2
 8000d28:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f003 ff49 	bl	8004bc4 <HAL_RCCEx_PeriphCLKConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000d38:	f000 f804 	bl	8000d44 <Error_Handler>
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d48:	b672      	cpsid	i
}
 8000d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <Error_Handler+0x8>

08000d4e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
 8000d56:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <MX_SPI1_Init+0x64>)
 8000d6a:	4a18      	ldr	r2, [pc, #96]	; (8000dcc <MX_SPI1_Init+0x68>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d6e:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <MX_SPI1_Init+0x64>)
 8000d70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <MX_SPI1_Init+0x64>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <MX_SPI1_Init+0x64>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <MX_SPI1_Init+0x64>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <MX_SPI1_Init+0x64>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MX_SPI1_Init+0x64>)
 8000d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <MX_SPI1_Init+0x64>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <MX_SPI1_Init+0x64>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_SPI1_Init+0x64>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <MX_SPI1_Init+0x64>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_SPI1_Init+0x64>)
 8000db0:	220a      	movs	r2, #10
 8000db2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000db4:	4804      	ldr	r0, [pc, #16]	; (8000dc8 <MX_SPI1_Init+0x64>)
 8000db6:	f004 f97b 	bl	80050b0 <HAL_SPI_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000dc0:	f7ff ffc0 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000198 	.word	0x20000198
 8000dcc:	40013000 	.word	0x40013000

08000dd0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a19      	ldr	r2, [pc, #100]	; (8000e54 <HAL_SPI_MspInit+0x84>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d12b      	bne.n	8000e4a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <HAL_SPI_MspInit+0x88>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	4a17      	ldr	r2, [pc, #92]	; (8000e58 <HAL_SPI_MspInit+0x88>)
 8000dfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e00:	6453      	str	r3, [r2, #68]	; 0x44
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <HAL_SPI_MspInit+0x88>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <HAL_SPI_MspInit+0x88>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a10      	ldr	r2, [pc, #64]	; (8000e58 <HAL_SPI_MspInit+0x88>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <HAL_SPI_MspInit+0x88>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e2a:	23e0      	movs	r3, #224	; 0xe0
 8000e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e3a:	2305      	movs	r3, #5
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	4805      	ldr	r0, [pc, #20]	; (8000e5c <HAL_SPI_MspInit+0x8c>)
 8000e46:	f000 faaf 	bl	80013a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	3728      	adds	r7, #40	; 0x28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40013000 	.word	0x40013000
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020000 	.word	0x40020000

08000e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <HAL_MspInit+0x4c>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	4a0f      	ldr	r2, [pc, #60]	; (8000eac <HAL_MspInit+0x4c>)
 8000e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e74:	6453      	str	r3, [r2, #68]	; 0x44
 8000e76:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <HAL_MspInit+0x4c>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	603b      	str	r3, [r7, #0]
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <HAL_MspInit+0x4c>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	4a08      	ldr	r2, [pc, #32]	; (8000eac <HAL_MspInit+0x4c>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e90:	6413      	str	r3, [r2, #64]	; 0x40
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_MspInit+0x4c>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e9e:	2007      	movs	r0, #7
 8000ea0:	f000 fa12 	bl	80012c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40023800 	.word	0x40023800

08000eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <NMI_Handler+0x4>

08000eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <HardFault_Handler+0x4>

08000ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <MemManage_Handler+0x4>

08000ec2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <BusFault_Handler+0x4>

08000ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <UsageFault_Handler+0x4>

08000ece <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efc:	f000 f8d0 	bl	80010a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <OTG_FS_IRQHandler+0x10>)
 8000f0a:	f000 ffb5 	bl	8001e78 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200005d4 	.word	0x200005d4

08000f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f20:	4a14      	ldr	r2, [pc, #80]	; (8000f74 <_sbrk+0x5c>)
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <_sbrk+0x60>)
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <_sbrk+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d102      	bne.n	8000f3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <_sbrk+0x64>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <_sbrk+0x68>)
 8000f38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d207      	bcs.n	8000f58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f48:	f007 fd2a 	bl	80089a0 <__errno>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	220c      	movs	r2, #12
 8000f50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	e009      	b.n	8000f6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f5e:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <_sbrk+0x64>)
 8000f68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20020000 	.word	0x20020000
 8000f78:	00000400 	.word	0x00000400
 8000f7c:	200001f0 	.word	0x200001f0
 8000f80:	20000998 	.word	0x20000998

08000f84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <SystemInit+0x20>)
 8000f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f8e:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <SystemInit+0x20>)
 8000f90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fac:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fae:	490e      	ldr	r1, [pc, #56]	; (8000fe8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fb0:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb4:	e002      	b.n	8000fbc <LoopCopyDataInit>

08000fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fba:	3304      	adds	r3, #4

08000fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc0:	d3f9      	bcc.n	8000fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc2:	4a0b      	ldr	r2, [pc, #44]	; (8000ff0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fc4:	4c0b      	ldr	r4, [pc, #44]	; (8000ff4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc8:	e001      	b.n	8000fce <LoopFillZerobss>

08000fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fcc:	3204      	adds	r2, #4

08000fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd0:	d3fb      	bcc.n	8000fca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fd2:	f7ff ffd7 	bl	8000f84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fd6:	f008 f84b 	bl	8009070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fda:	f7ff fd59 	bl	8000a90 <main>
  bx  lr    
 8000fde:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fe0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe8:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000fec:	0800a5a8 	.word	0x0800a5a8
  ldr r2, =_sbss
 8000ff0:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000ff4:	20000994 	.word	0x20000994

08000ff8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <ADC_IRQHandler>
	...

08000ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <HAL_Init+0x40>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0d      	ldr	r2, [pc, #52]	; (800103c <HAL_Init+0x40>)
 8001006:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800100a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <HAL_Init+0x40>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0a      	ldr	r2, [pc, #40]	; (800103c <HAL_Init+0x40>)
 8001012:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001016:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <HAL_Init+0x40>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a07      	ldr	r2, [pc, #28]	; (800103c <HAL_Init+0x40>)
 800101e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001022:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001024:	2003      	movs	r0, #3
 8001026:	f000 f94f 	bl	80012c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800102a:	2000      	movs	r0, #0
 800102c:	f000 f808 	bl	8001040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001030:	f7ff ff16 	bl	8000e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40023c00 	.word	0x40023c00

08001040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <HAL_InitTick+0x54>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <HAL_InitTick+0x58>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4619      	mov	r1, r3
 8001052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001056:	fbb3 f3f1 	udiv	r3, r3, r1
 800105a:	fbb2 f3f3 	udiv	r3, r2, r3
 800105e:	4618      	mov	r0, r3
 8001060:	f000 f996 	bl	8001390 <HAL_SYSTICK_Config>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e00e      	b.n	800108c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b0f      	cmp	r3, #15
 8001072:	d80a      	bhi.n	800108a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001074:	2200      	movs	r2, #0
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	f04f 30ff 	mov.w	r0, #4294967295
 800107c:	f000 f944 	bl	8001308 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001080:	4a06      	ldr	r2, [pc, #24]	; (800109c <HAL_InitTick+0x5c>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001086:	2300      	movs	r3, #0
 8001088:	e000      	b.n	800108c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000000 	.word	0x20000000
 8001098:	20000008 	.word	0x20000008
 800109c:	20000004 	.word	0x20000004

080010a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_IncTick+0x20>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_IncTick+0x24>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <HAL_IncTick+0x24>)
 80010b2:	6013      	str	r3, [r2, #0]
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000008 	.word	0x20000008
 80010c4:	200001f4 	.word	0x200001f4

080010c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return uwTick;
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <HAL_GetTick+0x14>)
 80010ce:	681b      	ldr	r3, [r3, #0]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	200001f4 	.word	0x200001f4

080010e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e8:	f7ff ffee 	bl	80010c8 <HAL_GetTick>
 80010ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f8:	d005      	beq.n	8001106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <HAL_Delay+0x44>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4413      	add	r3, r2
 8001104:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001106:	bf00      	nop
 8001108:	f7ff ffde 	bl	80010c8 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	429a      	cmp	r2, r3
 8001116:	d8f7      	bhi.n	8001108 <HAL_Delay+0x28>
  {
  }
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000008 	.word	0x20000008

08001128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <__NVIC_SetPriorityGrouping+0x44>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001144:	4013      	ands	r3, r2
 8001146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001150:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115a:	4a04      	ldr	r2, [pc, #16]	; (800116c <__NVIC_SetPriorityGrouping+0x44>)
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	60d3      	str	r3, [r2, #12]
}
 8001160:	bf00      	nop
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <__NVIC_GetPriorityGrouping+0x18>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	f003 0307 	and.w	r3, r3, #7
}
 800117e:	4618      	mov	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	2b00      	cmp	r3, #0
 800119c:	db0b      	blt.n	80011b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	f003 021f 	and.w	r2, r3, #31
 80011a4:	4907      	ldr	r1, [pc, #28]	; (80011c4 <__NVIC_EnableIRQ+0x38>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	095b      	lsrs	r3, r3, #5
 80011ac:	2001      	movs	r0, #1
 80011ae:	fa00 f202 	lsl.w	r2, r0, r2
 80011b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000e100 	.word	0xe000e100

080011c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	db0a      	blt.n	80011f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	490c      	ldr	r1, [pc, #48]	; (8001214 <__NVIC_SetPriority+0x4c>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	0112      	lsls	r2, r2, #4
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	440b      	add	r3, r1
 80011ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f0:	e00a      	b.n	8001208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4908      	ldr	r1, [pc, #32]	; (8001218 <__NVIC_SetPriority+0x50>)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	3b04      	subs	r3, #4
 8001200:	0112      	lsls	r2, r2, #4
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	440b      	add	r3, r1
 8001206:	761a      	strb	r2, [r3, #24]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000e100 	.word	0xe000e100
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121c:	b480      	push	{r7}
 800121e:	b089      	sub	sp, #36	; 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f1c3 0307 	rsb	r3, r3, #7
 8001236:	2b04      	cmp	r3, #4
 8001238:	bf28      	it	cs
 800123a:	2304      	movcs	r3, #4
 800123c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3304      	adds	r3, #4
 8001242:	2b06      	cmp	r3, #6
 8001244:	d902      	bls.n	800124c <NVIC_EncodePriority+0x30>
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3b03      	subs	r3, #3
 800124a:	e000      	b.n	800124e <NVIC_EncodePriority+0x32>
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	f04f 32ff 	mov.w	r2, #4294967295
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	401a      	ands	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001264:	f04f 31ff 	mov.w	r1, #4294967295
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	43d9      	mvns	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	4313      	orrs	r3, r2
         );
}
 8001276:	4618      	mov	r0, r3
 8001278:	3724      	adds	r7, #36	; 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001294:	d301      	bcc.n	800129a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001296:	2301      	movs	r3, #1
 8001298:	e00f      	b.n	80012ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129a:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <SysTick_Config+0x40>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a2:	210f      	movs	r1, #15
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f7ff ff8e 	bl	80011c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ac:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <SysTick_Config+0x40>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b2:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <SysTick_Config+0x40>)
 80012b4:	2207      	movs	r2, #7
 80012b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	e000e010 	.word	0xe000e010

080012c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b07      	cmp	r3, #7
 80012d4:	d00f      	beq.n	80012f6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b06      	cmp	r3, #6
 80012da:	d00c      	beq.n	80012f6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b05      	cmp	r3, #5
 80012e0:	d009      	beq.n	80012f6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b04      	cmp	r3, #4
 80012e6:	d006      	beq.n	80012f6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b03      	cmp	r3, #3
 80012ec:	d003      	beq.n	80012f6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80012ee:	2190      	movs	r1, #144	; 0x90
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80012f2:	f7ff fd2c 	bl	8000d4e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ff16 	bl	8001128 <__NVIC_SetPriorityGrouping>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	0800a2fc 	.word	0x0800a2fc

08001308 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
 8001314:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b0f      	cmp	r3, #15
 800131e:	d903      	bls.n	8001328 <HAL_NVIC_SetPriority+0x20>
 8001320:	21a8      	movs	r1, #168	; 0xa8
 8001322:	480e      	ldr	r0, [pc, #56]	; (800135c <HAL_NVIC_SetPriority+0x54>)
 8001324:	f7ff fd13 	bl	8000d4e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	2b0f      	cmp	r3, #15
 800132c:	d903      	bls.n	8001336 <HAL_NVIC_SetPriority+0x2e>
 800132e:	21a9      	movs	r1, #169	; 0xa9
 8001330:	480a      	ldr	r0, [pc, #40]	; (800135c <HAL_NVIC_SetPriority+0x54>)
 8001332:	f7ff fd0c 	bl	8000d4e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001336:	f7ff ff1b 	bl	8001170 <__NVIC_GetPriorityGrouping>
 800133a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	68b9      	ldr	r1, [r7, #8]
 8001340:	6978      	ldr	r0, [r7, #20]
 8001342:	f7ff ff6b 	bl	800121c <NVIC_EncodePriority>
 8001346:	4602      	mov	r2, r0
 8001348:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134c:	4611      	mov	r1, r2
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff ff3a 	bl	80011c8 <__NVIC_SetPriority>
}
 8001354:	bf00      	nop
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	0800a2fc 	.word	0x0800a2fc

08001360 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	2b00      	cmp	r3, #0
 8001370:	da03      	bge.n	800137a <HAL_NVIC_EnableIRQ+0x1a>
 8001372:	21bc      	movs	r1, #188	; 0xbc
 8001374:	4805      	ldr	r0, [pc, #20]	; (800138c <HAL_NVIC_EnableIRQ+0x2c>)
 8001376:	f7ff fcea 	bl	8000d4e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ff04 	bl	800118c <__NVIC_EnableIRQ>
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	0800a2fc 	.word	0x0800a2fc

08001390 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ff73 	bl	8001284 <SysTick_Config>
 800139e:	4603      	mov	r3, r0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a33      	ldr	r2, [pc, #204]	; (8001490 <HAL_GPIO_Init+0xe8>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d017      	beq.n	80013f6 <HAL_GPIO_Init+0x4e>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a32      	ldr	r2, [pc, #200]	; (8001494 <HAL_GPIO_Init+0xec>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d013      	beq.n	80013f6 <HAL_GPIO_Init+0x4e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a31      	ldr	r2, [pc, #196]	; (8001498 <HAL_GPIO_Init+0xf0>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d00f      	beq.n	80013f6 <HAL_GPIO_Init+0x4e>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a30      	ldr	r2, [pc, #192]	; (800149c <HAL_GPIO_Init+0xf4>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d00b      	beq.n	80013f6 <HAL_GPIO_Init+0x4e>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a2f      	ldr	r2, [pc, #188]	; (80014a0 <HAL_GPIO_Init+0xf8>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d007      	beq.n	80013f6 <HAL_GPIO_Init+0x4e>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a2e      	ldr	r2, [pc, #184]	; (80014a4 <HAL_GPIO_Init+0xfc>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x4e>
 80013ee:	21ac      	movs	r1, #172	; 0xac
 80013f0:	482d      	ldr	r0, [pc, #180]	; (80014a8 <HAL_GPIO_Init+0x100>)
 80013f2:	f7ff fcac 	bl	8000d4e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d005      	beq.n	800140c <HAL_GPIO_Init+0x64>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	0c1b      	lsrs	r3, r3, #16
 8001406:	041b      	lsls	r3, r3, #16
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x6c>
 800140c:	21ad      	movs	r1, #173	; 0xad
 800140e:	4826      	ldr	r0, [pc, #152]	; (80014a8 <HAL_GPIO_Init+0x100>)
 8001410:	f7ff fc9d 	bl	8000d4e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d035      	beq.n	8001488 <HAL_GPIO_Init+0xe0>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d031      	beq.n	8001488 <HAL_GPIO_Init+0xe0>
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b11      	cmp	r3, #17
 800142a:	d02d      	beq.n	8001488 <HAL_GPIO_Init+0xe0>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b02      	cmp	r3, #2
 8001432:	d029      	beq.n	8001488 <HAL_GPIO_Init+0xe0>
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b12      	cmp	r3, #18
 800143a:	d025      	beq.n	8001488 <HAL_GPIO_Init+0xe0>
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001444:	d020      	beq.n	8001488 <HAL_GPIO_Init+0xe0>
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800144e:	d01b      	beq.n	8001488 <HAL_GPIO_Init+0xe0>
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001458:	d016      	beq.n	8001488 <HAL_GPIO_Init+0xe0>
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001462:	d011      	beq.n	8001488 <HAL_GPIO_Init+0xe0>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 800146c:	d00c      	beq.n	8001488 <HAL_GPIO_Init+0xe0>
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001476:	d007      	beq.n	8001488 <HAL_GPIO_Init+0xe0>
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b03      	cmp	r3, #3
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0xe0>
 8001480:	21ae      	movs	r1, #174	; 0xae
 8001482:	4809      	ldr	r0, [pc, #36]	; (80014a8 <HAL_GPIO_Init+0x100>)
 8001484:	f7ff fc63 	bl	8000d4e <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
 800148c:	e20c      	b.n	80018a8 <HAL_GPIO_Init+0x500>
 800148e:	bf00      	nop
 8001490:	40020000 	.word	0x40020000
 8001494:	40020400 	.word	0x40020400
 8001498:	40020800 	.word	0x40020800
 800149c:	40020c00 	.word	0x40020c00
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40021c00 	.word	0x40021c00
 80014a8:	0800a338 	.word	0x0800a338
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014ac:	2201      	movs	r2, #1
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	f040 81ec 	bne.w	80018a2 <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d005      	beq.n	80014e2 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d144      	bne.n	800156c <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d00f      	beq.n	800150a <HAL_GPIO_Init+0x162>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d00b      	beq.n	800150a <HAL_GPIO_Init+0x162>
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d007      	beq.n	800150a <HAL_GPIO_Init+0x162>
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x162>
 8001502:	21c0      	movs	r1, #192	; 0xc0
 8001504:	4884      	ldr	r0, [pc, #528]	; (8001718 <HAL_GPIO_Init+0x370>)
 8001506:	f7ff fc22 	bl	8000d4e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	2203      	movs	r2, #3
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	68da      	ldr	r2, [r3, #12]
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001540:	2201      	movs	r2, #1
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	091b      	lsrs	r3, r3, #4
 8001556:	f003 0201 	and.w	r2, r3, #1
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	2b03      	cmp	r3, #3
 8001576:	d027      	beq.n	80015c8 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d00b      	beq.n	8001598 <HAL_GPIO_Init+0x1f0>
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d007      	beq.n	8001598 <HAL_GPIO_Init+0x1f0>
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b02      	cmp	r3, #2
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x1f0>
 8001590:	21d1      	movs	r1, #209	; 0xd1
 8001592:	4861      	ldr	r0, [pc, #388]	; (8001718 <HAL_GPIO_Init+0x370>)
 8001594:	f7ff fbdb 	bl	8000d4e <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2203      	movs	r2, #3
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	f040 80a3 	bne.w	800171c <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d077      	beq.n	80016ce <HAL_GPIO_Init+0x326>
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	2b09      	cmp	r3, #9
 80015e4:	d073      	beq.n	80016ce <HAL_GPIO_Init+0x326>
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d06f      	beq.n	80016ce <HAL_GPIO_Init+0x326>
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d06b      	beq.n	80016ce <HAL_GPIO_Init+0x326>
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d067      	beq.n	80016ce <HAL_GPIO_Init+0x326>
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d063      	beq.n	80016ce <HAL_GPIO_Init+0x326>
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d05f      	beq.n	80016ce <HAL_GPIO_Init+0x326>
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d05b      	beq.n	80016ce <HAL_GPIO_Init+0x326>
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d057      	beq.n	80016ce <HAL_GPIO_Init+0x326>
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	2b02      	cmp	r3, #2
 8001624:	d053      	beq.n	80016ce <HAL_GPIO_Init+0x326>
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d04f      	beq.n	80016ce <HAL_GPIO_Init+0x326>
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	2b04      	cmp	r3, #4
 8001634:	d04b      	beq.n	80016ce <HAL_GPIO_Init+0x326>
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	2b04      	cmp	r3, #4
 800163c:	d047      	beq.n	80016ce <HAL_GPIO_Init+0x326>
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	2b04      	cmp	r3, #4
 8001644:	d043      	beq.n	80016ce <HAL_GPIO_Init+0x326>
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	2b05      	cmp	r3, #5
 800164c:	d03f      	beq.n	80016ce <HAL_GPIO_Init+0x326>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	2b05      	cmp	r3, #5
 8001654:	d03b      	beq.n	80016ce <HAL_GPIO_Init+0x326>
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	2b05      	cmp	r3, #5
 800165c:	d037      	beq.n	80016ce <HAL_GPIO_Init+0x326>
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	2b06      	cmp	r3, #6
 8001664:	d033      	beq.n	80016ce <HAL_GPIO_Init+0x326>
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	2b06      	cmp	r3, #6
 800166c:	d02f      	beq.n	80016ce <HAL_GPIO_Init+0x326>
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	2b05      	cmp	r3, #5
 8001674:	d02b      	beq.n	80016ce <HAL_GPIO_Init+0x326>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	2b06      	cmp	r3, #6
 800167c:	d027      	beq.n	80016ce <HAL_GPIO_Init+0x326>
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	2b07      	cmp	r3, #7
 8001684:	d023      	beq.n	80016ce <HAL_GPIO_Init+0x326>
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	2b07      	cmp	r3, #7
 800168c:	d01f      	beq.n	80016ce <HAL_GPIO_Init+0x326>
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	2b07      	cmp	r3, #7
 8001694:	d01b      	beq.n	80016ce <HAL_GPIO_Init+0x326>
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	2b08      	cmp	r3, #8
 800169c:	d017      	beq.n	80016ce <HAL_GPIO_Init+0x326>
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	2b0a      	cmp	r3, #10
 80016a4:	d013      	beq.n	80016ce <HAL_GPIO_Init+0x326>
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	2b09      	cmp	r3, #9
 80016ac:	d00f      	beq.n	80016ce <HAL_GPIO_Init+0x326>
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	2b09      	cmp	r3, #9
 80016b4:	d00b      	beq.n	80016ce <HAL_GPIO_Init+0x326>
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	2b0c      	cmp	r3, #12
 80016bc:	d007      	beq.n	80016ce <HAL_GPIO_Init+0x326>
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	2b0f      	cmp	r3, #15
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_Init+0x326>
 80016c6:	21de      	movs	r1, #222	; 0xde
 80016c8:	4813      	ldr	r0, [pc, #76]	; (8001718 <HAL_GPIO_Init+0x370>)
 80016ca:	f7ff fb40 	bl	8000d4e <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	08da      	lsrs	r2, r3, #3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3208      	adds	r2, #8
 80016d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	220f      	movs	r2, #15
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	691a      	ldr	r2, [r3, #16]
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	08da      	lsrs	r2, r3, #3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3208      	adds	r2, #8
 8001710:	69b9      	ldr	r1, [r7, #24]
 8001712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001716:	e001      	b.n	800171c <HAL_GPIO_Init+0x374>
 8001718:	0800a338 	.word	0x0800a338
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	2203      	movs	r2, #3
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0203 	and.w	r2, r3, #3
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 80a2 	beq.w	80018a2 <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	4b56      	ldr	r3, [pc, #344]	; (80018bc <HAL_GPIO_Init+0x514>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	4a55      	ldr	r2, [pc, #340]	; (80018bc <HAL_GPIO_Init+0x514>)
 8001768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800176c:	6453      	str	r3, [r2, #68]	; 0x44
 800176e:	4b53      	ldr	r3, [pc, #332]	; (80018bc <HAL_GPIO_Init+0x514>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800177a:	4a51      	ldr	r2, [pc, #324]	; (80018c0 <HAL_GPIO_Init+0x518>)
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	089b      	lsrs	r3, r3, #2
 8001780:	3302      	adds	r3, #2
 8001782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	220f      	movs	r2, #15
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4013      	ands	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a48      	ldr	r2, [pc, #288]	; (80018c4 <HAL_GPIO_Init+0x51c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d019      	beq.n	80017da <HAL_GPIO_Init+0x432>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a47      	ldr	r2, [pc, #284]	; (80018c8 <HAL_GPIO_Init+0x520>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d013      	beq.n	80017d6 <HAL_GPIO_Init+0x42e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a46      	ldr	r2, [pc, #280]	; (80018cc <HAL_GPIO_Init+0x524>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d00d      	beq.n	80017d2 <HAL_GPIO_Init+0x42a>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a45      	ldr	r2, [pc, #276]	; (80018d0 <HAL_GPIO_Init+0x528>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d007      	beq.n	80017ce <HAL_GPIO_Init+0x426>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a44      	ldr	r2, [pc, #272]	; (80018d4 <HAL_GPIO_Init+0x52c>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d101      	bne.n	80017ca <HAL_GPIO_Init+0x422>
 80017c6:	2304      	movs	r3, #4
 80017c8:	e008      	b.n	80017dc <HAL_GPIO_Init+0x434>
 80017ca:	2307      	movs	r3, #7
 80017cc:	e006      	b.n	80017dc <HAL_GPIO_Init+0x434>
 80017ce:	2303      	movs	r3, #3
 80017d0:	e004      	b.n	80017dc <HAL_GPIO_Init+0x434>
 80017d2:	2302      	movs	r3, #2
 80017d4:	e002      	b.n	80017dc <HAL_GPIO_Init+0x434>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <HAL_GPIO_Init+0x434>
 80017da:	2300      	movs	r3, #0
 80017dc:	69fa      	ldr	r2, [r7, #28]
 80017de:	f002 0203 	and.w	r2, r2, #3
 80017e2:	0092      	lsls	r2, r2, #2
 80017e4:	4093      	lsls	r3, r2
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017ec:	4934      	ldr	r1, [pc, #208]	; (80018c0 <HAL_GPIO_Init+0x518>)
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	089b      	lsrs	r3, r3, #2
 80017f2:	3302      	adds	r3, #2
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017fa:	4b37      	ldr	r3, [pc, #220]	; (80018d8 <HAL_GPIO_Init+0x530>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	43db      	mvns	r3, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800181e:	4a2e      	ldr	r2, [pc, #184]	; (80018d8 <HAL_GPIO_Init+0x530>)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001824:	4b2c      	ldr	r3, [pc, #176]	; (80018d8 <HAL_GPIO_Init+0x530>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001848:	4a23      	ldr	r2, [pc, #140]	; (80018d8 <HAL_GPIO_Init+0x530>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800184e:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <HAL_GPIO_Init+0x530>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001872:	4a19      	ldr	r2, [pc, #100]	; (80018d8 <HAL_GPIO_Init+0x530>)
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001878:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <HAL_GPIO_Init+0x530>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800189c:	4a0e      	ldr	r2, [pc, #56]	; (80018d8 <HAL_GPIO_Init+0x530>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3301      	adds	r3, #1
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	2b0f      	cmp	r3, #15
 80018ac:	f67f adfe 	bls.w	80014ac <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	3720      	adds	r7, #32
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40013800 	.word	0x40013800
 80018c4:	40020000 	.word	0x40020000
 80018c8:	40020400 	.word	0x40020400
 80018cc:	40020800 	.word	0x40020800
 80018d0:	40020c00 	.word	0x40020c00
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40013c00 	.word	0x40013c00

080018dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80018e8:	887b      	ldrh	r3, [r7, #2]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d004      	beq.n	80018f8 <HAL_GPIO_ReadPin+0x1c>
 80018ee:	887b      	ldrh	r3, [r7, #2]
 80018f0:	0c1b      	lsrs	r3, r3, #16
 80018f2:	041b      	lsls	r3, r3, #16
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d004      	beq.n	8001902 <HAL_GPIO_ReadPin+0x26>
 80018f8:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80018fc:	4809      	ldr	r0, [pc, #36]	; (8001924 <HAL_GPIO_ReadPin+0x48>)
 80018fe:	f7ff fa26 	bl	8000d4e <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	691a      	ldr	r2, [r3, #16]
 8001906:	887b      	ldrh	r3, [r7, #2]
 8001908:	4013      	ands	r3, r2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d002      	beq.n	8001914 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800190e:	2301      	movs	r3, #1
 8001910:	73fb      	strb	r3, [r7, #15]
 8001912:	e001      	b.n	8001918 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001914:	2300      	movs	r3, #0
 8001916:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001918:	7bfb      	ldrb	r3, [r7, #15]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	0800a338 	.word	0x0800a338

08001928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	807b      	strh	r3, [r7, #2]
 8001934:	4613      	mov	r3, r2
 8001936:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001938:	887b      	ldrh	r3, [r7, #2]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d004      	beq.n	8001948 <HAL_GPIO_WritePin+0x20>
 800193e:	887b      	ldrh	r3, [r7, #2]
 8001940:	0c1b      	lsrs	r3, r3, #16
 8001942:	041b      	lsls	r3, r3, #16
 8001944:	2b00      	cmp	r3, #0
 8001946:	d004      	beq.n	8001952 <HAL_GPIO_WritePin+0x2a>
 8001948:	f240 119d 	movw	r1, #413	; 0x19d
 800194c:	480e      	ldr	r0, [pc, #56]	; (8001988 <HAL_GPIO_WritePin+0x60>)
 800194e:	f7ff f9fe 	bl	8000d4e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001952:	787b      	ldrb	r3, [r7, #1]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d007      	beq.n	8001968 <HAL_GPIO_WritePin+0x40>
 8001958:	787b      	ldrb	r3, [r7, #1]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d004      	beq.n	8001968 <HAL_GPIO_WritePin+0x40>
 800195e:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8001962:	4809      	ldr	r0, [pc, #36]	; (8001988 <HAL_GPIO_WritePin+0x60>)
 8001964:	f7ff f9f3 	bl	8000d4e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001968:	787b      	ldrb	r3, [r7, #1]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800196e:	887a      	ldrh	r2, [r7, #2]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001974:	e003      	b.n	800197e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001976:	887b      	ldrh	r3, [r7, #2]
 8001978:	041a      	lsls	r2, r3, #16
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	619a      	str	r2, [r3, #24]
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	0800a338 	.word	0x0800a338

0800198c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800198c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198e:	b08f      	sub	sp, #60	; 0x3c
 8001990:	af0a      	add	r7, sp, #40	; 0x28
 8001992:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e05d      	b.n	8001a5a <HAL_HCD_Init+0xce>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019a6:	d003      	beq.n	80019b0 <HAL_HCD_Init+0x24>
 80019a8:	2179      	movs	r1, #121	; 0x79
 80019aa:	482e      	ldr	r0, [pc, #184]	; (8001a64 <HAL_HCD_Init+0xd8>)
 80019ac:	f7ff f9cf 	bl	8000d4e <assert_failed>

  USBx = hhcd->Instance;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d106      	bne.n	80019d0 <HAL_HCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f006 fd3e 	bl	800844c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2203      	movs	r2, #3
 80019d4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d102      	bne.n	80019ea <HAL_HCD_Init+0x5e>
  {
    hhcd->Init.dma_enable = 0U;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f003 fd6c 	bl	80054cc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	603b      	str	r3, [r7, #0]
 80019fa:	687e      	ldr	r6, [r7, #4]
 80019fc:	466d      	mov	r5, sp
 80019fe:	f106 0410 	add.w	r4, r6, #16
 8001a02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a12:	1d33      	adds	r3, r6, #4
 8001a14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a16:	6838      	ldr	r0, [r7, #0]
 8001a18:	f003 fce6 	bl	80053e8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2101      	movs	r1, #1
 8001a22:	4618      	mov	r0, r3
 8001a24:	f003 fd63 	bl	80054ee <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	603b      	str	r3, [r7, #0]
 8001a2e:	687e      	ldr	r6, [r7, #4]
 8001a30:	466d      	mov	r5, sp
 8001a32:	f106 0410 	add.w	r4, r6, #16
 8001a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a42:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a46:	1d33      	adds	r3, r6, #4
 8001a48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a4a:	6838      	ldr	r0, [r7, #0]
 8001a4c:	f003 feec 	bl	8005828 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a62:	bf00      	nop
 8001a64:	0800a374 	.word	0x0800a374

08001a68 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b089      	sub	sp, #36	; 0x24
 8001a6c:	af04      	add	r7, sp, #16
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	4608      	mov	r0, r1
 8001a72:	4611      	mov	r1, r2
 8001a74:	461a      	mov	r2, r3
 8001a76:	4603      	mov	r3, r0
 8001a78:	70fb      	strb	r3, [r7, #3]
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	70bb      	strb	r3, [r7, #2]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d101      	bne.n	8001a90 <HAL_HCD_HC_Init+0x28>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	e076      	b.n	8001b7e <HAL_HCD_HC_Init+0x116>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001a98:	78fb      	ldrb	r3, [r7, #3]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	212c      	movs	r1, #44	; 0x2c
 8001a9e:	fb01 f303 	mul.w	r3, r1, r3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	333d      	adds	r3, #61	; 0x3d
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001aaa:	78fb      	ldrb	r3, [r7, #3]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	212c      	movs	r1, #44	; 0x2c
 8001ab0:	fb01 f303 	mul.w	r3, r1, r3
 8001ab4:	4413      	add	r3, r2
 8001ab6:	3338      	adds	r3, #56	; 0x38
 8001ab8:	787a      	ldrb	r2, [r7, #1]
 8001aba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001abc:	78fb      	ldrb	r3, [r7, #3]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	212c      	movs	r1, #44	; 0x2c
 8001ac2:	fb01 f303 	mul.w	r3, r1, r3
 8001ac6:	4413      	add	r3, r2
 8001ac8:	3340      	adds	r3, #64	; 0x40
 8001aca:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001acc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ace:	78fb      	ldrb	r3, [r7, #3]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	212c      	movs	r1, #44	; 0x2c
 8001ad4:	fb01 f303 	mul.w	r3, r1, r3
 8001ad8:	4413      	add	r3, r2
 8001ada:	3339      	adds	r3, #57	; 0x39
 8001adc:	78fa      	ldrb	r2, [r7, #3]
 8001ade:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001ae0:	78fb      	ldrb	r3, [r7, #3]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	212c      	movs	r1, #44	; 0x2c
 8001ae6:	fb01 f303 	mul.w	r3, r1, r3
 8001aea:	4413      	add	r3, r2
 8001aec:	333f      	adds	r3, #63	; 0x3f
 8001aee:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001af2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001af4:	78fb      	ldrb	r3, [r7, #3]
 8001af6:	78ba      	ldrb	r2, [r7, #2]
 8001af8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001afc:	b2d0      	uxtb	r0, r2
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	212c      	movs	r1, #44	; 0x2c
 8001b02:	fb01 f303 	mul.w	r3, r1, r3
 8001b06:	4413      	add	r3, r2
 8001b08:	333a      	adds	r3, #58	; 0x3a
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001b0e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	da09      	bge.n	8001b2a <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001b16:	78fb      	ldrb	r3, [r7, #3]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	212c      	movs	r1, #44	; 0x2c
 8001b1c:	fb01 f303 	mul.w	r3, r1, r3
 8001b20:	4413      	add	r3, r2
 8001b22:	333b      	adds	r3, #59	; 0x3b
 8001b24:	2201      	movs	r2, #1
 8001b26:	701a      	strb	r2, [r3, #0]
 8001b28:	e008      	b.n	8001b3c <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001b2a:	78fb      	ldrb	r3, [r7, #3]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	212c      	movs	r1, #44	; 0x2c
 8001b30:	fb01 f303 	mul.w	r3, r1, r3
 8001b34:	4413      	add	r3, r2
 8001b36:	333b      	adds	r3, #59	; 0x3b
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001b3c:	78fb      	ldrb	r3, [r7, #3]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	212c      	movs	r1, #44	; 0x2c
 8001b42:	fb01 f303 	mul.w	r3, r1, r3
 8001b46:	4413      	add	r3, r2
 8001b48:	333c      	adds	r3, #60	; 0x3c
 8001b4a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b4e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6818      	ldr	r0, [r3, #0]
 8001b54:	787c      	ldrb	r4, [r7, #1]
 8001b56:	78ba      	ldrb	r2, [r7, #2]
 8001b58:	78f9      	ldrb	r1, [r7, #3]
 8001b5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b5c:	9302      	str	r3, [sp, #8]
 8001b5e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b62:	9301      	str	r3, [sp, #4]
 8001b64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	4623      	mov	r3, r4
 8001b6c:	f003 ffe2 	bl	8005b34 <USB_HC_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd90      	pop	{r4, r7, pc}

08001b86 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b084      	sub	sp, #16
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <HAL_HCD_HC_Halt+0x1e>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e00f      	b.n	8001bc4 <HAL_HCD_HC_Halt+0x3e>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	78fa      	ldrb	r2, [r7, #3]
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f004 fa32 	bl	800601e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	4608      	mov	r0, r1
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4603      	mov	r3, r0
 8001bdc:	70fb      	strb	r3, [r7, #3]
 8001bde:	460b      	mov	r3, r1
 8001be0:	70bb      	strb	r3, [r7, #2]
 8001be2:	4613      	mov	r3, r2
 8001be4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	212c      	movs	r1, #44	; 0x2c
 8001bec:	fb01 f303 	mul.w	r3, r1, r3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	333b      	adds	r3, #59	; 0x3b
 8001bf4:	78ba      	ldrb	r2, [r7, #2]
 8001bf6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	212c      	movs	r1, #44	; 0x2c
 8001bfe:	fb01 f303 	mul.w	r3, r1, r3
 8001c02:	4413      	add	r3, r2
 8001c04:	333f      	adds	r3, #63	; 0x3f
 8001c06:	787a      	ldrb	r2, [r7, #1]
 8001c08:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001c0a:	7c3b      	ldrb	r3, [r7, #16]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d112      	bne.n	8001c36 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	212c      	movs	r1, #44	; 0x2c
 8001c16:	fb01 f303 	mul.w	r3, r1, r3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3342      	adds	r3, #66	; 0x42
 8001c1e:	2203      	movs	r2, #3
 8001c20:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001c22:	78fb      	ldrb	r3, [r7, #3]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	212c      	movs	r1, #44	; 0x2c
 8001c28:	fb01 f303 	mul.w	r3, r1, r3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	333d      	adds	r3, #61	; 0x3d
 8001c30:	7f3a      	ldrb	r2, [r7, #28]
 8001c32:	701a      	strb	r2, [r3, #0]
 8001c34:	e008      	b.n	8001c48 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	212c      	movs	r1, #44	; 0x2c
 8001c3c:	fb01 f303 	mul.w	r3, r1, r3
 8001c40:	4413      	add	r3, r2
 8001c42:	3342      	adds	r3, #66	; 0x42
 8001c44:	2202      	movs	r2, #2
 8001c46:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001c48:	787b      	ldrb	r3, [r7, #1]
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	f200 80c6 	bhi.w	8001ddc <HAL_HCD_HC_SubmitRequest+0x210>
 8001c50:	a201      	add	r2, pc, #4	; (adr r2, 8001c58 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c56:	bf00      	nop
 8001c58:	08001c69 	.word	0x08001c69
 8001c5c:	08001dc9 	.word	0x08001dc9
 8001c60:	08001ccd 	.word	0x08001ccd
 8001c64:	08001d4b 	.word	0x08001d4b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001c68:	7c3b      	ldrb	r3, [r7, #16]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	f040 80b8 	bne.w	8001de0 <HAL_HCD_HC_SubmitRequest+0x214>
 8001c70:	78bb      	ldrb	r3, [r7, #2]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f040 80b4 	bne.w	8001de0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001c78:	8b3b      	ldrh	r3, [r7, #24]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d108      	bne.n	8001c90 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001c7e:	78fb      	ldrb	r3, [r7, #3]
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	212c      	movs	r1, #44	; 0x2c
 8001c84:	fb01 f303 	mul.w	r3, r1, r3
 8001c88:	4413      	add	r3, r2
 8001c8a:	3355      	adds	r3, #85	; 0x55
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	212c      	movs	r1, #44	; 0x2c
 8001c96:	fb01 f303 	mul.w	r3, r1, r3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3355      	adds	r3, #85	; 0x55
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d109      	bne.n	8001cb8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ca4:	78fb      	ldrb	r3, [r7, #3]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	212c      	movs	r1, #44	; 0x2c
 8001caa:	fb01 f303 	mul.w	r3, r1, r3
 8001cae:	4413      	add	r3, r2
 8001cb0:	3342      	adds	r3, #66	; 0x42
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001cb6:	e093      	b.n	8001de0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	212c      	movs	r1, #44	; 0x2c
 8001cbe:	fb01 f303 	mul.w	r3, r1, r3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3342      	adds	r3, #66	; 0x42
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	701a      	strb	r2, [r3, #0]
      break;
 8001cca:	e089      	b.n	8001de0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001ccc:	78bb      	ldrb	r3, [r7, #2]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d11d      	bne.n	8001d0e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	212c      	movs	r1, #44	; 0x2c
 8001cd8:	fb01 f303 	mul.w	r3, r1, r3
 8001cdc:	4413      	add	r3, r2
 8001cde:	3355      	adds	r3, #85	; 0x55
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d109      	bne.n	8001cfa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ce6:	78fb      	ldrb	r3, [r7, #3]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	212c      	movs	r1, #44	; 0x2c
 8001cec:	fb01 f303 	mul.w	r3, r1, r3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3342      	adds	r3, #66	; 0x42
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001cf8:	e073      	b.n	8001de2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cfa:	78fb      	ldrb	r3, [r7, #3]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	212c      	movs	r1, #44	; 0x2c
 8001d00:	fb01 f303 	mul.w	r3, r1, r3
 8001d04:	4413      	add	r3, r2
 8001d06:	3342      	adds	r3, #66	; 0x42
 8001d08:	2202      	movs	r2, #2
 8001d0a:	701a      	strb	r2, [r3, #0]
      break;
 8001d0c:	e069      	b.n	8001de2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d0e:	78fb      	ldrb	r3, [r7, #3]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	212c      	movs	r1, #44	; 0x2c
 8001d14:	fb01 f303 	mul.w	r3, r1, r3
 8001d18:	4413      	add	r3, r2
 8001d1a:	3354      	adds	r3, #84	; 0x54
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d109      	bne.n	8001d36 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d22:	78fb      	ldrb	r3, [r7, #3]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	212c      	movs	r1, #44	; 0x2c
 8001d28:	fb01 f303 	mul.w	r3, r1, r3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	3342      	adds	r3, #66	; 0x42
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
      break;
 8001d34:	e055      	b.n	8001de2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	212c      	movs	r1, #44	; 0x2c
 8001d3c:	fb01 f303 	mul.w	r3, r1, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	3342      	adds	r3, #66	; 0x42
 8001d44:	2202      	movs	r2, #2
 8001d46:	701a      	strb	r2, [r3, #0]
      break;
 8001d48:	e04b      	b.n	8001de2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001d4a:	78bb      	ldrb	r3, [r7, #2]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d11d      	bne.n	8001d8c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	212c      	movs	r1, #44	; 0x2c
 8001d56:	fb01 f303 	mul.w	r3, r1, r3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3355      	adds	r3, #85	; 0x55
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d109      	bne.n	8001d78 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	212c      	movs	r1, #44	; 0x2c
 8001d6a:	fb01 f303 	mul.w	r3, r1, r3
 8001d6e:	4413      	add	r3, r2
 8001d70:	3342      	adds	r3, #66	; 0x42
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d76:	e034      	b.n	8001de2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	212c      	movs	r1, #44	; 0x2c
 8001d7e:	fb01 f303 	mul.w	r3, r1, r3
 8001d82:	4413      	add	r3, r2
 8001d84:	3342      	adds	r3, #66	; 0x42
 8001d86:	2202      	movs	r2, #2
 8001d88:	701a      	strb	r2, [r3, #0]
      break;
 8001d8a:	e02a      	b.n	8001de2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	212c      	movs	r1, #44	; 0x2c
 8001d92:	fb01 f303 	mul.w	r3, r1, r3
 8001d96:	4413      	add	r3, r2
 8001d98:	3354      	adds	r3, #84	; 0x54
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d109      	bne.n	8001db4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	212c      	movs	r1, #44	; 0x2c
 8001da6:	fb01 f303 	mul.w	r3, r1, r3
 8001daa:	4413      	add	r3, r2
 8001dac:	3342      	adds	r3, #66	; 0x42
 8001dae:	2200      	movs	r2, #0
 8001db0:	701a      	strb	r2, [r3, #0]
      break;
 8001db2:	e016      	b.n	8001de2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	212c      	movs	r1, #44	; 0x2c
 8001dba:	fb01 f303 	mul.w	r3, r1, r3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3342      	adds	r3, #66	; 0x42
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	701a      	strb	r2, [r3, #0]
      break;
 8001dc6:	e00c      	b.n	8001de2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	212c      	movs	r1, #44	; 0x2c
 8001dce:	fb01 f303 	mul.w	r3, r1, r3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3342      	adds	r3, #66	; 0x42
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	701a      	strb	r2, [r3, #0]
      break;
 8001dda:	e002      	b.n	8001de2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001ddc:	bf00      	nop
 8001dde:	e000      	b.n	8001de2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001de0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001de2:	78fb      	ldrb	r3, [r7, #3]
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	212c      	movs	r1, #44	; 0x2c
 8001de8:	fb01 f303 	mul.w	r3, r1, r3
 8001dec:	4413      	add	r3, r2
 8001dee:	3344      	adds	r3, #68	; 0x44
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001df4:	78fb      	ldrb	r3, [r7, #3]
 8001df6:	8b3a      	ldrh	r2, [r7, #24]
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	202c      	movs	r0, #44	; 0x2c
 8001dfc:	fb00 f303 	mul.w	r3, r0, r3
 8001e00:	440b      	add	r3, r1
 8001e02:	334c      	adds	r3, #76	; 0x4c
 8001e04:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001e06:	78fb      	ldrb	r3, [r7, #3]
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	212c      	movs	r1, #44	; 0x2c
 8001e0c:	fb01 f303 	mul.w	r3, r1, r3
 8001e10:	4413      	add	r3, r2
 8001e12:	3360      	adds	r3, #96	; 0x60
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	212c      	movs	r1, #44	; 0x2c
 8001e1e:	fb01 f303 	mul.w	r3, r1, r3
 8001e22:	4413      	add	r3, r2
 8001e24:	3350      	adds	r3, #80	; 0x50
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	212c      	movs	r1, #44	; 0x2c
 8001e30:	fb01 f303 	mul.w	r3, r1, r3
 8001e34:	4413      	add	r3, r2
 8001e36:	3339      	adds	r3, #57	; 0x39
 8001e38:	78fa      	ldrb	r2, [r7, #3]
 8001e3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	212c      	movs	r1, #44	; 0x2c
 8001e42:	fb01 f303 	mul.w	r3, r1, r3
 8001e46:	4413      	add	r3, r2
 8001e48:	3361      	adds	r3, #97	; 0x61
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6818      	ldr	r0, [r3, #0]
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	222c      	movs	r2, #44	; 0x2c
 8001e56:	fb02 f303 	mul.w	r3, r2, r3
 8001e5a:	3338      	adds	r3, #56	; 0x38
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	18d1      	adds	r1, r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	461a      	mov	r2, r3
 8001e68:	f003 ff86 	bl	8005d78 <USB_HC_StartXfer>
 8001e6c:	4603      	mov	r3, r0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop

08001e78 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f003 fc87 	bl	80057a2 <USB_GetMode>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	f040 80f6 	bne.w	8002088 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f003 fc6b 	bl	800577c <USB_ReadInterrupts>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 80ec 	beq.w	8002086 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f003 fc62 	bl	800577c <USB_ReadInterrupts>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ebe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ec2:	d104      	bne.n	8001ece <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ecc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f003 fc52 	bl	800577c <USB_ReadInterrupts>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ee2:	d104      	bne.n	8001eee <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001eec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f003 fc42 	bl	800577c <USB_ReadInterrupts>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001efe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f02:	d104      	bne.n	8001f0e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f003 fc32 	bl	800577c <USB_ReadInterrupts>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d103      	bne.n	8001f2a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2202      	movs	r2, #2
 8001f28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f003 fc24 	bl	800577c <USB_ReadInterrupts>
 8001f34:	4603      	mov	r3, r0
 8001f36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f3e:	d11c      	bne.n	8001f7a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001f48:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10f      	bne.n	8001f7a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001f5a:	2110      	movs	r1, #16
 8001f5c:	6938      	ldr	r0, [r7, #16]
 8001f5e:	f003 fb13 	bl	8005588 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001f62:	6938      	ldr	r0, [r7, #16]
 8001f64:	f003 fb44 	bl	80055f0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f003 fd1a 	bl	80059a8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f006 fae7 	bl	8008548 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f003 fbfc 	bl	800577c <USB_ReadInterrupts>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f8e:	d102      	bne.n	8001f96 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f001 f89e 	bl	80030d2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f003 fbee 	bl	800577c <USB_ReadInterrupts>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d106      	bne.n	8001fb8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f006 fab0 	bl	8008510 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2208      	movs	r2, #8
 8001fb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f003 fbdd 	bl	800577c <USB_ReadInterrupts>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	f003 0310 	and.w	r3, r3, #16
 8001fc8:	2b10      	cmp	r3, #16
 8001fca:	d101      	bne.n	8001fd0 <HAL_HCD_IRQHandler+0x158>
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e000      	b.n	8001fd2 <HAL_HCD_IRQHandler+0x15a>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d012      	beq.n	8001ffc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	699a      	ldr	r2, [r3, #24]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0210 	bic.w	r2, r2, #16
 8001fe4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 ffa1 	bl	8002f2e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	699a      	ldr	r2, [r3, #24]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0210 	orr.w	r2, r2, #16
 8001ffa:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f003 fbbb 	bl	800577c <USB_ReadInterrupts>
 8002006:	4603      	mov	r3, r0
 8002008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002010:	d13a      	bne.n	8002088 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f003 fff0 	bl	8005ffc <USB_HC_ReadInterrupt>
 800201c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	e025      	b.n	8002070 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	fa22 f303 	lsr.w	r3, r2, r3
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d018      	beq.n	800206a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	015a      	lsls	r2, r3, #5
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4413      	add	r3, r2
 8002040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800204a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800204e:	d106      	bne.n	800205e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	4619      	mov	r1, r3
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f8ab 	bl	80021b2 <HCD_HC_IN_IRQHandler>
 800205c:	e005      	b.n	800206a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	4619      	mov	r1, r3
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 fbf9 	bl	800285c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	3301      	adds	r3, #1
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	429a      	cmp	r2, r3
 8002078:	d3d4      	bcc.n	8002024 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002082:	615a      	str	r2, [r3, #20]
 8002084:	e000      	b.n	8002088 <HAL_HCD_IRQHandler+0x210>
      return;
 8002086:	bf00      	nop
    }
  }
}
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800209c:	2b01      	cmp	r3, #1
 800209e:	d101      	bne.n	80020a4 <HAL_HCD_Start+0x16>
 80020a0:	2302      	movs	r3, #2
 80020a2:	e013      	b.n	80020cc <HAL_HCD_Start+0x3e>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2101      	movs	r1, #1
 80020b2:	4618      	mov	r0, r3
 80020b4:	f003 fcdc 	bl	8005a70 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f003 f9f4 	bl	80054aa <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_HCD_Stop+0x16>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e00d      	b.n	8002106 <HAL_HCD_Stop+0x32>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f004 f8ca 	bl	8006290 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f003 fc7e 	bl	8005a1c <USB_ResetPort>
 8002120:	4603      	mov	r3, r0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	460b      	mov	r3, r1
 8002134:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002136:	78fb      	ldrb	r3, [r7, #3]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	212c      	movs	r1, #44	; 0x2c
 800213c:	fb01 f303 	mul.w	r3, r1, r3
 8002140:	4413      	add	r3, r2
 8002142:	3360      	adds	r3, #96	; 0x60
 8002144:	781b      	ldrb	r3, [r3, #0]
}
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	460b      	mov	r3, r1
 800215c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	212c      	movs	r1, #44	; 0x2c
 8002164:	fb01 f303 	mul.w	r3, r1, r3
 8002168:	4413      	add	r3, r2
 800216a:	3350      	adds	r3, #80	; 0x50
 800216c:	681b      	ldr	r3, [r3, #0]
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f003 fcc2 	bl	8005b10 <USB_GetCurrentFrame>
 800218c:	4603      	mov	r3, r0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f003 fc9d 	bl	8005ae2 <USB_GetHostSpeed>
 80021a8:	4603      	mov	r3, r0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b086      	sub	sp, #24
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	460b      	mov	r3, r1
 80021bc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	015a      	lsls	r2, r3, #5
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d11a      	bne.n	8002218 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	015a      	lsls	r2, r3, #5
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4413      	add	r3, r2
 80021ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ee:	461a      	mov	r2, r3
 80021f0:	2304      	movs	r3, #4
 80021f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	212c      	movs	r1, #44	; 0x2c
 80021fa:	fb01 f303 	mul.w	r3, r1, r3
 80021fe:	4413      	add	r3, r2
 8002200:	3361      	adds	r3, #97	; 0x61
 8002202:	2206      	movs	r2, #6
 8002204:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	4611      	mov	r1, r2
 8002210:	4618      	mov	r0, r3
 8002212:	f003 ff04 	bl	800601e <USB_HC_Halt>
 8002216:	e0af      	b.n	8002378 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	015a      	lsls	r2, r3, #5
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4413      	add	r3, r2
 8002220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800222e:	d11b      	bne.n	8002268 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	015a      	lsls	r2, r3, #5
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	4413      	add	r3, r2
 8002238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223c:	461a      	mov	r2, r3
 800223e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002242:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	212c      	movs	r1, #44	; 0x2c
 800224a:	fb01 f303 	mul.w	r3, r1, r3
 800224e:	4413      	add	r3, r2
 8002250:	3361      	adds	r3, #97	; 0x61
 8002252:	2207      	movs	r2, #7
 8002254:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	4611      	mov	r1, r2
 8002260:	4618      	mov	r0, r3
 8002262:	f003 fedc 	bl	800601e <USB_HC_Halt>
 8002266:	e087      	b.n	8002378 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4413      	add	r3, r2
 8002270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 0320 	and.w	r3, r3, #32
 800227a:	2b20      	cmp	r3, #32
 800227c:	d109      	bne.n	8002292 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	015a      	lsls	r2, r3, #5
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4413      	add	r3, r2
 8002286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228a:	461a      	mov	r2, r3
 800228c:	2320      	movs	r3, #32
 800228e:	6093      	str	r3, [r2, #8]
 8002290:	e072      	b.n	8002378 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	015a      	lsls	r2, r3, #5
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4413      	add	r3, r2
 800229a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d11a      	bne.n	80022de <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	015a      	lsls	r2, r3, #5
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b4:	461a      	mov	r2, r3
 80022b6:	2308      	movs	r3, #8
 80022b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	212c      	movs	r1, #44	; 0x2c
 80022c0:	fb01 f303 	mul.w	r3, r1, r3
 80022c4:	4413      	add	r3, r2
 80022c6:	3361      	adds	r3, #97	; 0x61
 80022c8:	2205      	movs	r2, #5
 80022ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	4611      	mov	r1, r2
 80022d6:	4618      	mov	r0, r3
 80022d8:	f003 fea1 	bl	800601e <USB_HC_Halt>
 80022dc:	e04c      	b.n	8002378 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	015a      	lsls	r2, r3, #5
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4413      	add	r3, r2
 80022e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f4:	d11b      	bne.n	800232e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002302:	461a      	mov	r2, r3
 8002304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002308:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	212c      	movs	r1, #44	; 0x2c
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	4413      	add	r3, r2
 8002316:	3361      	adds	r3, #97	; 0x61
 8002318:	2208      	movs	r2, #8
 800231a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	4611      	mov	r1, r2
 8002326:	4618      	mov	r0, r3
 8002328:	f003 fe79 	bl	800601e <USB_HC_Halt>
 800232c:	e024      	b.n	8002378 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4413      	add	r3, r2
 8002336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002340:	2b80      	cmp	r3, #128	; 0x80
 8002342:	d119      	bne.n	8002378 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	015a      	lsls	r2, r3, #5
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4413      	add	r3, r2
 800234c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002350:	461a      	mov	r2, r3
 8002352:	2380      	movs	r3, #128	; 0x80
 8002354:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	212c      	movs	r1, #44	; 0x2c
 800235c:	fb01 f303 	mul.w	r3, r1, r3
 8002360:	4413      	add	r3, r2
 8002362:	3361      	adds	r3, #97	; 0x61
 8002364:	2206      	movs	r2, #6
 8002366:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	4611      	mov	r1, r2
 8002372:	4618      	mov	r0, r3
 8002374:	f003 fe53 	bl	800601e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	015a      	lsls	r2, r3, #5
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4413      	add	r3, r2
 8002380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800238a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800238e:	d112      	bne.n	80023b6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	4611      	mov	r1, r2
 800239a:	4618      	mov	r0, r3
 800239c:	f003 fe3f 	bl	800601e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	015a      	lsls	r2, r3, #5
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4413      	add	r3, r2
 80023a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ac:	461a      	mov	r2, r3
 80023ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023b2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80023b4:	e24e      	b.n	8002854 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	015a      	lsls	r2, r3, #5
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4413      	add	r3, r2
 80023be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	f040 80df 	bne.w	800258c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d019      	beq.n	800240a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	212c      	movs	r1, #44	; 0x2c
 80023dc:	fb01 f303 	mul.w	r3, r1, r3
 80023e0:	4413      	add	r3, r2
 80023e2:	3348      	adds	r3, #72	; 0x48
 80023e4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	0159      	lsls	r1, r3, #5
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	440b      	add	r3, r1
 80023ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80023f8:	1ad2      	subs	r2, r2, r3
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	202c      	movs	r0, #44	; 0x2c
 8002400:	fb00 f303 	mul.w	r3, r0, r3
 8002404:	440b      	add	r3, r1
 8002406:	3350      	adds	r3, #80	; 0x50
 8002408:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	212c      	movs	r1, #44	; 0x2c
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	4413      	add	r3, r2
 8002416:	3361      	adds	r3, #97	; 0x61
 8002418:	2201      	movs	r2, #1
 800241a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	212c      	movs	r1, #44	; 0x2c
 8002422:	fb01 f303 	mul.w	r3, r1, r3
 8002426:	4413      	add	r3, r2
 8002428:	335c      	adds	r3, #92	; 0x5c
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	015a      	lsls	r2, r3, #5
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4413      	add	r3, r2
 8002436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243a:	461a      	mov	r2, r3
 800243c:	2301      	movs	r3, #1
 800243e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	212c      	movs	r1, #44	; 0x2c
 8002446:	fb01 f303 	mul.w	r3, r1, r3
 800244a:	4413      	add	r3, r2
 800244c:	333f      	adds	r3, #63	; 0x3f
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d009      	beq.n	8002468 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	212c      	movs	r1, #44	; 0x2c
 800245a:	fb01 f303 	mul.w	r3, r1, r3
 800245e:	4413      	add	r3, r2
 8002460:	333f      	adds	r3, #63	; 0x3f
 8002462:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002464:	2b02      	cmp	r3, #2
 8002466:	d111      	bne.n	800248c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	4611      	mov	r1, r2
 8002472:	4618      	mov	r0, r3
 8002474:	f003 fdd3 	bl	800601e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4413      	add	r3, r2
 8002480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002484:	461a      	mov	r2, r3
 8002486:	2310      	movs	r3, #16
 8002488:	6093      	str	r3, [r2, #8]
 800248a:	e03a      	b.n	8002502 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	212c      	movs	r1, #44	; 0x2c
 8002492:	fb01 f303 	mul.w	r3, r1, r3
 8002496:	4413      	add	r3, r2
 8002498:	333f      	adds	r3, #63	; 0x3f
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b03      	cmp	r3, #3
 800249e:	d009      	beq.n	80024b4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	212c      	movs	r1, #44	; 0x2c
 80024a6:	fb01 f303 	mul.w	r3, r1, r3
 80024aa:	4413      	add	r3, r2
 80024ac:	333f      	adds	r3, #63	; 0x3f
 80024ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d126      	bne.n	8002502 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	015a      	lsls	r2, r3, #5
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4413      	add	r3, r2
 80024bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	0151      	lsls	r1, r2, #5
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	440a      	add	r2, r1
 80024ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80024d2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	212c      	movs	r1, #44	; 0x2c
 80024da:	fb01 f303 	mul.w	r3, r1, r3
 80024de:	4413      	add	r3, r2
 80024e0:	3360      	adds	r3, #96	; 0x60
 80024e2:	2201      	movs	r2, #1
 80024e4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	b2d9      	uxtb	r1, r3
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	202c      	movs	r0, #44	; 0x2c
 80024f0:	fb00 f303 	mul.w	r3, r0, r3
 80024f4:	4413      	add	r3, r2
 80024f6:	3360      	adds	r3, #96	; 0x60
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f006 f831 	bl	8008564 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d12b      	bne.n	8002562 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	212c      	movs	r1, #44	; 0x2c
 8002510:	fb01 f303 	mul.w	r3, r1, r3
 8002514:	4413      	add	r3, r2
 8002516:	3348      	adds	r3, #72	; 0x48
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	202c      	movs	r0, #44	; 0x2c
 8002520:	fb00 f202 	mul.w	r2, r0, r2
 8002524:	440a      	add	r2, r1
 8002526:	3240      	adds	r2, #64	; 0x40
 8002528:	8812      	ldrh	r2, [r2, #0]
 800252a:	fbb3 f3f2 	udiv	r3, r3, r2
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 818e 	beq.w	8002854 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	212c      	movs	r1, #44	; 0x2c
 800253e:	fb01 f303 	mul.w	r3, r1, r3
 8002542:	4413      	add	r3, r2
 8002544:	3354      	adds	r3, #84	; 0x54
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	f083 0301 	eor.w	r3, r3, #1
 800254c:	b2d8      	uxtb	r0, r3
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	212c      	movs	r1, #44	; 0x2c
 8002554:	fb01 f303 	mul.w	r3, r1, r3
 8002558:	4413      	add	r3, r2
 800255a:	3354      	adds	r3, #84	; 0x54
 800255c:	4602      	mov	r2, r0
 800255e:	701a      	strb	r2, [r3, #0]
}
 8002560:	e178      	b.n	8002854 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	212c      	movs	r1, #44	; 0x2c
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	4413      	add	r3, r2
 800256e:	3354      	adds	r3, #84	; 0x54
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	f083 0301 	eor.w	r3, r3, #1
 8002576:	b2d8      	uxtb	r0, r3
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	212c      	movs	r1, #44	; 0x2c
 800257e:	fb01 f303 	mul.w	r3, r1, r3
 8002582:	4413      	add	r3, r2
 8002584:	3354      	adds	r3, #84	; 0x54
 8002586:	4602      	mov	r2, r0
 8002588:	701a      	strb	r2, [r3, #0]
}
 800258a:	e163      	b.n	8002854 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4413      	add	r3, r2
 8002594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b02      	cmp	r3, #2
 80025a0:	f040 80f6 	bne.w	8002790 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	212c      	movs	r1, #44	; 0x2c
 80025aa:	fb01 f303 	mul.w	r3, r1, r3
 80025ae:	4413      	add	r3, r2
 80025b0:	3361      	adds	r3, #97	; 0x61
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d109      	bne.n	80025cc <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	212c      	movs	r1, #44	; 0x2c
 80025be:	fb01 f303 	mul.w	r3, r1, r3
 80025c2:	4413      	add	r3, r2
 80025c4:	3360      	adds	r3, #96	; 0x60
 80025c6:	2201      	movs	r2, #1
 80025c8:	701a      	strb	r2, [r3, #0]
 80025ca:	e0c9      	b.n	8002760 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	212c      	movs	r1, #44	; 0x2c
 80025d2:	fb01 f303 	mul.w	r3, r1, r3
 80025d6:	4413      	add	r3, r2
 80025d8:	3361      	adds	r3, #97	; 0x61
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b05      	cmp	r3, #5
 80025de:	d109      	bne.n	80025f4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	212c      	movs	r1, #44	; 0x2c
 80025e6:	fb01 f303 	mul.w	r3, r1, r3
 80025ea:	4413      	add	r3, r2
 80025ec:	3360      	adds	r3, #96	; 0x60
 80025ee:	2205      	movs	r2, #5
 80025f0:	701a      	strb	r2, [r3, #0]
 80025f2:	e0b5      	b.n	8002760 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	212c      	movs	r1, #44	; 0x2c
 80025fa:	fb01 f303 	mul.w	r3, r1, r3
 80025fe:	4413      	add	r3, r2
 8002600:	3361      	adds	r3, #97	; 0x61
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b06      	cmp	r3, #6
 8002606:	d009      	beq.n	800261c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	212c      	movs	r1, #44	; 0x2c
 800260e:	fb01 f303 	mul.w	r3, r1, r3
 8002612:	4413      	add	r3, r2
 8002614:	3361      	adds	r3, #97	; 0x61
 8002616:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002618:	2b08      	cmp	r3, #8
 800261a:	d150      	bne.n	80026be <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	212c      	movs	r1, #44	; 0x2c
 8002622:	fb01 f303 	mul.w	r3, r1, r3
 8002626:	4413      	add	r3, r2
 8002628:	335c      	adds	r3, #92	; 0x5c
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	1c5a      	adds	r2, r3, #1
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	202c      	movs	r0, #44	; 0x2c
 8002634:	fb00 f303 	mul.w	r3, r0, r3
 8002638:	440b      	add	r3, r1
 800263a:	335c      	adds	r3, #92	; 0x5c
 800263c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	212c      	movs	r1, #44	; 0x2c
 8002644:	fb01 f303 	mul.w	r3, r1, r3
 8002648:	4413      	add	r3, r2
 800264a:	335c      	adds	r3, #92	; 0x5c
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d912      	bls.n	8002678 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	212c      	movs	r1, #44	; 0x2c
 8002658:	fb01 f303 	mul.w	r3, r1, r3
 800265c:	4413      	add	r3, r2
 800265e:	335c      	adds	r3, #92	; 0x5c
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	212c      	movs	r1, #44	; 0x2c
 800266a:	fb01 f303 	mul.w	r3, r1, r3
 800266e:	4413      	add	r3, r2
 8002670:	3360      	adds	r3, #96	; 0x60
 8002672:	2204      	movs	r2, #4
 8002674:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002676:	e073      	b.n	8002760 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	212c      	movs	r1, #44	; 0x2c
 800267e:	fb01 f303 	mul.w	r3, r1, r3
 8002682:	4413      	add	r3, r2
 8002684:	3360      	adds	r3, #96	; 0x60
 8002686:	2202      	movs	r2, #2
 8002688:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4413      	add	r3, r2
 8002692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026a0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026a8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	015a      	lsls	r2, r3, #5
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4413      	add	r3, r2
 80026b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b6:	461a      	mov	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026bc:	e050      	b.n	8002760 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	212c      	movs	r1, #44	; 0x2c
 80026c4:	fb01 f303 	mul.w	r3, r1, r3
 80026c8:	4413      	add	r3, r2
 80026ca:	3361      	adds	r3, #97	; 0x61
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	d122      	bne.n	8002718 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	212c      	movs	r1, #44	; 0x2c
 80026d8:	fb01 f303 	mul.w	r3, r1, r3
 80026dc:	4413      	add	r3, r2
 80026de:	3360      	adds	r3, #96	; 0x60
 80026e0:	2202      	movs	r2, #2
 80026e2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026fa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002702:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4413      	add	r3, r2
 800270c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002710:	461a      	mov	r2, r3
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	e023      	b.n	8002760 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	212c      	movs	r1, #44	; 0x2c
 800271e:	fb01 f303 	mul.w	r3, r1, r3
 8002722:	4413      	add	r3, r2
 8002724:	3361      	adds	r3, #97	; 0x61
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b07      	cmp	r3, #7
 800272a:	d119      	bne.n	8002760 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	212c      	movs	r1, #44	; 0x2c
 8002732:	fb01 f303 	mul.w	r3, r1, r3
 8002736:	4413      	add	r3, r2
 8002738:	335c      	adds	r3, #92	; 0x5c
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	202c      	movs	r0, #44	; 0x2c
 8002744:	fb00 f303 	mul.w	r3, r0, r3
 8002748:	440b      	add	r3, r1
 800274a:	335c      	adds	r3, #92	; 0x5c
 800274c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	212c      	movs	r1, #44	; 0x2c
 8002754:	fb01 f303 	mul.w	r3, r1, r3
 8002758:	4413      	add	r3, r2
 800275a:	3360      	adds	r3, #96	; 0x60
 800275c:	2204      	movs	r2, #4
 800275e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4413      	add	r3, r2
 8002768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276c:	461a      	mov	r2, r3
 800276e:	2302      	movs	r3, #2
 8002770:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	b2d9      	uxtb	r1, r3
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	202c      	movs	r0, #44	; 0x2c
 800277c:	fb00 f303 	mul.w	r3, r0, r3
 8002780:	4413      	add	r3, r2
 8002782:	3360      	adds	r3, #96	; 0x60
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f005 feeb 	bl	8008564 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800278e:	e061      	b.n	8002854 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4413      	add	r3, r2
 8002798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 0310 	and.w	r3, r3, #16
 80027a2:	2b10      	cmp	r3, #16
 80027a4:	d156      	bne.n	8002854 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	212c      	movs	r1, #44	; 0x2c
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	333f      	adds	r3, #63	; 0x3f
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	d111      	bne.n	80027de <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	212c      	movs	r1, #44	; 0x2c
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	335c      	adds	r3, #92	; 0x5c
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f003 fc21 	bl	800601e <USB_HC_Halt>
 80027dc:	e031      	b.n	8002842 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	212c      	movs	r1, #44	; 0x2c
 80027e4:	fb01 f303 	mul.w	r3, r1, r3
 80027e8:	4413      	add	r3, r2
 80027ea:	333f      	adds	r3, #63	; 0x3f
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d009      	beq.n	8002806 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	333f      	adds	r3, #63	; 0x3f
 8002800:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002802:	2b02      	cmp	r3, #2
 8002804:	d11d      	bne.n	8002842 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	212c      	movs	r1, #44	; 0x2c
 800280c:	fb01 f303 	mul.w	r3, r1, r3
 8002810:	4413      	add	r3, r2
 8002812:	335c      	adds	r3, #92	; 0x5c
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d110      	bne.n	8002842 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	212c      	movs	r1, #44	; 0x2c
 8002826:	fb01 f303 	mul.w	r3, r1, r3
 800282a:	4413      	add	r3, r2
 800282c:	3361      	adds	r3, #97	; 0x61
 800282e:	2203      	movs	r2, #3
 8002830:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f003 fbee 	bl	800601e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	015a      	lsls	r2, r3, #5
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4413      	add	r3, r2
 800284a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284e:	461a      	mov	r2, r3
 8002850:	2310      	movs	r3, #16
 8002852:	6093      	str	r3, [r2, #8]
}
 8002854:	bf00      	nop
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b088      	sub	sp, #32
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002872:	78fb      	ldrb	r3, [r7, #3]
 8002874:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	4413      	add	r3, r2
 800287e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b04      	cmp	r3, #4
 800288a:	d11a      	bne.n	80028c2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	4413      	add	r3, r2
 8002894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002898:	461a      	mov	r2, r3
 800289a:	2304      	movs	r3, #4
 800289c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	212c      	movs	r1, #44	; 0x2c
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	4413      	add	r3, r2
 80028aa:	3361      	adds	r3, #97	; 0x61
 80028ac:	2206      	movs	r2, #6
 80028ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	4611      	mov	r1, r2
 80028ba:	4618      	mov	r0, r3
 80028bc:	f003 fbaf 	bl	800601e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80028c0:	e331      	b.n	8002f26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 0320 	and.w	r3, r3, #32
 80028d4:	2b20      	cmp	r3, #32
 80028d6:	d12e      	bne.n	8002936 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e4:	461a      	mov	r2, r3
 80028e6:	2320      	movs	r3, #32
 80028e8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	212c      	movs	r1, #44	; 0x2c
 80028f0:	fb01 f303 	mul.w	r3, r1, r3
 80028f4:	4413      	add	r3, r2
 80028f6:	333d      	adds	r3, #61	; 0x3d
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	f040 8313 	bne.w	8002f26 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	212c      	movs	r1, #44	; 0x2c
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	4413      	add	r3, r2
 800290c:	333d      	adds	r3, #61	; 0x3d
 800290e:	2200      	movs	r2, #0
 8002910:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	212c      	movs	r1, #44	; 0x2c
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	4413      	add	r3, r2
 800291e:	3360      	adds	r3, #96	; 0x60
 8002920:	2202      	movs	r2, #2
 8002922:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	4611      	mov	r1, r2
 800292e:	4618      	mov	r0, r3
 8002930:	f003 fb75 	bl	800601e <USB_HC_Halt>
}
 8002934:	e2f7      	b.n	8002f26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	015a      	lsls	r2, r3, #5
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	4413      	add	r3, r2
 800293e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800294c:	d112      	bne.n	8002974 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	015a      	lsls	r2, r3, #5
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	4413      	add	r3, r2
 8002956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295a:	461a      	mov	r2, r3
 800295c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002960:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	4611      	mov	r1, r2
 800296c:	4618      	mov	r0, r3
 800296e:	f003 fb56 	bl	800601e <USB_HC_Halt>
}
 8002972:	e2d8      	b.n	8002f26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	015a      	lsls	r2, r3, #5
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	4413      	add	r3, r2
 800297c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b01      	cmp	r3, #1
 8002988:	d140      	bne.n	8002a0c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	212c      	movs	r1, #44	; 0x2c
 8002990:	fb01 f303 	mul.w	r3, r1, r3
 8002994:	4413      	add	r3, r2
 8002996:	335c      	adds	r3, #92	; 0x5c
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ae:	2b40      	cmp	r3, #64	; 0x40
 80029b0:	d111      	bne.n	80029d6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	212c      	movs	r1, #44	; 0x2c
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	4413      	add	r3, r2
 80029be:	333d      	adds	r3, #61	; 0x3d
 80029c0:	2201      	movs	r2, #1
 80029c2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d0:	461a      	mov	r2, r3
 80029d2:	2340      	movs	r3, #64	; 0x40
 80029d4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	015a      	lsls	r2, r3, #5
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	4413      	add	r3, r2
 80029de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e2:	461a      	mov	r2, r3
 80029e4:	2301      	movs	r3, #1
 80029e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	212c      	movs	r1, #44	; 0x2c
 80029ee:	fb01 f303 	mul.w	r3, r1, r3
 80029f2:	4413      	add	r3, r2
 80029f4:	3361      	adds	r3, #97	; 0x61
 80029f6:	2201      	movs	r2, #1
 80029f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	4611      	mov	r1, r2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f003 fb0a 	bl	800601e <USB_HC_Halt>
}
 8002a0a:	e28c      	b.n	8002f26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1e:	2b40      	cmp	r3, #64	; 0x40
 8002a20:	d12c      	bne.n	8002a7c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	212c      	movs	r1, #44	; 0x2c
 8002a28:	fb01 f303 	mul.w	r3, r1, r3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3361      	adds	r3, #97	; 0x61
 8002a30:	2204      	movs	r2, #4
 8002a32:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	212c      	movs	r1, #44	; 0x2c
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	333d      	adds	r3, #61	; 0x3d
 8002a42:	2201      	movs	r2, #1
 8002a44:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	212c      	movs	r1, #44	; 0x2c
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	4413      	add	r3, r2
 8002a52:	335c      	adds	r3, #92	; 0x5c
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	4611      	mov	r1, r2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f003 fadb 	bl	800601e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a74:	461a      	mov	r2, r3
 8002a76:	2340      	movs	r3, #64	; 0x40
 8002a78:	6093      	str	r3, [r2, #8]
}
 8002a7a:	e254      	b.n	8002f26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d11a      	bne.n	8002ac8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	015a      	lsls	r2, r3, #5
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	2308      	movs	r3, #8
 8002aa2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	212c      	movs	r1, #44	; 0x2c
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	3361      	adds	r3, #97	; 0x61
 8002ab2:	2205      	movs	r2, #5
 8002ab4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f003 faac 	bl	800601e <USB_HC_Halt>
}
 8002ac6:	e22e      	b.n	8002f26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	2b10      	cmp	r3, #16
 8002adc:	d140      	bne.n	8002b60 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	212c      	movs	r1, #44	; 0x2c
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	4413      	add	r3, r2
 8002aea:	335c      	adds	r3, #92	; 0x5c
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	212c      	movs	r1, #44	; 0x2c
 8002af6:	fb01 f303 	mul.w	r3, r1, r3
 8002afa:	4413      	add	r3, r2
 8002afc:	3361      	adds	r3, #97	; 0x61
 8002afe:	2203      	movs	r2, #3
 8002b00:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	212c      	movs	r1, #44	; 0x2c
 8002b08:	fb01 f303 	mul.w	r3, r1, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	333d      	adds	r3, #61	; 0x3d
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d112      	bne.n	8002b3c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	212c      	movs	r1, #44	; 0x2c
 8002b1c:	fb01 f303 	mul.w	r3, r1, r3
 8002b20:	4413      	add	r3, r2
 8002b22:	333c      	adds	r3, #60	; 0x3c
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d108      	bne.n	8002b3c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	212c      	movs	r1, #44	; 0x2c
 8002b30:	fb01 f303 	mul.w	r3, r1, r3
 8002b34:	4413      	add	r3, r2
 8002b36:	333d      	adds	r3, #61	; 0x3d
 8002b38:	2201      	movs	r2, #1
 8002b3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	4611      	mov	r1, r2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f003 fa69 	bl	800601e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b58:	461a      	mov	r2, r3
 8002b5a:	2310      	movs	r3, #16
 8002b5c:	6093      	str	r3, [r2, #8]
}
 8002b5e:	e1e2      	b.n	8002f26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b72:	2b80      	cmp	r3, #128	; 0x80
 8002b74:	d164      	bne.n	8002c40 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d111      	bne.n	8002ba2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	212c      	movs	r1, #44	; 0x2c
 8002b84:	fb01 f303 	mul.w	r3, r1, r3
 8002b88:	4413      	add	r3, r2
 8002b8a:	3361      	adds	r3, #97	; 0x61
 8002b8c:	2206      	movs	r2, #6
 8002b8e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	4611      	mov	r1, r2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f003 fa3f 	bl	800601e <USB_HC_Halt>
 8002ba0:	e044      	b.n	8002c2c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	212c      	movs	r1, #44	; 0x2c
 8002ba8:	fb01 f303 	mul.w	r3, r1, r3
 8002bac:	4413      	add	r3, r2
 8002bae:	335c      	adds	r3, #92	; 0x5c
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	202c      	movs	r0, #44	; 0x2c
 8002bba:	fb00 f303 	mul.w	r3, r0, r3
 8002bbe:	440b      	add	r3, r1
 8002bc0:	335c      	adds	r3, #92	; 0x5c
 8002bc2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	212c      	movs	r1, #44	; 0x2c
 8002bca:	fb01 f303 	mul.w	r3, r1, r3
 8002bce:	4413      	add	r3, r2
 8002bd0:	335c      	adds	r3, #92	; 0x5c
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d920      	bls.n	8002c1a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	212c      	movs	r1, #44	; 0x2c
 8002bde:	fb01 f303 	mul.w	r3, r1, r3
 8002be2:	4413      	add	r3, r2
 8002be4:	335c      	adds	r3, #92	; 0x5c
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	212c      	movs	r1, #44	; 0x2c
 8002bf0:	fb01 f303 	mul.w	r3, r1, r3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3360      	adds	r3, #96	; 0x60
 8002bf8:	2204      	movs	r2, #4
 8002bfa:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	b2d9      	uxtb	r1, r3
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	202c      	movs	r0, #44	; 0x2c
 8002c06:	fb00 f303 	mul.w	r3, r0, r3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3360      	adds	r3, #96	; 0x60
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f005 fca6 	bl	8008564 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c18:	e008      	b.n	8002c2c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	212c      	movs	r1, #44	; 0x2c
 8002c20:	fb01 f303 	mul.w	r3, r1, r3
 8002c24:	4413      	add	r3, r2
 8002c26:	3360      	adds	r3, #96	; 0x60
 8002c28:	2202      	movs	r2, #2
 8002c2a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	015a      	lsls	r2, r3, #5
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c38:	461a      	mov	r2, r3
 8002c3a:	2380      	movs	r3, #128	; 0x80
 8002c3c:	6093      	str	r3, [r2, #8]
}
 8002c3e:	e172      	b.n	8002f26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	015a      	lsls	r2, r3, #5
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c56:	d11b      	bne.n	8002c90 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	212c      	movs	r1, #44	; 0x2c
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	4413      	add	r3, r2
 8002c64:	3361      	adds	r3, #97	; 0x61
 8002c66:	2208      	movs	r2, #8
 8002c68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	4611      	mov	r1, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f003 f9d2 	bl	800601e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	015a      	lsls	r2, r3, #5
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c86:	461a      	mov	r2, r3
 8002c88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c8c:	6093      	str	r3, [r2, #8]
}
 8002c8e:	e14a      	b.n	8002f26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	f040 813f 	bne.w	8002f26 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	212c      	movs	r1, #44	; 0x2c
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3361      	adds	r3, #97	; 0x61
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d17d      	bne.n	8002db8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	212c      	movs	r1, #44	; 0x2c
 8002cc2:	fb01 f303 	mul.w	r3, r1, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3360      	adds	r3, #96	; 0x60
 8002cca:	2201      	movs	r2, #1
 8002ccc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	212c      	movs	r1, #44	; 0x2c
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	4413      	add	r3, r2
 8002cda:	333f      	adds	r3, #63	; 0x3f
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d00a      	beq.n	8002cf8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	212c      	movs	r1, #44	; 0x2c
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	333f      	adds	r3, #63	; 0x3f
 8002cf0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	f040 8100 	bne.w	8002ef8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d113      	bne.n	8002d28 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	212c      	movs	r1, #44	; 0x2c
 8002d06:	fb01 f303 	mul.w	r3, r1, r3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3355      	adds	r3, #85	; 0x55
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	f083 0301 	eor.w	r3, r3, #1
 8002d14:	b2d8      	uxtb	r0, r3
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	212c      	movs	r1, #44	; 0x2c
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	4413      	add	r3, r2
 8002d22:	3355      	adds	r3, #85	; 0x55
 8002d24:	4602      	mov	r2, r0
 8002d26:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	f040 80e3 	bne.w	8002ef8 <HCD_HC_OUT_IRQHandler+0x69c>
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	212c      	movs	r1, #44	; 0x2c
 8002d38:	fb01 f303 	mul.w	r3, r1, r3
 8002d3c:	4413      	add	r3, r2
 8002d3e:	334c      	adds	r3, #76	; 0x4c
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 80d8 	beq.w	8002ef8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	212c      	movs	r1, #44	; 0x2c
 8002d4e:	fb01 f303 	mul.w	r3, r1, r3
 8002d52:	4413      	add	r3, r2
 8002d54:	334c      	adds	r3, #76	; 0x4c
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	202c      	movs	r0, #44	; 0x2c
 8002d5e:	fb00 f202 	mul.w	r2, r0, r2
 8002d62:	440a      	add	r2, r1
 8002d64:	3240      	adds	r2, #64	; 0x40
 8002d66:	8812      	ldrh	r2, [r2, #0]
 8002d68:	4413      	add	r3, r2
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	202c      	movs	r0, #44	; 0x2c
 8002d72:	fb00 f202 	mul.w	r2, r0, r2
 8002d76:	440a      	add	r2, r1
 8002d78:	3240      	adds	r2, #64	; 0x40
 8002d7a:	8812      	ldrh	r2, [r2, #0]
 8002d7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 80b5 	beq.w	8002ef8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	212c      	movs	r1, #44	; 0x2c
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	4413      	add	r3, r2
 8002d9a:	3355      	adds	r3, #85	; 0x55
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	f083 0301 	eor.w	r3, r3, #1
 8002da2:	b2d8      	uxtb	r0, r3
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	212c      	movs	r1, #44	; 0x2c
 8002daa:	fb01 f303 	mul.w	r3, r1, r3
 8002dae:	4413      	add	r3, r2
 8002db0:	3355      	adds	r3, #85	; 0x55
 8002db2:	4602      	mov	r2, r0
 8002db4:	701a      	strb	r2, [r3, #0]
 8002db6:	e09f      	b.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	212c      	movs	r1, #44	; 0x2c
 8002dbe:	fb01 f303 	mul.w	r3, r1, r3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3361      	adds	r3, #97	; 0x61
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d109      	bne.n	8002de0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	212c      	movs	r1, #44	; 0x2c
 8002dd2:	fb01 f303 	mul.w	r3, r1, r3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3360      	adds	r3, #96	; 0x60
 8002dda:	2202      	movs	r2, #2
 8002ddc:	701a      	strb	r2, [r3, #0]
 8002dde:	e08b      	b.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	212c      	movs	r1, #44	; 0x2c
 8002de6:	fb01 f303 	mul.w	r3, r1, r3
 8002dea:	4413      	add	r3, r2
 8002dec:	3361      	adds	r3, #97	; 0x61
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d109      	bne.n	8002e08 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	212c      	movs	r1, #44	; 0x2c
 8002dfa:	fb01 f303 	mul.w	r3, r1, r3
 8002dfe:	4413      	add	r3, r2
 8002e00:	3360      	adds	r3, #96	; 0x60
 8002e02:	2202      	movs	r2, #2
 8002e04:	701a      	strb	r2, [r3, #0]
 8002e06:	e077      	b.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	212c      	movs	r1, #44	; 0x2c
 8002e0e:	fb01 f303 	mul.w	r3, r1, r3
 8002e12:	4413      	add	r3, r2
 8002e14:	3361      	adds	r3, #97	; 0x61
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b05      	cmp	r3, #5
 8002e1a:	d109      	bne.n	8002e30 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	212c      	movs	r1, #44	; 0x2c
 8002e22:	fb01 f303 	mul.w	r3, r1, r3
 8002e26:	4413      	add	r3, r2
 8002e28:	3360      	adds	r3, #96	; 0x60
 8002e2a:	2205      	movs	r2, #5
 8002e2c:	701a      	strb	r2, [r3, #0]
 8002e2e:	e063      	b.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	212c      	movs	r1, #44	; 0x2c
 8002e36:	fb01 f303 	mul.w	r3, r1, r3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3361      	adds	r3, #97	; 0x61
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b06      	cmp	r3, #6
 8002e42:	d009      	beq.n	8002e58 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	212c      	movs	r1, #44	; 0x2c
 8002e4a:	fb01 f303 	mul.w	r3, r1, r3
 8002e4e:	4413      	add	r3, r2
 8002e50:	3361      	adds	r3, #97	; 0x61
 8002e52:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d14f      	bne.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	212c      	movs	r1, #44	; 0x2c
 8002e5e:	fb01 f303 	mul.w	r3, r1, r3
 8002e62:	4413      	add	r3, r2
 8002e64:	335c      	adds	r3, #92	; 0x5c
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	202c      	movs	r0, #44	; 0x2c
 8002e70:	fb00 f303 	mul.w	r3, r0, r3
 8002e74:	440b      	add	r3, r1
 8002e76:	335c      	adds	r3, #92	; 0x5c
 8002e78:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	212c      	movs	r1, #44	; 0x2c
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	4413      	add	r3, r2
 8002e86:	335c      	adds	r3, #92	; 0x5c
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d912      	bls.n	8002eb4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	212c      	movs	r1, #44	; 0x2c
 8002e94:	fb01 f303 	mul.w	r3, r1, r3
 8002e98:	4413      	add	r3, r2
 8002e9a:	335c      	adds	r3, #92	; 0x5c
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	212c      	movs	r1, #44	; 0x2c
 8002ea6:	fb01 f303 	mul.w	r3, r1, r3
 8002eaa:	4413      	add	r3, r2
 8002eac:	3360      	adds	r3, #96	; 0x60
 8002eae:	2204      	movs	r2, #4
 8002eb0:	701a      	strb	r2, [r3, #0]
 8002eb2:	e021      	b.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	212c      	movs	r1, #44	; 0x2c
 8002eba:	fb01 f303 	mul.w	r3, r1, r3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	3360      	adds	r3, #96	; 0x60
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	015a      	lsls	r2, r3, #5
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002edc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ee4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f04:	461a      	mov	r2, r3
 8002f06:	2302      	movs	r3, #2
 8002f08:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	b2d9      	uxtb	r1, r3
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	202c      	movs	r0, #44	; 0x2c
 8002f14:	fb00 f303 	mul.w	r3, r0, r3
 8002f18:	4413      	add	r3, r2
 8002f1a:	3360      	adds	r3, #96	; 0x60
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f005 fb1f 	bl	8008564 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f26:	bf00      	nop
 8002f28:	3720      	adds	r7, #32
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b08a      	sub	sp, #40	; 0x28
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	0c5b      	lsrs	r3, r3, #17
 8002f54:	f003 030f 	and.w	r3, r3, #15
 8002f58:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	091b      	lsrs	r3, r3, #4
 8002f5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f62:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d004      	beq.n	8002f74 <HCD_RXQLVL_IRQHandler+0x46>
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2b05      	cmp	r3, #5
 8002f6e:	f000 80a9 	beq.w	80030c4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002f72:	e0aa      	b.n	80030ca <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 80a6 	beq.w	80030c8 <HCD_RXQLVL_IRQHandler+0x19a>
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	212c      	movs	r1, #44	; 0x2c
 8002f82:	fb01 f303 	mul.w	r3, r1, r3
 8002f86:	4413      	add	r3, r2
 8002f88:	3344      	adds	r3, #68	; 0x44
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 809b 	beq.w	80030c8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	212c      	movs	r1, #44	; 0x2c
 8002f98:	fb01 f303 	mul.w	r3, r1, r3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3350      	adds	r3, #80	; 0x50
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	441a      	add	r2, r3
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	202c      	movs	r0, #44	; 0x2c
 8002fac:	fb00 f303 	mul.w	r3, r0, r3
 8002fb0:	440b      	add	r3, r1
 8002fb2:	334c      	adds	r3, #76	; 0x4c
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d87a      	bhi.n	80030b0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6818      	ldr	r0, [r3, #0]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	212c      	movs	r1, #44	; 0x2c
 8002fc4:	fb01 f303 	mul.w	r3, r1, r3
 8002fc8:	4413      	add	r3, r2
 8002fca:	3344      	adds	r3, #68	; 0x44
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	b292      	uxth	r2, r2
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	f002 fb7a 	bl	80056cc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	212c      	movs	r1, #44	; 0x2c
 8002fde:	fb01 f303 	mul.w	r3, r1, r3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3344      	adds	r3, #68	; 0x44
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	441a      	add	r2, r3
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	202c      	movs	r0, #44	; 0x2c
 8002ff2:	fb00 f303 	mul.w	r3, r0, r3
 8002ff6:	440b      	add	r3, r1
 8002ff8:	3344      	adds	r3, #68	; 0x44
 8002ffa:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	212c      	movs	r1, #44	; 0x2c
 8003002:	fb01 f303 	mul.w	r3, r1, r3
 8003006:	4413      	add	r3, r2
 8003008:	3350      	adds	r3, #80	; 0x50
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	441a      	add	r2, r3
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	202c      	movs	r0, #44	; 0x2c
 8003016:	fb00 f303 	mul.w	r3, r0, r3
 800301a:	440b      	add	r3, r1
 800301c:	3350      	adds	r3, #80	; 0x50
 800301e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	015a      	lsls	r2, r3, #5
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	4413      	add	r3, r2
 8003028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	0cdb      	lsrs	r3, r3, #19
 8003030:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003034:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	212c      	movs	r1, #44	; 0x2c
 800303c:	fb01 f303 	mul.w	r3, r1, r3
 8003040:	4413      	add	r3, r2
 8003042:	3340      	adds	r3, #64	; 0x40
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4293      	cmp	r3, r2
 800304c:	d13c      	bne.n	80030c8 <HCD_RXQLVL_IRQHandler+0x19a>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d039      	beq.n	80030c8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	4413      	add	r3, r2
 800305c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800306a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003072:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	6a3b      	ldr	r3, [r7, #32]
 800307a:	4413      	add	r3, r2
 800307c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003080:	461a      	mov	r2, r3
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	212c      	movs	r1, #44	; 0x2c
 800308c:	fb01 f303 	mul.w	r3, r1, r3
 8003090:	4413      	add	r3, r2
 8003092:	3354      	adds	r3, #84	; 0x54
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	f083 0301 	eor.w	r3, r3, #1
 800309a:	b2d8      	uxtb	r0, r3
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	212c      	movs	r1, #44	; 0x2c
 80030a2:	fb01 f303 	mul.w	r3, r1, r3
 80030a6:	4413      	add	r3, r2
 80030a8:	3354      	adds	r3, #84	; 0x54
 80030aa:	4602      	mov	r2, r0
 80030ac:	701a      	strb	r2, [r3, #0]
      break;
 80030ae:	e00b      	b.n	80030c8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	212c      	movs	r1, #44	; 0x2c
 80030b6:	fb01 f303 	mul.w	r3, r1, r3
 80030ba:	4413      	add	r3, r2
 80030bc:	3360      	adds	r3, #96	; 0x60
 80030be:	2204      	movs	r2, #4
 80030c0:	701a      	strb	r2, [r3, #0]
      break;
 80030c2:	e001      	b.n	80030c8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80030c4:	bf00      	nop
 80030c6:	e000      	b.n	80030ca <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80030c8:	bf00      	nop
  }
}
 80030ca:	bf00      	nop
 80030cc:	3728      	adds	r7, #40	; 0x28
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b086      	sub	sp, #24
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80030fe:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b02      	cmp	r3, #2
 8003108:	d10b      	bne.n	8003122 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b01      	cmp	r3, #1
 8003112:	d102      	bne.n	800311a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f005 fa09 	bl	800852c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f043 0302 	orr.w	r3, r3, #2
 8003120:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b08      	cmp	r3, #8
 800312a:	d132      	bne.n	8003192 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f043 0308 	orr.w	r3, r3, #8
 8003132:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	2b04      	cmp	r3, #4
 800313c:	d126      	bne.n	800318c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d113      	bne.n	800316e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800314c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003150:	d106      	bne.n	8003160 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2102      	movs	r1, #2
 8003158:	4618      	mov	r0, r3
 800315a:	f002 fc25 	bl	80059a8 <USB_InitFSLSPClkSel>
 800315e:	e011      	b.n	8003184 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2101      	movs	r1, #1
 8003166:	4618      	mov	r0, r3
 8003168:	f002 fc1e 	bl	80059a8 <USB_InitFSLSPClkSel>
 800316c:	e00a      	b.n	8003184 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d106      	bne.n	8003184 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800317c:	461a      	mov	r2, r3
 800317e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003182:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f005 f9fb 	bl	8008580 <HAL_HCD_PortEnabled_Callback>
 800318a:	e002      	b.n	8003192 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f005 fa05 	bl	800859c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b20      	cmp	r3, #32
 800319a:	d103      	bne.n	80031a4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f043 0320 	orr.w	r3, r3, #32
 80031a2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031aa:	461a      	mov	r2, r3
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	6013      	str	r3, [r2, #0]
}
 80031b0:	bf00      	nop
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e1bd      	b.n	8003546 <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a93      	ldr	r2, [pc, #588]	; (800341c <HAL_I2C_Init+0x264>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00e      	beq.n	80031f2 <HAL_I2C_Init+0x3a>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a91      	ldr	r2, [pc, #580]	; (8003420 <HAL_I2C_Init+0x268>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d009      	beq.n	80031f2 <HAL_I2C_Init+0x3a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a90      	ldr	r2, [pc, #576]	; (8003424 <HAL_I2C_Init+0x26c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d004      	beq.n	80031f2 <HAL_I2C_Init+0x3a>
 80031e8:	f44f 71df 	mov.w	r1, #446	; 0x1be
 80031ec:	488e      	ldr	r0, [pc, #568]	; (8003428 <HAL_I2C_Init+0x270>)
 80031ee:	f7fd fdae 	bl	8000d4e <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d004      	beq.n	8003204 <HAL_I2C_Init+0x4c>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	4a8b      	ldr	r2, [pc, #556]	; (800342c <HAL_I2C_Init+0x274>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d904      	bls.n	800320e <HAL_I2C_Init+0x56>
 8003204:	f240 11bf 	movw	r1, #447	; 0x1bf
 8003208:	4887      	ldr	r0, [pc, #540]	; (8003428 <HAL_I2C_Init+0x270>)
 800320a:	f7fd fda0 	bl	8000d4e <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d009      	beq.n	800322a <HAL_I2C_Init+0x72>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800321e:	d004      	beq.n	800322a <HAL_I2C_Init+0x72>
 8003220:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8003224:	4880      	ldr	r0, [pc, #512]	; (8003428 <HAL_I2C_Init+0x270>)
 8003226:	f7fd fd92 	bl	8000d4e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003232:	f023 0303 	bic.w	r3, r3, #3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d004      	beq.n	8003244 <HAL_I2C_Init+0x8c>
 800323a:	f240 11c1 	movw	r1, #449	; 0x1c1
 800323e:	487a      	ldr	r0, [pc, #488]	; (8003428 <HAL_I2C_Init+0x270>)
 8003240:	f7fd fd85 	bl	8000d4e <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800324c:	d009      	beq.n	8003262 <HAL_I2C_Init+0xaa>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003256:	d004      	beq.n	8003262 <HAL_I2C_Init+0xaa>
 8003258:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800325c:	4872      	ldr	r0, [pc, #456]	; (8003428 <HAL_I2C_Init+0x270>)
 800325e:	f7fd fd76 	bl	8000d4e <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d008      	beq.n	800327c <HAL_I2C_Init+0xc4>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d004      	beq.n	800327c <HAL_I2C_Init+0xc4>
 8003272:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003276:	486c      	ldr	r0, [pc, #432]	; (8003428 <HAL_I2C_Init+0x270>)
 8003278:	f7fd fd69 	bl	8000d4e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003284:	2b00      	cmp	r3, #0
 8003286:	d004      	beq.n	8003292 <HAL_I2C_Init+0xda>
 8003288:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800328c:	4866      	ldr	r0, [pc, #408]	; (8003428 <HAL_I2C_Init+0x270>)
 800328e:	f7fd fd5e 	bl	8000d4e <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d008      	beq.n	80032ac <HAL_I2C_Init+0xf4>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	2b40      	cmp	r3, #64	; 0x40
 80032a0:	d004      	beq.n	80032ac <HAL_I2C_Init+0xf4>
 80032a2:	f240 11c5 	movw	r1, #453	; 0x1c5
 80032a6:	4860      	ldr	r0, [pc, #384]	; (8003428 <HAL_I2C_Init+0x270>)
 80032a8:	f7fd fd51 	bl	8000d4e <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d008      	beq.n	80032c6 <HAL_I2C_Init+0x10e>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	2b80      	cmp	r3, #128	; 0x80
 80032ba:	d004      	beq.n	80032c6 <HAL_I2C_Init+0x10e>
 80032bc:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80032c0:	4859      	ldr	r0, [pc, #356]	; (8003428 <HAL_I2C_Init+0x270>)
 80032c2:	f7fd fd44 	bl	8000d4e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fd fa64 	bl	80007a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2224      	movs	r2, #36	; 0x24
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0201 	bic.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003306:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003316:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003318:	f001 fc40 	bl	8004b9c <HAL_RCC_GetPCLK1Freq>
 800331c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	4a43      	ldr	r2, [pc, #268]	; (8003430 <HAL_I2C_Init+0x278>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d807      	bhi.n	8003338 <HAL_I2C_Init+0x180>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4a42      	ldr	r2, [pc, #264]	; (8003434 <HAL_I2C_Init+0x27c>)
 800332c:	4293      	cmp	r3, r2
 800332e:	bf94      	ite	ls
 8003330:	2301      	movls	r3, #1
 8003332:	2300      	movhi	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	e006      	b.n	8003346 <HAL_I2C_Init+0x18e>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4a3f      	ldr	r2, [pc, #252]	; (8003438 <HAL_I2C_Init+0x280>)
 800333c:	4293      	cmp	r3, r2
 800333e:	bf94      	ite	ls
 8003340:	2301      	movls	r3, #1
 8003342:	2300      	movhi	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e0fb      	b.n	8003546 <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4a3a      	ldr	r2, [pc, #232]	; (800343c <HAL_I2C_Init+0x284>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	0c9b      	lsrs	r3, r3, #18
 8003358:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	430a      	orrs	r2, r1
 800336c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	4a2c      	ldr	r2, [pc, #176]	; (8003430 <HAL_I2C_Init+0x278>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d802      	bhi.n	8003388 <HAL_I2C_Init+0x1d0>
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	3301      	adds	r3, #1
 8003386:	e009      	b.n	800339c <HAL_I2C_Init+0x1e4>
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800338e:	fb02 f303 	mul.w	r3, r2, r3
 8003392:	4a2b      	ldr	r2, [pc, #172]	; (8003440 <HAL_I2C_Init+0x288>)
 8003394:	fba2 2303 	umull	r2, r3, r2, r3
 8003398:	099b      	lsrs	r3, r3, #6
 800339a:	3301      	adds	r3, #1
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	430b      	orrs	r3, r1
 80033a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	491e      	ldr	r1, [pc, #120]	; (8003430 <HAL_I2C_Init+0x278>)
 80033b8:	428b      	cmp	r3, r1
 80033ba:	d819      	bhi.n	80033f0 <HAL_I2C_Init+0x238>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1e59      	subs	r1, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80033ca:	1c59      	adds	r1, r3, #1
 80033cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033d0:	400b      	ands	r3, r1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <HAL_I2C_Init+0x234>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	1e59      	subs	r1, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80033e4:	3301      	adds	r3, #1
 80033e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ea:	e065      	b.n	80034b8 <HAL_I2C_Init+0x300>
 80033ec:	2304      	movs	r3, #4
 80033ee:	e063      	b.n	80034b8 <HAL_I2C_Init+0x300>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d125      	bne.n	8003444 <HAL_I2C_Init+0x28c>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	1e58      	subs	r0, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6859      	ldr	r1, [r3, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	440b      	add	r3, r1
 8003406:	fbb0 f3f3 	udiv	r3, r0, r3
 800340a:	3301      	adds	r3, #1
 800340c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003410:	2b00      	cmp	r3, #0
 8003412:	bf0c      	ite	eq
 8003414:	2301      	moveq	r3, #1
 8003416:	2300      	movne	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	e026      	b.n	800346a <HAL_I2C_Init+0x2b2>
 800341c:	40005400 	.word	0x40005400
 8003420:	40005800 	.word	0x40005800
 8003424:	40005c00 	.word	0x40005c00
 8003428:	0800a3ac 	.word	0x0800a3ac
 800342c:	00061a80 	.word	0x00061a80
 8003430:	000186a0 	.word	0x000186a0
 8003434:	001e847f 	.word	0x001e847f
 8003438:	003d08ff 	.word	0x003d08ff
 800343c:	431bde83 	.word	0x431bde83
 8003440:	10624dd3 	.word	0x10624dd3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	1e58      	subs	r0, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6859      	ldr	r1, [r3, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	0099      	lsls	r1, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	fbb0 f3f3 	udiv	r3, r0, r3
 800345a:	3301      	adds	r3, #1
 800345c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003460:	2b00      	cmp	r3, #0
 8003462:	bf0c      	ite	eq
 8003464:	2301      	moveq	r3, #1
 8003466:	2300      	movne	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_I2C_Init+0x2ba>
 800346e:	2301      	movs	r3, #1
 8003470:	e022      	b.n	80034b8 <HAL_I2C_Init+0x300>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10e      	bne.n	8003498 <HAL_I2C_Init+0x2e0>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	1e58      	subs	r0, r3, #1
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6859      	ldr	r1, [r3, #4]
 8003482:	460b      	mov	r3, r1
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	440b      	add	r3, r1
 8003488:	fbb0 f3f3 	udiv	r3, r0, r3
 800348c:	3301      	adds	r3, #1
 800348e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003496:	e00f      	b.n	80034b8 <HAL_I2C_Init+0x300>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	1e58      	subs	r0, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6859      	ldr	r1, [r3, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	0099      	lsls	r1, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ae:	3301      	adds	r3, #1
 80034b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	6809      	ldr	r1, [r1, #0]
 80034bc:	4313      	orrs	r3, r2
 80034be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69da      	ldr	r2, [r3, #28]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6911      	ldr	r1, [r2, #16]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	68d2      	ldr	r2, [r2, #12]
 80034f2:	4311      	orrs	r1, r2
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6812      	ldr	r2, [r2, #0]
 80034f8:	430b      	orrs	r3, r1
 80034fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	695a      	ldr	r2, [r3, #20]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0201 	orr.w	r2, r2, #1
 8003526:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2220      	movs	r2, #32
 8003532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop

08003550 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b088      	sub	sp, #32
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e1e7      	b.n	8003932 <HAL_I2S_Init+0x3e2>
  }

  /* Check the I2S parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a92      	ldr	r2, [pc, #584]	; (80037b0 <HAL_I2S_Init+0x260>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d018      	beq.n	800359e <HAL_I2S_Init+0x4e>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a90      	ldr	r2, [pc, #576]	; (80037b4 <HAL_I2S_Init+0x264>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d013      	beq.n	800359e <HAL_I2S_Init+0x4e>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a8f      	ldr	r2, [pc, #572]	; (80037b8 <HAL_I2S_Init+0x268>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d00e      	beq.n	800359e <HAL_I2S_Init+0x4e>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a8d      	ldr	r2, [pc, #564]	; (80037bc <HAL_I2S_Init+0x26c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d009      	beq.n	800359e <HAL_I2S_Init+0x4e>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a8c      	ldr	r2, [pc, #560]	; (80037c0 <HAL_I2S_Init+0x270>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d004      	beq.n	800359e <HAL_I2S_Init+0x4e>
 8003594:	f240 111b 	movw	r1, #283	; 0x11b
 8003598:	488a      	ldr	r0, [pc, #552]	; (80037c4 <HAL_I2S_Init+0x274>)
 800359a:	f7fd fbd8 	bl	8000d4e <assert_failed>
  assert_param(IS_I2S_MODE(hi2s->Init.Mode));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d013      	beq.n	80035ce <HAL_I2S_Init+0x7e>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ae:	d00e      	beq.n	80035ce <HAL_I2S_Init+0x7e>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b8:	d009      	beq.n	80035ce <HAL_I2S_Init+0x7e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035c2:	d004      	beq.n	80035ce <HAL_I2S_Init+0x7e>
 80035c4:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80035c8:	487e      	ldr	r0, [pc, #504]	; (80037c4 <HAL_I2S_Init+0x274>)
 80035ca:	f7fd fbc0 	bl	8000d4e <assert_failed>
  assert_param(IS_I2S_STANDARD(hi2s->Init.Standard));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d014      	beq.n	8003600 <HAL_I2S_Init+0xb0>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b10      	cmp	r3, #16
 80035dc:	d010      	beq.n	8003600 <HAL_I2S_Init+0xb0>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	2b20      	cmp	r3, #32
 80035e4:	d00c      	beq.n	8003600 <HAL_I2S_Init+0xb0>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	2b30      	cmp	r3, #48	; 0x30
 80035ec:	d008      	beq.n	8003600 <HAL_I2S_Init+0xb0>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2bb0      	cmp	r3, #176	; 0xb0
 80035f4:	d004      	beq.n	8003600 <HAL_I2S_Init+0xb0>
 80035f6:	f240 111d 	movw	r1, #285	; 0x11d
 80035fa:	4872      	ldr	r0, [pc, #456]	; (80037c4 <HAL_I2S_Init+0x274>)
 80035fc:	f7fd fba7 	bl	8000d4e <assert_failed>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d010      	beq.n	800362a <HAL_I2S_Init+0xda>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d00c      	beq.n	800362a <HAL_I2S_Init+0xda>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	2b03      	cmp	r3, #3
 8003616:	d008      	beq.n	800362a <HAL_I2S_Init+0xda>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	2b05      	cmp	r3, #5
 800361e:	d004      	beq.n	800362a <HAL_I2S_Init+0xda>
 8003620:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8003624:	4867      	ldr	r0, [pc, #412]	; (80037c4 <HAL_I2S_Init+0x274>)
 8003626:	f7fd fb92 	bl	8000d4e <assert_failed>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003632:	d008      	beq.n	8003646 <HAL_I2S_Init+0xf6>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d004      	beq.n	8003646 <HAL_I2S_Init+0xf6>
 800363c:	f240 111f 	movw	r1, #287	; 0x11f
 8003640:	4860      	ldr	r0, [pc, #384]	; (80037c4 <HAL_I2S_Init+0x274>)
 8003642:	f7fd fb84 	bl	8000d4e <assert_failed>
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800364e:	d304      	bcc.n	800365a <HAL_I2S_Init+0x10a>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	4a5c      	ldr	r2, [pc, #368]	; (80037c8 <HAL_I2S_Init+0x278>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d908      	bls.n	800366c <HAL_I2S_Init+0x11c>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	2b02      	cmp	r3, #2
 8003660:	d004      	beq.n	800366c <HAL_I2S_Init+0x11c>
 8003662:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003666:	4857      	ldr	r0, [pc, #348]	; (80037c4 <HAL_I2S_Init+0x274>)
 8003668:	f7fd fb71 	bl	8000d4e <assert_failed>
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d008      	beq.n	8003686 <HAL_I2S_Init+0x136>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	2b08      	cmp	r3, #8
 800367a:	d004      	beq.n	8003686 <HAL_I2S_Init+0x136>
 800367c:	f240 1121 	movw	r1, #289	; 0x121
 8003680:	4850      	ldr	r0, [pc, #320]	; (80037c4 <HAL_I2S_Init+0x274>)
 8003682:	f7fd fb64 	bl	8000d4e <assert_failed>
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d008      	beq.n	80036a0 <HAL_I2S_Init+0x150>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d004      	beq.n	80036a0 <HAL_I2S_Init+0x150>
 8003696:	f44f 7191 	mov.w	r1, #290	; 0x122
 800369a:	484a      	ldr	r0, [pc, #296]	; (80037c4 <HAL_I2S_Init+0x274>)
 800369c:	f7fd fb57 	bl	8000d4e <assert_failed>

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d109      	bne.n	80036c0 <HAL_I2S_Init+0x170>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a45      	ldr	r2, [pc, #276]	; (80037cc <HAL_I2S_Init+0x27c>)
 80036b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7fd f91a 	bl	80008f4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2202      	movs	r2, #2
 80036c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6812      	ldr	r2, [r2, #0]
 80036d2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80036d6:	f023 030f 	bic.w	r3, r3, #15
 80036da:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2202      	movs	r2, #2
 80036e2:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d073      	beq.n	80037d4 <HAL_I2S_Init+0x284>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d102      	bne.n	80036fa <HAL_I2S_Init+0x1aa>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80036f4:	2310      	movs	r3, #16
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	e001      	b.n	80036fe <HAL_I2S_Init+0x1ae>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80036fa:	2320      	movs	r3, #32
 80036fc:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	2b20      	cmp	r3, #32
 8003704:	d802      	bhi.n	800370c <HAL_I2S_Init+0x1bc>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800370c:	2001      	movs	r0, #1
 800370e:	f001 fc6f 	bl	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003712:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800371c:	d125      	bne.n	800376a <HAL_I2S_Init+0x21a>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d010      	beq.n	8003748 <HAL_I2S_Init+0x1f8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	461a      	mov	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003742:	3305      	adds	r3, #5
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	e01f      	b.n	8003788 <HAL_I2S_Init+0x238>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003752:	4613      	mov	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	461a      	mov	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	fbb2 f3f3 	udiv	r3, r2, r3
 8003764:	3305      	adds	r3, #5
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	e00e      	b.n	8003788 <HAL_I2S_Init+0x238>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003772:	4613      	mov	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	461a      	mov	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	fbb2 f3f3 	udiv	r3, r2, r3
 8003784:	3305      	adds	r3, #5
 8003786:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	4a11      	ldr	r2, [pc, #68]	; (80037d0 <HAL_I2S_Init+0x280>)
 800378c:	fba2 2303 	umull	r2, r3, r2, r3
 8003790:	08db      	lsrs	r3, r3, #3
 8003792:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	085b      	lsrs	r3, r3, #1
 80037a4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	021b      	lsls	r3, r3, #8
 80037aa:	61bb      	str	r3, [r7, #24]
 80037ac:	e016      	b.n	80037dc <HAL_I2S_Init+0x28c>
 80037ae:	bf00      	nop
 80037b0:	40013000 	.word	0x40013000
 80037b4:	40003800 	.word	0x40003800
 80037b8:	40003c00 	.word	0x40003c00
 80037bc:	40013400 	.word	0x40013400
 80037c0:	40015000 	.word	0x40015000
 80037c4:	0800a3e4 	.word	0x0800a3e4
 80037c8:	0002ee00 	.word	0x0002ee00
 80037cc:	08003a43 	.word	0x08003a43
 80037d0:	cccccccd 	.word	0xcccccccd
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80037d4:	2302      	movs	r3, #2
 80037d6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80037d8:	2300      	movs	r3, #0
 80037da:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d902      	bls.n	80037e8 <HAL_I2S_Init+0x298>
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	2bff      	cmp	r3, #255	; 0xff
 80037e6:	d907      	bls.n	80037f8 <HAL_I2S_Init+0x2a8>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ec:	f043 0210 	orr.w	r2, r3, #16
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e09c      	b.n	8003932 <HAL_I2S_Init+0x3e2>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691a      	ldr	r2, [r3, #16]
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	ea42 0103 	orr.w	r1, r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69fa      	ldr	r2, [r7, #28]
 8003808:	430a      	orrs	r2, r1
 800380a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003816:	f023 030f 	bic.w	r3, r3, #15
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6851      	ldr	r1, [r2, #4]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6892      	ldr	r2, [r2, #8]
 8003822:	4311      	orrs	r1, r2
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	68d2      	ldr	r2, [r2, #12]
 8003828:	4311      	orrs	r1, r2
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6992      	ldr	r2, [r2, #24]
 800382e:	430a      	orrs	r2, r1
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800383a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_ASTRTEN */

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d008      	beq.n	8003856 <HAL_I2S_Init+0x306>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d004      	beq.n	8003856 <HAL_I2S_Init+0x306>
 800384c:	f240 11bd 	movw	r1, #445	; 0x1bd
 8003850:	483a      	ldr	r0, [pc, #232]	; (800393c <HAL_I2S_Init+0x3ec>)
 8003852:	f7fd fa7c 	bl	8000d4e <assert_failed>

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d161      	bne.n	8003922 <HAL_I2S_Init+0x3d2>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a37      	ldr	r2, [pc, #220]	; (8003940 <HAL_I2S_Init+0x3f0>)
 8003862:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a36      	ldr	r2, [pc, #216]	; (8003944 <HAL_I2S_Init+0x3f4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d101      	bne.n	8003872 <HAL_I2S_Init+0x322>
 800386e:	4b36      	ldr	r3, [pc, #216]	; (8003948 <HAL_I2S_Init+0x3f8>)
 8003870:	e001      	b.n	8003876 <HAL_I2S_Init+0x326>
 8003872:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6812      	ldr	r2, [r2, #0]
 800387c:	4931      	ldr	r1, [pc, #196]	; (8003944 <HAL_I2S_Init+0x3f4>)
 800387e:	428a      	cmp	r2, r1
 8003880:	d101      	bne.n	8003886 <HAL_I2S_Init+0x336>
 8003882:	4a31      	ldr	r2, [pc, #196]	; (8003948 <HAL_I2S_Init+0x3f8>)
 8003884:	e001      	b.n	800388a <HAL_I2S_Init+0x33a>
 8003886:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800388a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800388e:	f023 030f 	bic.w	r3, r3, #15
 8003892:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a2a      	ldr	r2, [pc, #168]	; (8003944 <HAL_I2S_Init+0x3f4>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d101      	bne.n	80038a2 <HAL_I2S_Init+0x352>
 800389e:	4b2a      	ldr	r3, [pc, #168]	; (8003948 <HAL_I2S_Init+0x3f8>)
 80038a0:	e001      	b.n	80038a6 <HAL_I2S_Init+0x356>
 80038a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038a6:	2202      	movs	r2, #2
 80038a8:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a25      	ldr	r2, [pc, #148]	; (8003944 <HAL_I2S_Init+0x3f4>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d101      	bne.n	80038b8 <HAL_I2S_Init+0x368>
 80038b4:	4b24      	ldr	r3, [pc, #144]	; (8003948 <HAL_I2S_Init+0x3f8>)
 80038b6:	e001      	b.n	80038bc <HAL_I2S_Init+0x36c>
 80038b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038c8:	d003      	beq.n	80038d2 <HAL_I2S_Init+0x382>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d103      	bne.n	80038da <HAL_I2S_Init+0x38a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80038d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	e001      	b.n	80038de <HAL_I2S_Init+0x38e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80038da:	2300      	movs	r3, #0
 80038dc:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80038e8:	4313      	orrs	r3, r2
 80038ea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80038f2:	4313      	orrs	r3, r2
 80038f4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80038fc:	4313      	orrs	r3, r2
 80038fe:	b29a      	uxth	r2, r3
 8003900:	897b      	ldrh	r3, [r7, #10]
 8003902:	4313      	orrs	r3, r2
 8003904:	b29b      	uxth	r3, r3
 8003906:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800390a:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a0c      	ldr	r2, [pc, #48]	; (8003944 <HAL_I2S_Init+0x3f4>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d101      	bne.n	800391a <HAL_I2S_Init+0x3ca>
 8003916:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <HAL_I2S_Init+0x3f8>)
 8003918:	e001      	b.n	800391e <HAL_I2S_Init+0x3ce>
 800391a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800391e:	897a      	ldrh	r2, [r7, #10]
 8003920:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3720      	adds	r7, #32
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	0800a3e4 	.word	0x0800a3e4
 8003940:	08003b59 	.word	0x08003b59
 8003944:	40003800 	.word	0x40003800
 8003948:	40003400 	.word	0x40003400

0800394c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	881a      	ldrh	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	1c9a      	adds	r2, r3, #2
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10e      	bne.n	80039dc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039cc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7ff ffb8 	bl	800394c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80039dc:	bf00      	nop
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f6:	b292      	uxth	r2, r2
 80039f8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fe:	1c9a      	adds	r2, r3, #2
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10e      	bne.n	8003a3a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a2a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff ff93 	bl	8003960 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a3a:	bf00      	nop
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b086      	sub	sp, #24
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d13a      	bne.n	8003ad4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d109      	bne.n	8003a7c <I2S_IRQHandler+0x3a>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a72:	2b40      	cmp	r3, #64	; 0x40
 8003a74:	d102      	bne.n	8003a7c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7ff ffb4 	bl	80039e4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a82:	2b40      	cmp	r3, #64	; 0x40
 8003a84:	d126      	bne.n	8003ad4 <I2S_IRQHandler+0x92>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 0320 	and.w	r3, r3, #32
 8003a90:	2b20      	cmp	r3, #32
 8003a92:	d11f      	bne.n	8003ad4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003aa2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	613b      	str	r3, [r7, #16]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	613b      	str	r3, [r7, #16]
 8003ab8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac6:	f043 0202 	orr.w	r2, r3, #2
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7ff ff50 	bl	8003974 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	d136      	bne.n	8003b4e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d109      	bne.n	8003afe <I2S_IRQHandler+0xbc>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af4:	2b80      	cmp	r3, #128	; 0x80
 8003af6:	d102      	bne.n	8003afe <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff ff45 	bl	8003988 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f003 0308 	and.w	r3, r3, #8
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d122      	bne.n	8003b4e <I2S_IRQHandler+0x10c>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f003 0320 	and.w	r3, r3, #32
 8003b12:	2b20      	cmp	r3, #32
 8003b14:	d11b      	bne.n	8003b4e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b24:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	60fb      	str	r3, [r7, #12]
 8003b32:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b40:	f043 0204 	orr.w	r2, r3, #4
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff ff13 	bl	8003974 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b4e:	bf00      	nop
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a92      	ldr	r2, [pc, #584]	; (8003db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d101      	bne.n	8003b76 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003b72:	4b92      	ldr	r3, [pc, #584]	; (8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b74:	e001      	b.n	8003b7a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003b76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a8b      	ldr	r2, [pc, #556]	; (8003db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d101      	bne.n	8003b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003b90:	4b8a      	ldr	r3, [pc, #552]	; (8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b92:	e001      	b.n	8003b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003b94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ba4:	d004      	beq.n	8003bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f040 8099 	bne.w	8003ce2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d107      	bne.n	8003bca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d002      	beq.n	8003bca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f925 	bl	8003e14 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d107      	bne.n	8003be4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f9c8 	bl	8003f74 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bea:	2b40      	cmp	r3, #64	; 0x40
 8003bec:	d13a      	bne.n	8003c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f003 0320 	and.w	r3, r3, #32
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d035      	beq.n	8003c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a6e      	ldr	r2, [pc, #440]	; (8003db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d101      	bne.n	8003c06 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003c02:	4b6e      	ldr	r3, [pc, #440]	; (8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c04:	e001      	b.n	8003c0a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003c06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4969      	ldr	r1, [pc, #420]	; (8003db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c12:	428b      	cmp	r3, r1
 8003c14:	d101      	bne.n	8003c1a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003c16:	4b69      	ldr	r3, [pc, #420]	; (8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c18:	e001      	b.n	8003c1e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003c1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c22:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c32:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c56:	f043 0202 	orr.w	r2, r3, #2
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7ff fe88 	bl	8003974 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	f040 80c3 	bne.w	8003df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f003 0320 	and.w	r3, r3, #32
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 80bd 	beq.w	8003df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c8a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a49      	ldr	r2, [pc, #292]	; (8003db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d101      	bne.n	8003c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003c96:	4b49      	ldr	r3, [pc, #292]	; (8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c98:	e001      	b.n	8003c9e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003c9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4944      	ldr	r1, [pc, #272]	; (8003db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ca6:	428b      	cmp	r3, r1
 8003ca8:	d101      	bne.n	8003cae <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003caa:	4b44      	ldr	r3, [pc, #272]	; (8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cac:	e001      	b.n	8003cb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003cae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cb6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003cb8:	2300      	movs	r3, #0
 8003cba:	60bb      	str	r3, [r7, #8]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	60bb      	str	r3, [r7, #8]
 8003cc4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	f043 0204 	orr.w	r2, r3, #4
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff fe4a 	bl	8003974 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ce0:	e089      	b.n	8003df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d107      	bne.n	8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f8be 	bl	8003e78 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d107      	bne.n	8003d16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 f8fd 	bl	8003f10 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1c:	2b40      	cmp	r3, #64	; 0x40
 8003d1e:	d12f      	bne.n	8003d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f003 0320 	and.w	r3, r3, #32
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d02a      	beq.n	8003d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d38:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a1e      	ldr	r2, [pc, #120]	; (8003db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d101      	bne.n	8003d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003d44:	4b1d      	ldr	r3, [pc, #116]	; (8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d46:	e001      	b.n	8003d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003d48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4919      	ldr	r1, [pc, #100]	; (8003db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d54:	428b      	cmp	r3, r1
 8003d56:	d101      	bne.n	8003d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003d58:	4b18      	ldr	r3, [pc, #96]	; (8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d5a:	e001      	b.n	8003d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003d5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d64:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d72:	f043 0202 	orr.w	r2, r3, #2
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff fdfa 	bl	8003974 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	f003 0308 	and.w	r3, r3, #8
 8003d86:	2b08      	cmp	r3, #8
 8003d88:	d136      	bne.n	8003df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	f003 0320 	and.w	r3, r3, #32
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d031      	beq.n	8003df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a07      	ldr	r2, [pc, #28]	; (8003db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d101      	bne.n	8003da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003d9e:	4b07      	ldr	r3, [pc, #28]	; (8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003da0:	e001      	b.n	8003da6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003da2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4902      	ldr	r1, [pc, #8]	; (8003db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dae:	428b      	cmp	r3, r1
 8003db0:	d106      	bne.n	8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003db2:	4b02      	ldr	r3, [pc, #8]	; (8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003db4:	e006      	b.n	8003dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003db6:	bf00      	nop
 8003db8:	40003800 	.word	0x40003800
 8003dbc:	40003400 	.word	0x40003400
 8003dc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dc8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dd8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de6:	f043 0204 	orr.w	r2, r3, #4
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff fdc0 	bl	8003974 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003df4:	e000      	b.n	8003df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003df6:	bf00      	nop
}
 8003df8:	bf00      	nop
 8003dfa:	3720      	adds	r7, #32
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	1c99      	adds	r1, r3, #2
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6251      	str	r1, [r2, #36]	; 0x24
 8003e26:	881a      	ldrh	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d113      	bne.n	8003e6e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e54:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d106      	bne.n	8003e6e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7ff ffc9 	bl	8003e00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e6e:	bf00      	nop
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	1c99      	adds	r1, r3, #2
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6251      	str	r1, [r2, #36]	; 0x24
 8003e8a:	8819      	ldrh	r1, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a1d      	ldr	r2, [pc, #116]	; (8003f08 <I2SEx_TxISR_I2SExt+0x90>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d101      	bne.n	8003e9a <I2SEx_TxISR_I2SExt+0x22>
 8003e96:	4b1d      	ldr	r3, [pc, #116]	; (8003f0c <I2SEx_TxISR_I2SExt+0x94>)
 8003e98:	e001      	b.n	8003e9e <I2SEx_TxISR_I2SExt+0x26>
 8003e9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e9e:	460a      	mov	r2, r1
 8003ea0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d121      	bne.n	8003efe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a12      	ldr	r2, [pc, #72]	; (8003f08 <I2SEx_TxISR_I2SExt+0x90>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d101      	bne.n	8003ec8 <I2SEx_TxISR_I2SExt+0x50>
 8003ec4:	4b11      	ldr	r3, [pc, #68]	; (8003f0c <I2SEx_TxISR_I2SExt+0x94>)
 8003ec6:	e001      	b.n	8003ecc <I2SEx_TxISR_I2SExt+0x54>
 8003ec8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	490d      	ldr	r1, [pc, #52]	; (8003f08 <I2SEx_TxISR_I2SExt+0x90>)
 8003ed4:	428b      	cmp	r3, r1
 8003ed6:	d101      	bne.n	8003edc <I2SEx_TxISR_I2SExt+0x64>
 8003ed8:	4b0c      	ldr	r3, [pc, #48]	; (8003f0c <I2SEx_TxISR_I2SExt+0x94>)
 8003eda:	e001      	b.n	8003ee0 <I2SEx_TxISR_I2SExt+0x68>
 8003edc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ee0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ee4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d106      	bne.n	8003efe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff ff81 	bl	8003e00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003efe:	bf00      	nop
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40003800 	.word	0x40003800
 8003f0c:	40003400 	.word	0x40003400

08003f10 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68d8      	ldr	r0, [r3, #12]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	1c99      	adds	r1, r3, #2
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003f28:	b282      	uxth	r2, r0
 8003f2a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d113      	bne.n	8003f6c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f52:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d106      	bne.n	8003f6c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff ff4a 	bl	8003e00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f6c:	bf00      	nop
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a20      	ldr	r2, [pc, #128]	; (8004004 <I2SEx_RxISR_I2SExt+0x90>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d101      	bne.n	8003f8a <I2SEx_RxISR_I2SExt+0x16>
 8003f86:	4b20      	ldr	r3, [pc, #128]	; (8004008 <I2SEx_RxISR_I2SExt+0x94>)
 8003f88:	e001      	b.n	8003f8e <I2SEx_RxISR_I2SExt+0x1a>
 8003f8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f8e:	68d8      	ldr	r0, [r3, #12]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f94:	1c99      	adds	r1, r3, #2
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003f9a:	b282      	uxth	r2, r0
 8003f9c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d121      	bne.n	8003ffa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a12      	ldr	r2, [pc, #72]	; (8004004 <I2SEx_RxISR_I2SExt+0x90>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d101      	bne.n	8003fc4 <I2SEx_RxISR_I2SExt+0x50>
 8003fc0:	4b11      	ldr	r3, [pc, #68]	; (8004008 <I2SEx_RxISR_I2SExt+0x94>)
 8003fc2:	e001      	b.n	8003fc8 <I2SEx_RxISR_I2SExt+0x54>
 8003fc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	490d      	ldr	r1, [pc, #52]	; (8004004 <I2SEx_RxISR_I2SExt+0x90>)
 8003fd0:	428b      	cmp	r3, r1
 8003fd2:	d101      	bne.n	8003fd8 <I2SEx_RxISR_I2SExt+0x64>
 8003fd4:	4b0c      	ldr	r3, [pc, #48]	; (8004008 <I2SEx_RxISR_I2SExt+0x94>)
 8003fd6:	e001      	b.n	8003fdc <I2SEx_RxISR_I2SExt+0x68>
 8003fd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fdc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fe0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d106      	bne.n	8003ffa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff ff03 	bl	8003e00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ffa:	bf00      	nop
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	40003800 	.word	0x40003800
 8004008:	40003400 	.word	0x40003400

0800400c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e314      	b.n	8004648 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b0f      	cmp	r3, #15
 8004024:	d903      	bls.n	800402e <HAL_RCC_OscConfig+0x22>
 8004026:	21e6      	movs	r1, #230	; 0xe6
 8004028:	4897      	ldr	r0, [pc, #604]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 800402a:	f7fc fe90 	bl	8000d4e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 8088 	beq.w	800414c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00d      	beq.n	8004060 <HAL_RCC_OscConfig+0x54>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800404c:	d008      	beq.n	8004060 <HAL_RCC_OscConfig+0x54>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004056:	d003      	beq.n	8004060 <HAL_RCC_OscConfig+0x54>
 8004058:	21eb      	movs	r1, #235	; 0xeb
 800405a:	488b      	ldr	r0, [pc, #556]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 800405c:	f7fc fe77 	bl	8000d4e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004060:	4b8a      	ldr	r3, [pc, #552]	; (800428c <HAL_RCC_OscConfig+0x280>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 030c 	and.w	r3, r3, #12
 8004068:	2b04      	cmp	r3, #4
 800406a:	d00c      	beq.n	8004086 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800406c:	4b87      	ldr	r3, [pc, #540]	; (800428c <HAL_RCC_OscConfig+0x280>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004074:	2b08      	cmp	r3, #8
 8004076:	d112      	bne.n	800409e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004078:	4b84      	ldr	r3, [pc, #528]	; (800428c <HAL_RCC_OscConfig+0x280>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004080:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004084:	d10b      	bne.n	800409e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004086:	4b81      	ldr	r3, [pc, #516]	; (800428c <HAL_RCC_OscConfig+0x280>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d05b      	beq.n	800414a <HAL_RCC_OscConfig+0x13e>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d157      	bne.n	800414a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e2d4      	b.n	8004648 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a6:	d106      	bne.n	80040b6 <HAL_RCC_OscConfig+0xaa>
 80040a8:	4b78      	ldr	r3, [pc, #480]	; (800428c <HAL_RCC_OscConfig+0x280>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a77      	ldr	r2, [pc, #476]	; (800428c <HAL_RCC_OscConfig+0x280>)
 80040ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b2:	6013      	str	r3, [r2, #0]
 80040b4:	e01d      	b.n	80040f2 <HAL_RCC_OscConfig+0xe6>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040be:	d10c      	bne.n	80040da <HAL_RCC_OscConfig+0xce>
 80040c0:	4b72      	ldr	r3, [pc, #456]	; (800428c <HAL_RCC_OscConfig+0x280>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a71      	ldr	r2, [pc, #452]	; (800428c <HAL_RCC_OscConfig+0x280>)
 80040c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040ca:	6013      	str	r3, [r2, #0]
 80040cc:	4b6f      	ldr	r3, [pc, #444]	; (800428c <HAL_RCC_OscConfig+0x280>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a6e      	ldr	r2, [pc, #440]	; (800428c <HAL_RCC_OscConfig+0x280>)
 80040d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	e00b      	b.n	80040f2 <HAL_RCC_OscConfig+0xe6>
 80040da:	4b6c      	ldr	r3, [pc, #432]	; (800428c <HAL_RCC_OscConfig+0x280>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a6b      	ldr	r2, [pc, #428]	; (800428c <HAL_RCC_OscConfig+0x280>)
 80040e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	4b69      	ldr	r3, [pc, #420]	; (800428c <HAL_RCC_OscConfig+0x280>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a68      	ldr	r2, [pc, #416]	; (800428c <HAL_RCC_OscConfig+0x280>)
 80040ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d013      	beq.n	8004122 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fa:	f7fc ffe5 	bl	80010c8 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004102:	f7fc ffe1 	bl	80010c8 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b64      	cmp	r3, #100	; 0x64
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e299      	b.n	8004648 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004114:	4b5d      	ldr	r3, [pc, #372]	; (800428c <HAL_RCC_OscConfig+0x280>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0f0      	beq.n	8004102 <HAL_RCC_OscConfig+0xf6>
 8004120:	e014      	b.n	800414c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004122:	f7fc ffd1 	bl	80010c8 <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004128:	e008      	b.n	800413c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800412a:	f7fc ffcd 	bl	80010c8 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b64      	cmp	r3, #100	; 0x64
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e285      	b.n	8004648 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800413c:	4b53      	ldr	r3, [pc, #332]	; (800428c <HAL_RCC_OscConfig+0x280>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1f0      	bne.n	800412a <HAL_RCC_OscConfig+0x11e>
 8004148:	e000      	b.n	800414c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800414a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d079      	beq.n	800424c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <HAL_RCC_OscConfig+0x166>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d004      	beq.n	8004172 <HAL_RCC_OscConfig+0x166>
 8004168:	f240 111d 	movw	r1, #285	; 0x11d
 800416c:	4846      	ldr	r0, [pc, #280]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 800416e:	f7fc fdee 	bl	8000d4e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	2b1f      	cmp	r3, #31
 8004178:	d904      	bls.n	8004184 <HAL_RCC_OscConfig+0x178>
 800417a:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800417e:	4842      	ldr	r0, [pc, #264]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 8004180:	f7fc fde5 	bl	8000d4e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004184:	4b41      	ldr	r3, [pc, #260]	; (800428c <HAL_RCC_OscConfig+0x280>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 030c 	and.w	r3, r3, #12
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00b      	beq.n	80041a8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004190:	4b3e      	ldr	r3, [pc, #248]	; (800428c <HAL_RCC_OscConfig+0x280>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004198:	2b08      	cmp	r3, #8
 800419a:	d11c      	bne.n	80041d6 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800419c:	4b3b      	ldr	r3, [pc, #236]	; (800428c <HAL_RCC_OscConfig+0x280>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d116      	bne.n	80041d6 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041a8:	4b38      	ldr	r3, [pc, #224]	; (800428c <HAL_RCC_OscConfig+0x280>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <HAL_RCC_OscConfig+0x1b4>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d001      	beq.n	80041c0 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e243      	b.n	8004648 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c0:	4b32      	ldr	r3, [pc, #200]	; (800428c <HAL_RCC_OscConfig+0x280>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	492f      	ldr	r1, [pc, #188]	; (800428c <HAL_RCC_OscConfig+0x280>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041d4:	e03a      	b.n	800424c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d020      	beq.n	8004220 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041de:	4b2c      	ldr	r3, [pc, #176]	; (8004290 <HAL_RCC_OscConfig+0x284>)
 80041e0:	2201      	movs	r2, #1
 80041e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e4:	f7fc ff70 	bl	80010c8 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041ec:	f7fc ff6c 	bl	80010c8 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e224      	b.n	8004648 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fe:	4b23      	ldr	r3, [pc, #140]	; (800428c <HAL_RCC_OscConfig+0x280>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0f0      	beq.n	80041ec <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800420a:	4b20      	ldr	r3, [pc, #128]	; (800428c <HAL_RCC_OscConfig+0x280>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	491c      	ldr	r1, [pc, #112]	; (800428c <HAL_RCC_OscConfig+0x280>)
 800421a:	4313      	orrs	r3, r2
 800421c:	600b      	str	r3, [r1, #0]
 800421e:	e015      	b.n	800424c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004220:	4b1b      	ldr	r3, [pc, #108]	; (8004290 <HAL_RCC_OscConfig+0x284>)
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004226:	f7fc ff4f 	bl	80010c8 <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800422e:	f7fc ff4b 	bl	80010c8 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e203      	b.n	8004648 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004240:	4b12      	ldr	r3, [pc, #72]	; (800428c <HAL_RCC_OscConfig+0x280>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1f0      	bne.n	800422e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b00      	cmp	r3, #0
 8004256:	d045      	beq.n	80042e4 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d008      	beq.n	8004272 <HAL_RCC_OscConfig+0x266>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d004      	beq.n	8004272 <HAL_RCC_OscConfig+0x266>
 8004268:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800426c:	4806      	ldr	r0, [pc, #24]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 800426e:	f7fc fd6e 	bl	8000d4e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d01e      	beq.n	80042b8 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800427a:	4b06      	ldr	r3, [pc, #24]	; (8004294 <HAL_RCC_OscConfig+0x288>)
 800427c:	2201      	movs	r2, #1
 800427e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004280:	f7fc ff22 	bl	80010c8 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004286:	e010      	b.n	80042aa <HAL_RCC_OscConfig+0x29e>
 8004288:	0800a41c 	.word	0x0800a41c
 800428c:	40023800 	.word	0x40023800
 8004290:	42470000 	.word	0x42470000
 8004294:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004298:	f7fc ff16 	bl	80010c8 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e1ce      	b.n	8004648 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042aa:	4b5e      	ldr	r3, [pc, #376]	; (8004424 <HAL_RCC_OscConfig+0x418>)
 80042ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0f0      	beq.n	8004298 <HAL_RCC_OscConfig+0x28c>
 80042b6:	e015      	b.n	80042e4 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042b8:	4b5b      	ldr	r3, [pc, #364]	; (8004428 <HAL_RCC_OscConfig+0x41c>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042be:	f7fc ff03 	bl	80010c8 <HAL_GetTick>
 80042c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042c4:	e008      	b.n	80042d8 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042c6:	f7fc feff 	bl	80010c8 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e1b7      	b.n	8004648 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d8:	4b52      	ldr	r3, [pc, #328]	; (8004424 <HAL_RCC_OscConfig+0x418>)
 80042da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1f0      	bne.n	80042c6 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 80b0 	beq.w	8004452 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042f2:	2300      	movs	r3, #0
 80042f4:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00c      	beq.n	8004318 <HAL_RCC_OscConfig+0x30c>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d008      	beq.n	8004318 <HAL_RCC_OscConfig+0x30c>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	2b05      	cmp	r3, #5
 800430c:	d004      	beq.n	8004318 <HAL_RCC_OscConfig+0x30c>
 800430e:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8004312:	4846      	ldr	r0, [pc, #280]	; (800442c <HAL_RCC_OscConfig+0x420>)
 8004314:	f7fc fd1b 	bl	8000d4e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004318:	4b42      	ldr	r3, [pc, #264]	; (8004424 <HAL_RCC_OscConfig+0x418>)
 800431a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10f      	bne.n	8004344 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004324:	2300      	movs	r3, #0
 8004326:	60bb      	str	r3, [r7, #8]
 8004328:	4b3e      	ldr	r3, [pc, #248]	; (8004424 <HAL_RCC_OscConfig+0x418>)
 800432a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432c:	4a3d      	ldr	r2, [pc, #244]	; (8004424 <HAL_RCC_OscConfig+0x418>)
 800432e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004332:	6413      	str	r3, [r2, #64]	; 0x40
 8004334:	4b3b      	ldr	r3, [pc, #236]	; (8004424 <HAL_RCC_OscConfig+0x418>)
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004340:	2301      	movs	r3, #1
 8004342:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004344:	4b3a      	ldr	r3, [pc, #232]	; (8004430 <HAL_RCC_OscConfig+0x424>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434c:	2b00      	cmp	r3, #0
 800434e:	d118      	bne.n	8004382 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004350:	4b37      	ldr	r3, [pc, #220]	; (8004430 <HAL_RCC_OscConfig+0x424>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a36      	ldr	r2, [pc, #216]	; (8004430 <HAL_RCC_OscConfig+0x424>)
 8004356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800435a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800435c:	f7fc feb4 	bl	80010c8 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004364:	f7fc feb0 	bl	80010c8 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e168      	b.n	8004648 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004376:	4b2e      	ldr	r3, [pc, #184]	; (8004430 <HAL_RCC_OscConfig+0x424>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0f0      	beq.n	8004364 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d106      	bne.n	8004398 <HAL_RCC_OscConfig+0x38c>
 800438a:	4b26      	ldr	r3, [pc, #152]	; (8004424 <HAL_RCC_OscConfig+0x418>)
 800438c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438e:	4a25      	ldr	r2, [pc, #148]	; (8004424 <HAL_RCC_OscConfig+0x418>)
 8004390:	f043 0301 	orr.w	r3, r3, #1
 8004394:	6713      	str	r3, [r2, #112]	; 0x70
 8004396:	e01c      	b.n	80043d2 <HAL_RCC_OscConfig+0x3c6>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	2b05      	cmp	r3, #5
 800439e:	d10c      	bne.n	80043ba <HAL_RCC_OscConfig+0x3ae>
 80043a0:	4b20      	ldr	r3, [pc, #128]	; (8004424 <HAL_RCC_OscConfig+0x418>)
 80043a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a4:	4a1f      	ldr	r2, [pc, #124]	; (8004424 <HAL_RCC_OscConfig+0x418>)
 80043a6:	f043 0304 	orr.w	r3, r3, #4
 80043aa:	6713      	str	r3, [r2, #112]	; 0x70
 80043ac:	4b1d      	ldr	r3, [pc, #116]	; (8004424 <HAL_RCC_OscConfig+0x418>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b0:	4a1c      	ldr	r2, [pc, #112]	; (8004424 <HAL_RCC_OscConfig+0x418>)
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	6713      	str	r3, [r2, #112]	; 0x70
 80043b8:	e00b      	b.n	80043d2 <HAL_RCC_OscConfig+0x3c6>
 80043ba:	4b1a      	ldr	r3, [pc, #104]	; (8004424 <HAL_RCC_OscConfig+0x418>)
 80043bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043be:	4a19      	ldr	r2, [pc, #100]	; (8004424 <HAL_RCC_OscConfig+0x418>)
 80043c0:	f023 0301 	bic.w	r3, r3, #1
 80043c4:	6713      	str	r3, [r2, #112]	; 0x70
 80043c6:	4b17      	ldr	r3, [pc, #92]	; (8004424 <HAL_RCC_OscConfig+0x418>)
 80043c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ca:	4a16      	ldr	r2, [pc, #88]	; (8004424 <HAL_RCC_OscConfig+0x418>)
 80043cc:	f023 0304 	bic.w	r3, r3, #4
 80043d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d015      	beq.n	8004406 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043da:	f7fc fe75 	bl	80010c8 <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e0:	e00a      	b.n	80043f8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043e2:	f7fc fe71 	bl	80010c8 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e127      	b.n	8004648 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f8:	4b0a      	ldr	r3, [pc, #40]	; (8004424 <HAL_RCC_OscConfig+0x418>)
 80043fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0ee      	beq.n	80043e2 <HAL_RCC_OscConfig+0x3d6>
 8004404:	e01c      	b.n	8004440 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004406:	f7fc fe5f 	bl	80010c8 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800440c:	e012      	b.n	8004434 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800440e:	f7fc fe5b 	bl	80010c8 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	f241 3288 	movw	r2, #5000	; 0x1388
 800441c:	4293      	cmp	r3, r2
 800441e:	d909      	bls.n	8004434 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e111      	b.n	8004648 <HAL_RCC_OscConfig+0x63c>
 8004424:	40023800 	.word	0x40023800
 8004428:	42470e80 	.word	0x42470e80
 800442c:	0800a41c 	.word	0x0800a41c
 8004430:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004434:	4b86      	ldr	r3, [pc, #536]	; (8004650 <HAL_RCC_OscConfig+0x644>)
 8004436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e6      	bne.n	800440e <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004440:	7dfb      	ldrb	r3, [r7, #23]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d105      	bne.n	8004452 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004446:	4b82      	ldr	r3, [pc, #520]	; (8004650 <HAL_RCC_OscConfig+0x644>)
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	4a81      	ldr	r2, [pc, #516]	; (8004650 <HAL_RCC_OscConfig+0x644>)
 800444c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004450:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00c      	beq.n	8004474 <HAL_RCC_OscConfig+0x468>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d008      	beq.n	8004474 <HAL_RCC_OscConfig+0x468>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	2b02      	cmp	r3, #2
 8004468:	d004      	beq.n	8004474 <HAL_RCC_OscConfig+0x468>
 800446a:	f240 11cd 	movw	r1, #461	; 0x1cd
 800446e:	4879      	ldr	r0, [pc, #484]	; (8004654 <HAL_RCC_OscConfig+0x648>)
 8004470:	f7fc fc6d 	bl	8000d4e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 80e4 	beq.w	8004646 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800447e:	4b74      	ldr	r3, [pc, #464]	; (8004650 <HAL_RCC_OscConfig+0x644>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 030c 	and.w	r3, r3, #12
 8004486:	2b08      	cmp	r3, #8
 8004488:	f000 80a5 	beq.w	80045d6 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	2b02      	cmp	r3, #2
 8004492:	f040 8089 	bne.w	80045a8 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d009      	beq.n	80044b2 <HAL_RCC_OscConfig+0x4a6>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044a6:	d004      	beq.n	80044b2 <HAL_RCC_OscConfig+0x4a6>
 80044a8:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80044ac:	4869      	ldr	r0, [pc, #420]	; (8004654 <HAL_RCC_OscConfig+0x648>)
 80044ae:	f7fc fc4e 	bl	8000d4e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	2b3f      	cmp	r3, #63	; 0x3f
 80044b8:	d904      	bls.n	80044c4 <HAL_RCC_OscConfig+0x4b8>
 80044ba:	f240 11d7 	movw	r1, #471	; 0x1d7
 80044be:	4865      	ldr	r0, [pc, #404]	; (8004654 <HAL_RCC_OscConfig+0x648>)
 80044c0:	f7fc fc45 	bl	8000d4e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	2b31      	cmp	r3, #49	; 0x31
 80044ca:	d904      	bls.n	80044d6 <HAL_RCC_OscConfig+0x4ca>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80044d4:	d904      	bls.n	80044e0 <HAL_RCC_OscConfig+0x4d4>
 80044d6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80044da:	485e      	ldr	r0, [pc, #376]	; (8004654 <HAL_RCC_OscConfig+0x648>)
 80044dc:	f7fc fc37 	bl	8000d4e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d010      	beq.n	800450a <HAL_RCC_OscConfig+0x4fe>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d00c      	beq.n	800450a <HAL_RCC_OscConfig+0x4fe>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f4:	2b06      	cmp	r3, #6
 80044f6:	d008      	beq.n	800450a <HAL_RCC_OscConfig+0x4fe>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fc:	2b08      	cmp	r3, #8
 80044fe:	d004      	beq.n	800450a <HAL_RCC_OscConfig+0x4fe>
 8004500:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004504:	4853      	ldr	r0, [pc, #332]	; (8004654 <HAL_RCC_OscConfig+0x648>)
 8004506:	f7fc fc22 	bl	8000d4e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450e:	2b01      	cmp	r3, #1
 8004510:	d903      	bls.n	800451a <HAL_RCC_OscConfig+0x50e>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004516:	2b0f      	cmp	r3, #15
 8004518:	d904      	bls.n	8004524 <HAL_RCC_OscConfig+0x518>
 800451a:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800451e:	484d      	ldr	r0, [pc, #308]	; (8004654 <HAL_RCC_OscConfig+0x648>)
 8004520:	f7fc fc15 	bl	8000d4e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004524:	4b4c      	ldr	r3, [pc, #304]	; (8004658 <HAL_RCC_OscConfig+0x64c>)
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452a:	f7fc fdcd 	bl	80010c8 <HAL_GetTick>
 800452e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004530:	e008      	b.n	8004544 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004532:	f7fc fdc9 	bl	80010c8 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e081      	b.n	8004648 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004544:	4b42      	ldr	r3, [pc, #264]	; (8004650 <HAL_RCC_OscConfig+0x644>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1f0      	bne.n	8004532 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	69da      	ldr	r2, [r3, #28]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	431a      	orrs	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	019b      	lsls	r3, r3, #6
 8004560:	431a      	orrs	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004566:	085b      	lsrs	r3, r3, #1
 8004568:	3b01      	subs	r3, #1
 800456a:	041b      	lsls	r3, r3, #16
 800456c:	431a      	orrs	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004572:	061b      	lsls	r3, r3, #24
 8004574:	4936      	ldr	r1, [pc, #216]	; (8004650 <HAL_RCC_OscConfig+0x644>)
 8004576:	4313      	orrs	r3, r2
 8004578:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800457a:	4b37      	ldr	r3, [pc, #220]	; (8004658 <HAL_RCC_OscConfig+0x64c>)
 800457c:	2201      	movs	r2, #1
 800457e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004580:	f7fc fda2 	bl	80010c8 <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004588:	f7fc fd9e 	bl	80010c8 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e056      	b.n	8004648 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800459a:	4b2d      	ldr	r3, [pc, #180]	; (8004650 <HAL_RCC_OscConfig+0x644>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0f0      	beq.n	8004588 <HAL_RCC_OscConfig+0x57c>
 80045a6:	e04e      	b.n	8004646 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a8:	4b2b      	ldr	r3, [pc, #172]	; (8004658 <HAL_RCC_OscConfig+0x64c>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ae:	f7fc fd8b 	bl	80010c8 <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b4:	e008      	b.n	80045c8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045b6:	f7fc fd87 	bl	80010c8 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e03f      	b.n	8004648 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c8:	4b21      	ldr	r3, [pc, #132]	; (8004650 <HAL_RCC_OscConfig+0x644>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1f0      	bne.n	80045b6 <HAL_RCC_OscConfig+0x5aa>
 80045d4:	e037      	b.n	8004646 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d101      	bne.n	80045e2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e032      	b.n	8004648 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045e2:	4b1b      	ldr	r3, [pc, #108]	; (8004650 <HAL_RCC_OscConfig+0x644>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d028      	beq.n	8004642 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d121      	bne.n	8004642 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004608:	429a      	cmp	r2, r3
 800460a:	d11a      	bne.n	8004642 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004612:	4013      	ands	r3, r2
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004618:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800461a:	4293      	cmp	r3, r2
 800461c:	d111      	bne.n	8004642 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004628:	085b      	lsrs	r3, r3, #1
 800462a:	3b01      	subs	r3, #1
 800462c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800462e:	429a      	cmp	r2, r3
 8004630:	d107      	bne.n	8004642 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800463e:	429a      	cmp	r2, r3
 8004640:	d001      	beq.n	8004646 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3718      	adds	r7, #24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	40023800 	.word	0x40023800
 8004654:	0800a41c 	.word	0x0800a41c
 8004658:	42470060 	.word	0x42470060

0800465c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e174      	b.n	800495a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <HAL_RCC_ClockConfig+0x24>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b0f      	cmp	r3, #15
 800467e:	d904      	bls.n	800468a <HAL_RCC_ClockConfig+0x2e>
 8004680:	f240 215a 	movw	r1, #602	; 0x25a
 8004684:	487b      	ldr	r0, [pc, #492]	; (8004874 <HAL_RCC_ClockConfig+0x218>)
 8004686:	f7fc fb62 	bl	8000d4e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d019      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x68>
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d016      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x68>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b02      	cmp	r3, #2
 800469a:	d013      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x68>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	2b03      	cmp	r3, #3
 80046a0:	d010      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x68>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d00d      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x68>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	2b05      	cmp	r3, #5
 80046ac:	d00a      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x68>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b06      	cmp	r3, #6
 80046b2:	d007      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x68>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	2b07      	cmp	r3, #7
 80046b8:	d004      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x68>
 80046ba:	f240 215b 	movw	r1, #603	; 0x25b
 80046be:	486d      	ldr	r0, [pc, #436]	; (8004874 <HAL_RCC_ClockConfig+0x218>)
 80046c0:	f7fc fb45 	bl	8000d4e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046c4:	4b6c      	ldr	r3, [pc, #432]	; (8004878 <HAL_RCC_ClockConfig+0x21c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0307 	and.w	r3, r3, #7
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d90c      	bls.n	80046ec <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d2:	4b69      	ldr	r3, [pc, #420]	; (8004878 <HAL_RCC_ClockConfig+0x21c>)
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	b2d2      	uxtb	r2, r2
 80046d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046da:	4b67      	ldr	r3, [pc, #412]	; (8004878 <HAL_RCC_ClockConfig+0x21c>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d001      	beq.n	80046ec <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e136      	b.n	800495a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d049      	beq.n	800478c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	d005      	beq.n	8004710 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004704:	4b5d      	ldr	r3, [pc, #372]	; (800487c <HAL_RCC_ClockConfig+0x220>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	4a5c      	ldr	r2, [pc, #368]	; (800487c <HAL_RCC_ClockConfig+0x220>)
 800470a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800470e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0308 	and.w	r3, r3, #8
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800471c:	4b57      	ldr	r3, [pc, #348]	; (800487c <HAL_RCC_ClockConfig+0x220>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	4a56      	ldr	r2, [pc, #344]	; (800487c <HAL_RCC_ClockConfig+0x220>)
 8004722:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004726:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d024      	beq.n	800477a <HAL_RCC_ClockConfig+0x11e>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	2b80      	cmp	r3, #128	; 0x80
 8004736:	d020      	beq.n	800477a <HAL_RCC_ClockConfig+0x11e>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	2b90      	cmp	r3, #144	; 0x90
 800473e:	d01c      	beq.n	800477a <HAL_RCC_ClockConfig+0x11e>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2ba0      	cmp	r3, #160	; 0xa0
 8004746:	d018      	beq.n	800477a <HAL_RCC_ClockConfig+0x11e>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	2bb0      	cmp	r3, #176	; 0xb0
 800474e:	d014      	beq.n	800477a <HAL_RCC_ClockConfig+0x11e>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	2bc0      	cmp	r3, #192	; 0xc0
 8004756:	d010      	beq.n	800477a <HAL_RCC_ClockConfig+0x11e>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	2bd0      	cmp	r3, #208	; 0xd0
 800475e:	d00c      	beq.n	800477a <HAL_RCC_ClockConfig+0x11e>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	2be0      	cmp	r3, #224	; 0xe0
 8004766:	d008      	beq.n	800477a <HAL_RCC_ClockConfig+0x11e>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	2bf0      	cmp	r3, #240	; 0xf0
 800476e:	d004      	beq.n	800477a <HAL_RCC_ClockConfig+0x11e>
 8004770:	f240 217e 	movw	r1, #638	; 0x27e
 8004774:	483f      	ldr	r0, [pc, #252]	; (8004874 <HAL_RCC_ClockConfig+0x218>)
 8004776:	f7fc faea 	bl	8000d4e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800477a:	4b40      	ldr	r3, [pc, #256]	; (800487c <HAL_RCC_ClockConfig+0x220>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	493d      	ldr	r1, [pc, #244]	; (800487c <HAL_RCC_ClockConfig+0x220>)
 8004788:	4313      	orrs	r3, r2
 800478a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	d059      	beq.n	800484c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d010      	beq.n	80047c2 <HAL_RCC_ClockConfig+0x166>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d00c      	beq.n	80047c2 <HAL_RCC_ClockConfig+0x166>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d008      	beq.n	80047c2 <HAL_RCC_ClockConfig+0x166>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b03      	cmp	r3, #3
 80047b6:	d004      	beq.n	80047c2 <HAL_RCC_ClockConfig+0x166>
 80047b8:	f240 2185 	movw	r1, #645	; 0x285
 80047bc:	482d      	ldr	r0, [pc, #180]	; (8004874 <HAL_RCC_ClockConfig+0x218>)
 80047be:	f7fc fac6 	bl	8000d4e <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d107      	bne.n	80047da <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ca:	4b2c      	ldr	r3, [pc, #176]	; (800487c <HAL_RCC_ClockConfig+0x220>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d119      	bne.n	800480a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e0bf      	b.n	800495a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d003      	beq.n	80047ea <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047e6:	2b03      	cmp	r3, #3
 80047e8:	d107      	bne.n	80047fa <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ea:	4b24      	ldr	r3, [pc, #144]	; (800487c <HAL_RCC_ClockConfig+0x220>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d109      	bne.n	800480a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e0af      	b.n	800495a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047fa:	4b20      	ldr	r3, [pc, #128]	; (800487c <HAL_RCC_ClockConfig+0x220>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e0a7      	b.n	800495a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800480a:	4b1c      	ldr	r3, [pc, #112]	; (800487c <HAL_RCC_ClockConfig+0x220>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f023 0203 	bic.w	r2, r3, #3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	4919      	ldr	r1, [pc, #100]	; (800487c <HAL_RCC_ClockConfig+0x220>)
 8004818:	4313      	orrs	r3, r2
 800481a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800481c:	f7fc fc54 	bl	80010c8 <HAL_GetTick>
 8004820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004822:	e00a      	b.n	800483a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004824:	f7fc fc50 	bl	80010c8 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004832:	4293      	cmp	r3, r2
 8004834:	d901      	bls.n	800483a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e08f      	b.n	800495a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800483a:	4b10      	ldr	r3, [pc, #64]	; (800487c <HAL_RCC_ClockConfig+0x220>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 020c 	and.w	r2, r3, #12
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	429a      	cmp	r2, r3
 800484a:	d1eb      	bne.n	8004824 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800484c:	4b0a      	ldr	r3, [pc, #40]	; (8004878 <HAL_RCC_ClockConfig+0x21c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d212      	bcs.n	8004880 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485a:	4b07      	ldr	r3, [pc, #28]	; (8004878 <HAL_RCC_ClockConfig+0x21c>)
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004862:	4b05      	ldr	r3, [pc, #20]	; (8004878 <HAL_RCC_ClockConfig+0x21c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	429a      	cmp	r2, r3
 800486e:	d007      	beq.n	8004880 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e072      	b.n	800495a <HAL_RCC_ClockConfig+0x2fe>
 8004874:	0800a41c 	.word	0x0800a41c
 8004878:	40023c00 	.word	0x40023c00
 800487c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d025      	beq.n	80048d8 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d018      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x26a>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800489c:	d013      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x26a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80048a6:	d00e      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x26a>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80048b0:	d009      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x26a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80048ba:	d004      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x26a>
 80048bc:	f240 21c3 	movw	r1, #707	; 0x2c3
 80048c0:	4828      	ldr	r0, [pc, #160]	; (8004964 <HAL_RCC_ClockConfig+0x308>)
 80048c2:	f7fc fa44 	bl	8000d4e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048c6:	4b28      	ldr	r3, [pc, #160]	; (8004968 <HAL_RCC_ClockConfig+0x30c>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	4925      	ldr	r1, [pc, #148]	; (8004968 <HAL_RCC_ClockConfig+0x30c>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d026      	beq.n	8004932 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d018      	beq.n	800491e <HAL_RCC_ClockConfig+0x2c2>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f4:	d013      	beq.n	800491e <HAL_RCC_ClockConfig+0x2c2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80048fe:	d00e      	beq.n	800491e <HAL_RCC_ClockConfig+0x2c2>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004908:	d009      	beq.n	800491e <HAL_RCC_ClockConfig+0x2c2>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004912:	d004      	beq.n	800491e <HAL_RCC_ClockConfig+0x2c2>
 8004914:	f240 21ca 	movw	r1, #714	; 0x2ca
 8004918:	4812      	ldr	r0, [pc, #72]	; (8004964 <HAL_RCC_ClockConfig+0x308>)
 800491a:	f7fc fa18 	bl	8000d4e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800491e:	4b12      	ldr	r3, [pc, #72]	; (8004968 <HAL_RCC_ClockConfig+0x30c>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	490e      	ldr	r1, [pc, #56]	; (8004968 <HAL_RCC_ClockConfig+0x30c>)
 800492e:	4313      	orrs	r3, r2
 8004930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004932:	f000 f821 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 8004936:	4602      	mov	r2, r0
 8004938:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <HAL_RCC_ClockConfig+0x30c>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	091b      	lsrs	r3, r3, #4
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	490a      	ldr	r1, [pc, #40]	; (800496c <HAL_RCC_ClockConfig+0x310>)
 8004944:	5ccb      	ldrb	r3, [r1, r3]
 8004946:	fa22 f303 	lsr.w	r3, r2, r3
 800494a:	4a09      	ldr	r2, [pc, #36]	; (8004970 <HAL_RCC_ClockConfig+0x314>)
 800494c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800494e:	4b09      	ldr	r3, [pc, #36]	; (8004974 <HAL_RCC_ClockConfig+0x318>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f7fc fb74 	bl	8001040 <HAL_InitTick>

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	0800a41c 	.word	0x0800a41c
 8004968:	40023800 	.word	0x40023800
 800496c:	0800a4cc 	.word	0x0800a4cc
 8004970:	20000000 	.word	0x20000000
 8004974:	20000004 	.word	0x20000004

08004978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800497c:	b094      	sub	sp, #80	; 0x50
 800497e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	647b      	str	r3, [r7, #68]	; 0x44
 8004984:	2300      	movs	r3, #0
 8004986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004988:	2300      	movs	r3, #0
 800498a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004990:	4b79      	ldr	r3, [pc, #484]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 030c 	and.w	r3, r3, #12
 8004998:	2b08      	cmp	r3, #8
 800499a:	d00d      	beq.n	80049b8 <HAL_RCC_GetSysClockFreq+0x40>
 800499c:	2b08      	cmp	r3, #8
 800499e:	f200 80e1 	bhi.w	8004b64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_RCC_GetSysClockFreq+0x34>
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d003      	beq.n	80049b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80049aa:	e0db      	b.n	8004b64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049ac:	4b73      	ldr	r3, [pc, #460]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x204>)
 80049ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80049b0:	e0db      	b.n	8004b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049b2:	4b73      	ldr	r3, [pc, #460]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x208>)
 80049b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049b6:	e0d8      	b.n	8004b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049b8:	4b6f      	ldr	r3, [pc, #444]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049c2:	4b6d      	ldr	r3, [pc, #436]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d063      	beq.n	8004a96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ce:	4b6a      	ldr	r3, [pc, #424]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	099b      	lsrs	r3, r3, #6
 80049d4:	2200      	movs	r2, #0
 80049d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80049d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80049da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e0:	633b      	str	r3, [r7, #48]	; 0x30
 80049e2:	2300      	movs	r3, #0
 80049e4:	637b      	str	r3, [r7, #52]	; 0x34
 80049e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80049ea:	4622      	mov	r2, r4
 80049ec:	462b      	mov	r3, r5
 80049ee:	f04f 0000 	mov.w	r0, #0
 80049f2:	f04f 0100 	mov.w	r1, #0
 80049f6:	0159      	lsls	r1, r3, #5
 80049f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049fc:	0150      	lsls	r0, r2, #5
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	4621      	mov	r1, r4
 8004a04:	1a51      	subs	r1, r2, r1
 8004a06:	6139      	str	r1, [r7, #16]
 8004a08:	4629      	mov	r1, r5
 8004a0a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	f04f 0300 	mov.w	r3, #0
 8004a18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a1c:	4659      	mov	r1, fp
 8004a1e:	018b      	lsls	r3, r1, #6
 8004a20:	4651      	mov	r1, sl
 8004a22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a26:	4651      	mov	r1, sl
 8004a28:	018a      	lsls	r2, r1, #6
 8004a2a:	4651      	mov	r1, sl
 8004a2c:	ebb2 0801 	subs.w	r8, r2, r1
 8004a30:	4659      	mov	r1, fp
 8004a32:	eb63 0901 	sbc.w	r9, r3, r1
 8004a36:	f04f 0200 	mov.w	r2, #0
 8004a3a:	f04f 0300 	mov.w	r3, #0
 8004a3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a4a:	4690      	mov	r8, r2
 8004a4c:	4699      	mov	r9, r3
 8004a4e:	4623      	mov	r3, r4
 8004a50:	eb18 0303 	adds.w	r3, r8, r3
 8004a54:	60bb      	str	r3, [r7, #8]
 8004a56:	462b      	mov	r3, r5
 8004a58:	eb49 0303 	adc.w	r3, r9, r3
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	f04f 0300 	mov.w	r3, #0
 8004a66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a6a:	4629      	mov	r1, r5
 8004a6c:	024b      	lsls	r3, r1, #9
 8004a6e:	4621      	mov	r1, r4
 8004a70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a74:	4621      	mov	r1, r4
 8004a76:	024a      	lsls	r2, r1, #9
 8004a78:	4610      	mov	r0, r2
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a7e:	2200      	movs	r2, #0
 8004a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a88:	f7fb fc02 	bl	8000290 <__aeabi_uldivmod>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4613      	mov	r3, r2
 8004a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a94:	e058      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a96:	4b38      	ldr	r3, [pc, #224]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	099b      	lsrs	r3, r3, #6
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004aa6:	623b      	str	r3, [r7, #32]
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8004aac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ab0:	4642      	mov	r2, r8
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	f04f 0000 	mov.w	r0, #0
 8004ab8:	f04f 0100 	mov.w	r1, #0
 8004abc:	0159      	lsls	r1, r3, #5
 8004abe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ac2:	0150      	lsls	r0, r2, #5
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4641      	mov	r1, r8
 8004aca:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ace:	4649      	mov	r1, r9
 8004ad0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ae0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ae4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ae8:	ebb2 040a 	subs.w	r4, r2, sl
 8004aec:	eb63 050b 	sbc.w	r5, r3, fp
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	00eb      	lsls	r3, r5, #3
 8004afa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004afe:	00e2      	lsls	r2, r4, #3
 8004b00:	4614      	mov	r4, r2
 8004b02:	461d      	mov	r5, r3
 8004b04:	4643      	mov	r3, r8
 8004b06:	18e3      	adds	r3, r4, r3
 8004b08:	603b      	str	r3, [r7, #0]
 8004b0a:	464b      	mov	r3, r9
 8004b0c:	eb45 0303 	adc.w	r3, r5, r3
 8004b10:	607b      	str	r3, [r7, #4]
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b1e:	4629      	mov	r1, r5
 8004b20:	028b      	lsls	r3, r1, #10
 8004b22:	4621      	mov	r1, r4
 8004b24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b28:	4621      	mov	r1, r4
 8004b2a:	028a      	lsls	r2, r1, #10
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	4619      	mov	r1, r3
 8004b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b32:	2200      	movs	r2, #0
 8004b34:	61bb      	str	r3, [r7, #24]
 8004b36:	61fa      	str	r2, [r7, #28]
 8004b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b3c:	f7fb fba8 	bl	8000290 <__aeabi_uldivmod>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4613      	mov	r3, r2
 8004b46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b48:	4b0b      	ldr	r3, [pc, #44]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	0c1b      	lsrs	r3, r3, #16
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	3301      	adds	r3, #1
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004b58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b62:	e002      	b.n	8004b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b64:	4b05      	ldr	r3, [pc, #20]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x204>)
 8004b66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3750      	adds	r7, #80	; 0x50
 8004b70:	46bd      	mov	sp, r7
 8004b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b76:	bf00      	nop
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	00f42400 	.word	0x00f42400
 8004b80:	007a1200 	.word	0x007a1200

08004b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b88:	4b03      	ldr	r3, [pc, #12]	; (8004b98 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	20000000 	.word	0x20000000

08004b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ba0:	f7ff fff0 	bl	8004b84 <HAL_RCC_GetHCLKFreq>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	0a9b      	lsrs	r3, r3, #10
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	4903      	ldr	r1, [pc, #12]	; (8004bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bb2:	5ccb      	ldrb	r3, [r1, r3]
 8004bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	0800a4dc 	.word	0x0800a4dc

08004bc4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b0f      	cmp	r3, #15
 8004be2:	d904      	bls.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8004be4:	f640 11d7 	movw	r1, #2519	; 0x9d7
 8004be8:	4834      	ldr	r0, [pc, #208]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004bea:	f7fc f8b0 	bl	8000d4e <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d105      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d066      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d903      	bls.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	2b07      	cmp	r3, #7
 8004c14:	d904      	bls.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004c16:	f640 11de 	movw	r1, #2526	; 0x9de
 8004c1a:	4828      	ldr	r0, [pc, #160]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004c1c:	f7fc f897 	bl	8000d4e <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	2b31      	cmp	r3, #49	; 0x31
 8004c26:	d904      	bls.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004c30:	d904      	bls.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004c32:	f640 11df 	movw	r1, #2527	; 0x9df
 8004c36:	4821      	ldr	r0, [pc, #132]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004c38:	f7fc f889 	bl	8000d4e <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d903      	bls.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x88>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2b3f      	cmp	r3, #63	; 0x3f
 8004c4a:	d904      	bls.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8004c4c:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8004c50:	481a      	ldr	r0, [pc, #104]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004c52:	f7fc f87c 	bl	8000d4e <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c56:	4b1a      	ldr	r3, [pc, #104]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c5c:	f7fc fa34 	bl	80010c8 <HAL_GetTick>
 8004c60:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c62:	e008      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c64:	f7fc fa30 	bl	80010c8 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e1b3      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c76:	4b13      	ldr	r3, [pc, #76]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1f0      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	019b      	lsls	r3, r3, #6
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	071b      	lsls	r3, r3, #28
 8004c94:	490b      	ldr	r1, [pc, #44]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c9c:	4b08      	ldr	r3, [pc, #32]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ca2:	f7fc fa11 	bl	80010c8 <HAL_GetTick>
 8004ca6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ca8:	e00e      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004caa:	f7fc fa0d 	bl	80010c8 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d907      	bls.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e190      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004cbc:	0800a454 	.word	0x0800a454
 8004cc0:	42470068 	.word	0x42470068
 8004cc4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cc8:	4b88      	ldr	r3, [pc, #544]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0ea      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 8173 	beq.w	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cea:	f000 80a6 	beq.w	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cf6:	f000 80a0 	beq.w	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	4a7c      	ldr	r2, [pc, #496]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	f000 809a 	beq.w	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	4a7a      	ldr	r2, [pc, #488]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	f000 8094 	beq.w	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	4a78      	ldr	r2, [pc, #480]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	f000 808e 	beq.w	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	4a76      	ldr	r2, [pc, #472]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	f000 8088 	beq.w	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	4a74      	ldr	r2, [pc, #464]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	f000 8082 	beq.w	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	4a72      	ldr	r2, [pc, #456]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d07c      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	4a70      	ldr	r2, [pc, #448]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d077      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	4a6f      	ldr	r2, [pc, #444]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d072      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	4a6d      	ldr	r2, [pc, #436]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d06d      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	4a6c      	ldr	r2, [pc, #432]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d068      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	4a6a      	ldr	r2, [pc, #424]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d063      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	4a69      	ldr	r2, [pc, #420]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d05e      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	4a67      	ldr	r2, [pc, #412]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d059      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	4a66      	ldr	r2, [pc, #408]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d054      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	4a64      	ldr	r2, [pc, #400]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d04f      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	4a63      	ldr	r2, [pc, #396]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d04a      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	4a61      	ldr	r2, [pc, #388]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d045      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	4a60      	ldr	r2, [pc, #384]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d040      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	4a5e      	ldr	r2, [pc, #376]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d03b      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	4a5d      	ldr	r2, [pc, #372]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d036      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	4a5b      	ldr	r2, [pc, #364]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d031      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	4a5a      	ldr	r2, [pc, #360]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d02c      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	4a58      	ldr	r2, [pc, #352]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d027      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	4a57      	ldr	r2, [pc, #348]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d022      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	4a55      	ldr	r2, [pc, #340]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d01d      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	4a54      	ldr	r2, [pc, #336]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d018      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	4a52      	ldr	r2, [pc, #328]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d013      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	4a51      	ldr	r2, [pc, #324]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d00e      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	4a4f      	ldr	r2, [pc, #316]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d009      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	4a4e      	ldr	r2, [pc, #312]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d004      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004e30:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 8004e34:	484c      	ldr	r0, [pc, #304]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8004e36:	f7fb ff8a 	bl	8000d4e <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60fb      	str	r3, [r7, #12]
 8004e3e:	4b2b      	ldr	r3, [pc, #172]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e42:	4a2a      	ldr	r2, [pc, #168]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e48:	6413      	str	r3, [r2, #64]	; 0x40
 8004e4a:	4b28      	ldr	r3, [pc, #160]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e56:	4b45      	ldr	r3, [pc, #276]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a44      	ldr	r2, [pc, #272]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8004e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e60:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e62:	f7fc f931 	bl	80010c8 <HAL_GetTick>
 8004e66:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e68:	e008      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e6a:	f7fc f92d 	bl	80010c8 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e0b0      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e7c:	4b3b      	ldr	r3, [pc, #236]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d0f0      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e88:	4b18      	ldr	r3, [pc, #96]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e90:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d073      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d06c      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ea6:	4b11      	ldr	r3, [pc, #68]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004eb0:	4b2f      	ldr	r3, [pc, #188]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004eb6:	4b2e      	ldr	r3, [pc, #184]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ebc:	4a0b      	ldr	r2, [pc, #44]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ec2:	4b0a      	ldr	r3, [pc, #40]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d158      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004ece:	f7fc f8fb 	bl	80010c8 <HAL_GetTick>
 8004ed2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed4:	e04e      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ed6:	f7fc f8f7 	bl	80010c8 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d945      	bls.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e078      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	00020300 	.word	0x00020300
 8004ef4:	00030300 	.word	0x00030300
 8004ef8:	00040300 	.word	0x00040300
 8004efc:	00050300 	.word	0x00050300
 8004f00:	00060300 	.word	0x00060300
 8004f04:	00070300 	.word	0x00070300
 8004f08:	00080300 	.word	0x00080300
 8004f0c:	00090300 	.word	0x00090300
 8004f10:	000a0300 	.word	0x000a0300
 8004f14:	000b0300 	.word	0x000b0300
 8004f18:	000c0300 	.word	0x000c0300
 8004f1c:	000d0300 	.word	0x000d0300
 8004f20:	000e0300 	.word	0x000e0300
 8004f24:	000f0300 	.word	0x000f0300
 8004f28:	00100300 	.word	0x00100300
 8004f2c:	00110300 	.word	0x00110300
 8004f30:	00120300 	.word	0x00120300
 8004f34:	00130300 	.word	0x00130300
 8004f38:	00140300 	.word	0x00140300
 8004f3c:	00150300 	.word	0x00150300
 8004f40:	00160300 	.word	0x00160300
 8004f44:	00170300 	.word	0x00170300
 8004f48:	00180300 	.word	0x00180300
 8004f4c:	00190300 	.word	0x00190300
 8004f50:	001a0300 	.word	0x001a0300
 8004f54:	001b0300 	.word	0x001b0300
 8004f58:	001c0300 	.word	0x001c0300
 8004f5c:	001d0300 	.word	0x001d0300
 8004f60:	001e0300 	.word	0x001e0300
 8004f64:	001f0300 	.word	0x001f0300
 8004f68:	0800a454 	.word	0x0800a454
 8004f6c:	40007000 	.word	0x40007000
 8004f70:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f74:	4b1c      	ldr	r3, [pc, #112]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0aa      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f8c:	d10d      	bne.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004f8e:	4b16      	ldr	r3, [pc, #88]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa2:	4911      	ldr	r1, [pc, #68]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	608b      	str	r3, [r1, #8]
 8004fa8:	e005      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004faa:	4b0f      	ldr	r3, [pc, #60]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	4a0e      	ldr	r2, [pc, #56]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004fb0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004fb4:	6093      	str	r3, [r2, #8]
 8004fb6:	4b0c      	ldr	r3, [pc, #48]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004fb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fc2:	4909      	ldr	r1, [pc, #36]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0308 	and.w	r3, r3, #8
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	7d1a      	ldrb	r2, [r3, #20]
 8004fd8:	4b04      	ldr	r3, [pc, #16]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8004fda:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	424711e0 	.word	0x424711e0

08004ff0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005004:	2300      	movs	r3, #0
 8005006:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d140      	bne.n	8005090 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800500e:	4b24      	ldr	r3, [pc, #144]	; (80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d005      	beq.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d131      	bne.n	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005024:	4b1f      	ldr	r3, [pc, #124]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005026:	617b      	str	r3, [r7, #20]
          break;
 8005028:	e031      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800502a:	4b1d      	ldr	r3, [pc, #116]	; (80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005032:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005036:	d109      	bne.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005038:	4b19      	ldr	r3, [pc, #100]	; (80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800503a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800503e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005042:	4a19      	ldr	r2, [pc, #100]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005044:	fbb2 f3f3 	udiv	r3, r2, r3
 8005048:	613b      	str	r3, [r7, #16]
 800504a:	e008      	b.n	800505e <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800504c:	4b14      	ldr	r3, [pc, #80]	; (80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800504e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005052:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005056:	4a15      	ldr	r2, [pc, #84]	; (80050ac <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005058:	fbb2 f3f3 	udiv	r3, r2, r3
 800505c:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800505e:	4b10      	ldr	r3, [pc, #64]	; (80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005064:	099b      	lsrs	r3, r3, #6
 8005066:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	fb02 f303 	mul.w	r3, r2, r3
 8005070:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005072:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005078:	0f1b      	lsrs	r3, r3, #28
 800507a:	f003 0307 	and.w	r3, r3, #7
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	fbb2 f3f3 	udiv	r3, r2, r3
 8005084:	617b      	str	r3, [r7, #20]
          break;
 8005086:	e002      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	617b      	str	r3, [r7, #20]
          break;
 800508c:	bf00      	nop
        }
      }
      break;
 800508e:	bf00      	nop
    }
  }
  return frequency;
 8005090:	697b      	ldr	r3, [r7, #20]
}
 8005092:	4618      	mov	r0, r3
 8005094:	371c      	adds	r7, #28
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	40023800 	.word	0x40023800
 80050a4:	00bb8000 	.word	0x00bb8000
 80050a8:	007a1200 	.word	0x007a1200
 80050ac:	00f42400 	.word	0x00f42400

080050b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e18c      	b.n	80053dc <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a75      	ldr	r2, [pc, #468]	; (800529c <HAL_SPI_Init+0x1ec>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d018      	beq.n	80050fe <HAL_SPI_Init+0x4e>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a73      	ldr	r2, [pc, #460]	; (80052a0 <HAL_SPI_Init+0x1f0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d013      	beq.n	80050fe <HAL_SPI_Init+0x4e>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a72      	ldr	r2, [pc, #456]	; (80052a4 <HAL_SPI_Init+0x1f4>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00e      	beq.n	80050fe <HAL_SPI_Init+0x4e>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a70      	ldr	r2, [pc, #448]	; (80052a8 <HAL_SPI_Init+0x1f8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d009      	beq.n	80050fe <HAL_SPI_Init+0x4e>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a6f      	ldr	r2, [pc, #444]	; (80052ac <HAL_SPI_Init+0x1fc>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d004      	beq.n	80050fe <HAL_SPI_Init+0x4e>
 80050f4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80050f8:	486d      	ldr	r0, [pc, #436]	; (80052b0 <HAL_SPI_Init+0x200>)
 80050fa:	f7fb fe28 	bl	8000d4e <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d009      	beq.n	800511a <HAL_SPI_Init+0x6a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800510e:	d004      	beq.n	800511a <HAL_SPI_Init+0x6a>
 8005110:	f240 1141 	movw	r1, #321	; 0x141
 8005114:	4866      	ldr	r0, [pc, #408]	; (80052b0 <HAL_SPI_Init+0x200>)
 8005116:	f7fb fe1a 	bl	8000d4e <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00e      	beq.n	8005140 <HAL_SPI_Init+0x90>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800512a:	d009      	beq.n	8005140 <HAL_SPI_Init+0x90>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005134:	d004      	beq.n	8005140 <HAL_SPI_Init+0x90>
 8005136:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800513a:	485d      	ldr	r0, [pc, #372]	; (80052b0 <HAL_SPI_Init+0x200>)
 800513c:	f7fb fe07 	bl	8000d4e <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005148:	d008      	beq.n	800515c <HAL_SPI_Init+0xac>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d004      	beq.n	800515c <HAL_SPI_Init+0xac>
 8005152:	f240 1143 	movw	r1, #323	; 0x143
 8005156:	4856      	ldr	r0, [pc, #344]	; (80052b0 <HAL_SPI_Init+0x200>)
 8005158:	f7fb fdf9 	bl	8000d4e <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005164:	d00d      	beq.n	8005182 <HAL_SPI_Init+0xd2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d009      	beq.n	8005182 <HAL_SPI_Init+0xd2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005176:	d004      	beq.n	8005182 <HAL_SPI_Init+0xd2>
 8005178:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800517c:	484c      	ldr	r0, [pc, #304]	; (80052b0 <HAL_SPI_Init+0x200>)
 800517e:	f7fb fde6 	bl	8000d4e <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d020      	beq.n	80051cc <HAL_SPI_Init+0x11c>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	2b08      	cmp	r3, #8
 8005190:	d01c      	beq.n	80051cc <HAL_SPI_Init+0x11c>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	2b10      	cmp	r3, #16
 8005198:	d018      	beq.n	80051cc <HAL_SPI_Init+0x11c>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	2b18      	cmp	r3, #24
 80051a0:	d014      	beq.n	80051cc <HAL_SPI_Init+0x11c>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	2b20      	cmp	r3, #32
 80051a8:	d010      	beq.n	80051cc <HAL_SPI_Init+0x11c>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	2b28      	cmp	r3, #40	; 0x28
 80051b0:	d00c      	beq.n	80051cc <HAL_SPI_Init+0x11c>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	2b30      	cmp	r3, #48	; 0x30
 80051b8:	d008      	beq.n	80051cc <HAL_SPI_Init+0x11c>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	2b38      	cmp	r3, #56	; 0x38
 80051c0:	d004      	beq.n	80051cc <HAL_SPI_Init+0x11c>
 80051c2:	f240 1145 	movw	r1, #325	; 0x145
 80051c6:	483a      	ldr	r0, [pc, #232]	; (80052b0 <HAL_SPI_Init+0x200>)
 80051c8:	f7fb fdc1 	bl	8000d4e <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d008      	beq.n	80051e6 <HAL_SPI_Init+0x136>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	2b80      	cmp	r3, #128	; 0x80
 80051da:	d004      	beq.n	80051e6 <HAL_SPI_Init+0x136>
 80051dc:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80051e0:	4833      	ldr	r0, [pc, #204]	; (80052b0 <HAL_SPI_Init+0x200>)
 80051e2:	f7fb fdb4 	bl	8000d4e <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d008      	beq.n	8005200 <HAL_SPI_Init+0x150>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	2b10      	cmp	r3, #16
 80051f4:	d004      	beq.n	8005200 <HAL_SPI_Init+0x150>
 80051f6:	f240 1147 	movw	r1, #327	; 0x147
 80051fa:	482d      	ldr	r0, [pc, #180]	; (80052b0 <HAL_SPI_Init+0x200>)
 80051fc:	f7fb fda7 	bl	8000d4e <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	2b00      	cmp	r3, #0
 8005206:	d155      	bne.n	80052b4 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d008      	beq.n	8005222 <HAL_SPI_Init+0x172>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	2b02      	cmp	r3, #2
 8005216:	d004      	beq.n	8005222 <HAL_SPI_Init+0x172>
 8005218:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800521c:	4824      	ldr	r0, [pc, #144]	; (80052b0 <HAL_SPI_Init+0x200>)
 800521e:	f7fb fd96 	bl	8000d4e <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d008      	beq.n	800523c <HAL_SPI_Init+0x18c>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d004      	beq.n	800523c <HAL_SPI_Init+0x18c>
 8005232:	f240 114b 	movw	r1, #331	; 0x14b
 8005236:	481e      	ldr	r0, [pc, #120]	; (80052b0 <HAL_SPI_Init+0x200>)
 8005238:	f7fb fd89 	bl	8000d4e <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005244:	d125      	bne.n	8005292 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d05d      	beq.n	800530a <HAL_SPI_Init+0x25a>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	2b08      	cmp	r3, #8
 8005254:	d059      	beq.n	800530a <HAL_SPI_Init+0x25a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	2b10      	cmp	r3, #16
 800525c:	d055      	beq.n	800530a <HAL_SPI_Init+0x25a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	2b18      	cmp	r3, #24
 8005264:	d051      	beq.n	800530a <HAL_SPI_Init+0x25a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	2b20      	cmp	r3, #32
 800526c:	d04d      	beq.n	800530a <HAL_SPI_Init+0x25a>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	2b28      	cmp	r3, #40	; 0x28
 8005274:	d049      	beq.n	800530a <HAL_SPI_Init+0x25a>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	2b30      	cmp	r3, #48	; 0x30
 800527c:	d045      	beq.n	800530a <HAL_SPI_Init+0x25a>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	2b38      	cmp	r3, #56	; 0x38
 8005284:	d041      	beq.n	800530a <HAL_SPI_Init+0x25a>
 8005286:	f240 114f 	movw	r1, #335	; 0x14f
 800528a:	4809      	ldr	r0, [pc, #36]	; (80052b0 <HAL_SPI_Init+0x200>)
 800528c:	f7fb fd5f 	bl	8000d4e <assert_failed>
 8005290:	e03b      	b.n	800530a <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	61da      	str	r2, [r3, #28]
 8005298:	e037      	b.n	800530a <HAL_SPI_Init+0x25a>
 800529a:	bf00      	nop
 800529c:	40013000 	.word	0x40013000
 80052a0:	40003800 	.word	0x40003800
 80052a4:	40003c00 	.word	0x40003c00
 80052a8:	40013400 	.word	0x40013400
 80052ac:	40015000 	.word	0x40015000
 80052b0:	0800a490 	.word	0x0800a490
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d020      	beq.n	80052fe <HAL_SPI_Init+0x24e>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	2b08      	cmp	r3, #8
 80052c2:	d01c      	beq.n	80052fe <HAL_SPI_Init+0x24e>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	2b10      	cmp	r3, #16
 80052ca:	d018      	beq.n	80052fe <HAL_SPI_Init+0x24e>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	2b18      	cmp	r3, #24
 80052d2:	d014      	beq.n	80052fe <HAL_SPI_Init+0x24e>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	2b20      	cmp	r3, #32
 80052da:	d010      	beq.n	80052fe <HAL_SPI_Init+0x24e>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	2b28      	cmp	r3, #40	; 0x28
 80052e2:	d00c      	beq.n	80052fe <HAL_SPI_Init+0x24e>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	2b30      	cmp	r3, #48	; 0x30
 80052ea:	d008      	beq.n	80052fe <HAL_SPI_Init+0x24e>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	2b38      	cmp	r3, #56	; 0x38
 80052f2:	d004      	beq.n	80052fe <HAL_SPI_Init+0x24e>
 80052f4:	f240 1159 	movw	r1, #345	; 0x159
 80052f8:	483a      	ldr	r0, [pc, #232]	; (80053e4 <HAL_SPI_Init+0x334>)
 80052fa:	f7fb fd28 	bl	8000d4e <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	d106      	bne.n	800532a <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7fb fd53 	bl	8000dd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2202      	movs	r2, #2
 800532e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005340:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005352:	431a      	orrs	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800535c:	431a      	orrs	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	431a      	orrs	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	431a      	orrs	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005384:	431a      	orrs	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800538e:	ea42 0103 	orr.w	r1, r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005396:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	0c1b      	lsrs	r3, r3, #16
 80053a8:	f003 0104 	and.w	r1, r3, #4
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	f003 0210 	and.w	r2, r3, #16
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	69da      	ldr	r2, [r3, #28]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	0800a490 	.word	0x0800a490

080053e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053e8:	b084      	sub	sp, #16
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b084      	sub	sp, #16
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
 80053f2:	f107 001c 	add.w	r0, r7, #28
 80053f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d122      	bne.n	8005446 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005404:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800542a:	2b01      	cmp	r3, #1
 800542c:	d105      	bne.n	800543a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f9c0 	bl	80057c0 <USB_CoreReset>
 8005440:	4603      	mov	r3, r0
 8005442:	73fb      	strb	r3, [r7, #15]
 8005444:	e01a      	b.n	800547c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f9b4 	bl	80057c0 <USB_CoreReset>
 8005458:	4603      	mov	r3, r0
 800545a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800545c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800545e:	2b00      	cmp	r3, #0
 8005460:	d106      	bne.n	8005470 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005466:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	639a      	str	r2, [r3, #56]	; 0x38
 800546e:	e005      	b.n	800547c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005474:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800547c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547e:	2b01      	cmp	r3, #1
 8005480:	d10b      	bne.n	800549a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f043 0206 	orr.w	r2, r3, #6
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f043 0220 	orr.w	r2, r3, #32
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800549a:	7bfb      	ldrb	r3, [r7, #15]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054a6:	b004      	add	sp, #16
 80054a8:	4770      	bx	lr

080054aa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f043 0201 	orr.w	r2, r3, #1
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f023 0201 	bic.w	r2, r3, #1
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b084      	sub	sp, #16
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	460b      	mov	r3, r1
 80054f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800550a:	78fb      	ldrb	r3, [r7, #3]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d115      	bne.n	800553c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800551c:	2001      	movs	r0, #1
 800551e:	f7fb fddf 	bl	80010e0 <HAL_Delay>
      ms++;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	3301      	adds	r3, #1
 8005526:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f93a 	bl	80057a2 <USB_GetMode>
 800552e:	4603      	mov	r3, r0
 8005530:	2b01      	cmp	r3, #1
 8005532:	d01e      	beq.n	8005572 <USB_SetCurrentMode+0x84>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2b31      	cmp	r3, #49	; 0x31
 8005538:	d9f0      	bls.n	800551c <USB_SetCurrentMode+0x2e>
 800553a:	e01a      	b.n	8005572 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800553c:	78fb      	ldrb	r3, [r7, #3]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d115      	bne.n	800556e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800554e:	2001      	movs	r0, #1
 8005550:	f7fb fdc6 	bl	80010e0 <HAL_Delay>
      ms++;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	3301      	adds	r3, #1
 8005558:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f921 	bl	80057a2 <USB_GetMode>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d005      	beq.n	8005572 <USB_SetCurrentMode+0x84>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2b31      	cmp	r3, #49	; 0x31
 800556a:	d9f0      	bls.n	800554e <USB_SetCurrentMode+0x60>
 800556c:	e001      	b.n	8005572 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e005      	b.n	800557e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b32      	cmp	r3, #50	; 0x32
 8005576:	d101      	bne.n	800557c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e000      	b.n	800557e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
	...

08005588 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005592:	2300      	movs	r3, #0
 8005594:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	3301      	adds	r3, #1
 800559a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4a13      	ldr	r2, [pc, #76]	; (80055ec <USB_FlushTxFifo+0x64>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d901      	bls.n	80055a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e01b      	b.n	80055e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	daf2      	bge.n	8005596 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	019b      	lsls	r3, r3, #6
 80055b8:	f043 0220 	orr.w	r2, r3, #32
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	3301      	adds	r3, #1
 80055c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	4a08      	ldr	r2, [pc, #32]	; (80055ec <USB_FlushTxFifo+0x64>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d901      	bls.n	80055d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e006      	b.n	80055e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f003 0320 	and.w	r3, r3, #32
 80055da:	2b20      	cmp	r3, #32
 80055dc:	d0f0      	beq.n	80055c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	00030d40 	.word	0x00030d40

080055f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055f8:	2300      	movs	r3, #0
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	3301      	adds	r3, #1
 8005600:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4a11      	ldr	r2, [pc, #68]	; (800564c <USB_FlushRxFifo+0x5c>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d901      	bls.n	800560e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e018      	b.n	8005640 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	daf2      	bge.n	80055fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005616:	2300      	movs	r3, #0
 8005618:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2210      	movs	r2, #16
 800561e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	3301      	adds	r3, #1
 8005624:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	4a08      	ldr	r2, [pc, #32]	; (800564c <USB_FlushRxFifo+0x5c>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d901      	bls.n	8005632 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e006      	b.n	8005640 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	f003 0310 	and.w	r3, r3, #16
 800563a:	2b10      	cmp	r3, #16
 800563c:	d0f0      	beq.n	8005620 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	00030d40 	.word	0x00030d40

08005650 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005650:	b480      	push	{r7}
 8005652:	b089      	sub	sp, #36	; 0x24
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	4611      	mov	r1, r2
 800565c:	461a      	mov	r2, r3
 800565e:	460b      	mov	r3, r1
 8005660:	71fb      	strb	r3, [r7, #7]
 8005662:	4613      	mov	r3, r2
 8005664:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800566e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005672:	2b00      	cmp	r3, #0
 8005674:	d123      	bne.n	80056be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005676:	88bb      	ldrh	r3, [r7, #4]
 8005678:	3303      	adds	r3, #3
 800567a:	089b      	lsrs	r3, r3, #2
 800567c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800567e:	2300      	movs	r3, #0
 8005680:	61bb      	str	r3, [r7, #24]
 8005682:	e018      	b.n	80056b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005684:	79fb      	ldrb	r3, [r7, #7]
 8005686:	031a      	lsls	r2, r3, #12
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	4413      	add	r3, r2
 800568c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005690:	461a      	mov	r2, r3
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	3301      	adds	r3, #1
 800569c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	3301      	adds	r3, #1
 80056a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	3301      	adds	r3, #1
 80056a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	3301      	adds	r3, #1
 80056ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	3301      	adds	r3, #1
 80056b4:	61bb      	str	r3, [r7, #24]
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d3e2      	bcc.n	8005684 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3724      	adds	r7, #36	; 0x24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b08b      	sub	sp, #44	; 0x2c
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	4613      	mov	r3, r2
 80056d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80056e2:	88fb      	ldrh	r3, [r7, #6]
 80056e4:	089b      	lsrs	r3, r3, #2
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80056ea:	88fb      	ldrh	r3, [r7, #6]
 80056ec:	f003 0303 	and.w	r3, r3, #3
 80056f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80056f2:	2300      	movs	r3, #0
 80056f4:	623b      	str	r3, [r7, #32]
 80056f6:	e014      	b.n	8005722 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	601a      	str	r2, [r3, #0]
    pDest++;
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	3301      	adds	r3, #1
 8005708:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	3301      	adds	r3, #1
 800570e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	3301      	adds	r3, #1
 8005714:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	3301      	adds	r3, #1
 800571a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	3301      	adds	r3, #1
 8005720:	623b      	str	r3, [r7, #32]
 8005722:	6a3a      	ldr	r2, [r7, #32]
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	429a      	cmp	r2, r3
 8005728:	d3e6      	bcc.n	80056f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800572a:	8bfb      	ldrh	r3, [r7, #30]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d01e      	beq.n	800576e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005730:	2300      	movs	r3, #0
 8005732:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800573a:	461a      	mov	r2, r3
 800573c:	f107 0310 	add.w	r3, r7, #16
 8005740:	6812      	ldr	r2, [r2, #0]
 8005742:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	b2db      	uxtb	r3, r3
 800574a:	00db      	lsls	r3, r3, #3
 800574c:	fa22 f303 	lsr.w	r3, r2, r3
 8005750:	b2da      	uxtb	r2, r3
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	701a      	strb	r2, [r3, #0]
      i++;
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	3301      	adds	r3, #1
 800575a:	623b      	str	r3, [r7, #32]
      pDest++;
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	3301      	adds	r3, #1
 8005760:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005762:	8bfb      	ldrh	r3, [r7, #30]
 8005764:	3b01      	subs	r3, #1
 8005766:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005768:	8bfb      	ldrh	r3, [r7, #30]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1ea      	bne.n	8005744 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005770:	4618      	mov	r0, r3
 8005772:	372c      	adds	r7, #44	; 0x2c
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4013      	ands	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005794:	68fb      	ldr	r3, [r7, #12]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	f003 0301 	and.w	r3, r3, #1
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
	...

080057c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057c8:	2300      	movs	r3, #0
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	3301      	adds	r3, #1
 80057d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	4a13      	ldr	r2, [pc, #76]	; (8005824 <USB_CoreReset+0x64>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d901      	bls.n	80057de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e01b      	b.n	8005816 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	daf2      	bge.n	80057cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	f043 0201 	orr.w	r2, r3, #1
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	3301      	adds	r3, #1
 80057fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4a09      	ldr	r2, [pc, #36]	; (8005824 <USB_CoreReset+0x64>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d901      	bls.n	8005808 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e006      	b.n	8005816 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	2b01      	cmp	r3, #1
 8005812:	d0f0      	beq.n	80057f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	00030d40 	.word	0x00030d40

08005828 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005828:	b084      	sub	sp, #16
 800582a:	b580      	push	{r7, lr}
 800582c:	b086      	sub	sp, #24
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005836:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800583a:	2300      	movs	r3, #0
 800583c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005848:	461a      	mov	r2, r3
 800584a:	2300      	movs	r3, #0
 800584c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005852:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800587a:	2b00      	cmp	r3, #0
 800587c:	d018      	beq.n	80058b0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800587e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005880:	2b01      	cmp	r3, #1
 8005882:	d10a      	bne.n	800589a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005892:	f043 0304 	orr.w	r3, r3, #4
 8005896:	6013      	str	r3, [r2, #0]
 8005898:	e014      	b.n	80058c4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058a8:	f023 0304 	bic.w	r3, r3, #4
 80058ac:	6013      	str	r3, [r2, #0]
 80058ae:	e009      	b.n	80058c4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058be:	f023 0304 	bic.w	r3, r3, #4
 80058c2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80058c4:	2110      	movs	r1, #16
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7ff fe5e 	bl	8005588 <USB_FlushTxFifo>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7ff fe8a 	bl	80055f0 <USB_FlushRxFifo>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80058e6:	2300      	movs	r3, #0
 80058e8:	613b      	str	r3, [r7, #16]
 80058ea:	e015      	b.n	8005918 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	015a      	lsls	r2, r3, #5
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f8:	461a      	mov	r2, r3
 80058fa:	f04f 33ff 	mov.w	r3, #4294967295
 80058fe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4413      	add	r3, r2
 8005908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800590c:	461a      	mov	r2, r3
 800590e:	2300      	movs	r3, #0
 8005910:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	3301      	adds	r3, #1
 8005916:	613b      	str	r3, [r7, #16]
 8005918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	429a      	cmp	r2, r3
 800591e:	d3e5      	bcc.n	80058ec <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f04f 32ff 	mov.w	r2, #4294967295
 800592c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00b      	beq.n	8005952 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005940:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a13      	ldr	r2, [pc, #76]	; (8005994 <USB_HostInit+0x16c>)
 8005946:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a13      	ldr	r2, [pc, #76]	; (8005998 <USB_HostInit+0x170>)
 800594c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005950:	e009      	b.n	8005966 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2280      	movs	r2, #128	; 0x80
 8005956:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a10      	ldr	r2, [pc, #64]	; (800599c <USB_HostInit+0x174>)
 800595c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a0f      	ldr	r2, [pc, #60]	; (80059a0 <USB_HostInit+0x178>)
 8005962:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	2b00      	cmp	r3, #0
 800596a:	d105      	bne.n	8005978 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	f043 0210 	orr.w	r2, r3, #16
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	699a      	ldr	r2, [r3, #24]
 800597c:	4b09      	ldr	r3, [pc, #36]	; (80059a4 <USB_HostInit+0x17c>)
 800597e:	4313      	orrs	r3, r2
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005984:	7dfb      	ldrb	r3, [r7, #23]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005990:	b004      	add	sp, #16
 8005992:	4770      	bx	lr
 8005994:	01000200 	.word	0x01000200
 8005998:	00e00300 	.word	0x00e00300
 800599c:	00600080 	.word	0x00600080
 80059a0:	004000e0 	.word	0x004000e0
 80059a4:	a3200008 	.word	0xa3200008

080059a8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	460b      	mov	r3, r1
 80059b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059c6:	f023 0303 	bic.w	r3, r3, #3
 80059ca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	78fb      	ldrb	r3, [r7, #3]
 80059d6:	f003 0303 	and.w	r3, r3, #3
 80059da:	68f9      	ldr	r1, [r7, #12]
 80059dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80059e0:	4313      	orrs	r3, r2
 80059e2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80059e4:	78fb      	ldrb	r3, [r7, #3]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d107      	bne.n	80059fa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059f0:	461a      	mov	r2, r3
 80059f2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80059f6:	6053      	str	r3, [r2, #4]
 80059f8:	e009      	b.n	8005a0e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80059fa:	78fb      	ldrb	r3, [r7, #3]
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d106      	bne.n	8005a0e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a06:	461a      	mov	r2, r3
 8005a08:	f241 7370 	movw	r3, #6000	; 0x1770
 8005a0c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005a3c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a4a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005a4c:	2064      	movs	r0, #100	; 0x64
 8005a4e:	f7fb fb47 	bl	80010e0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a5e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005a60:	200a      	movs	r0, #10
 8005a62:	f7fb fb3d 	bl	80010e0 <HAL_Delay>

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005a80:	2300      	movs	r3, #0
 8005a82:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005a94:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d109      	bne.n	8005ab4 <USB_DriveVbus+0x44>
 8005aa0:	78fb      	ldrb	r3, [r7, #3]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d106      	bne.n	8005ab4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005aae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ab2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005abe:	d109      	bne.n	8005ad4 <USB_DriveVbus+0x64>
 8005ac0:	78fb      	ldrb	r3, [r7, #3]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d106      	bne.n	8005ad4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ace:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ad2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b085      	sub	sp, #20
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	0c5b      	lsrs	r3, r3, #17
 8005b00:	f003 0303 	and.w	r3, r3, #3
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	b29b      	uxth	r3, r3
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
	...

08005b34 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	4608      	mov	r0, r1
 8005b3e:	4611      	mov	r1, r2
 8005b40:	461a      	mov	r2, r3
 8005b42:	4603      	mov	r3, r0
 8005b44:	70fb      	strb	r3, [r7, #3]
 8005b46:	460b      	mov	r3, r1
 8005b48:	70bb      	strb	r3, [r7, #2]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005b56:	78fb      	ldrb	r3, [r7, #3]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b62:	461a      	mov	r2, r3
 8005b64:	f04f 33ff 	mov.w	r3, #4294967295
 8005b68:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005b6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005b6e:	2b03      	cmp	r3, #3
 8005b70:	d87e      	bhi.n	8005c70 <USB_HC_Init+0x13c>
 8005b72:	a201      	add	r2, pc, #4	; (adr r2, 8005b78 <USB_HC_Init+0x44>)
 8005b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b78:	08005b89 	.word	0x08005b89
 8005b7c:	08005c33 	.word	0x08005c33
 8005b80:	08005b89 	.word	0x08005b89
 8005b84:	08005bf5 	.word	0x08005bf5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b88:	78fb      	ldrb	r3, [r7, #3]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b94:	461a      	mov	r2, r3
 8005b96:	f240 439d 	movw	r3, #1181	; 0x49d
 8005b9a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005b9c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	da10      	bge.n	8005bc6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ba4:	78fb      	ldrb	r3, [r7, #3]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	78fa      	ldrb	r2, [r7, #3]
 8005bb4:	0151      	lsls	r1, r2, #5
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	440a      	add	r2, r1
 8005bba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bc2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005bc4:	e057      	b.n	8005c76 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d051      	beq.n	8005c76 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005bd2:	78fb      	ldrb	r3, [r7, #3]
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	78fa      	ldrb	r2, [r7, #3]
 8005be2:	0151      	lsls	r1, r2, #5
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	440a      	add	r2, r1
 8005be8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005bf0:	60d3      	str	r3, [r2, #12]
      break;
 8005bf2:	e040      	b.n	8005c76 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005bf4:	78fb      	ldrb	r3, [r7, #3]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c00:	461a      	mov	r2, r3
 8005c02:	f240 639d 	movw	r3, #1693	; 0x69d
 8005c06:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005c08:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	da34      	bge.n	8005c7a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c10:	78fb      	ldrb	r3, [r7, #3]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	78fa      	ldrb	r2, [r7, #3]
 8005c20:	0151      	lsls	r1, r2, #5
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	440a      	add	r2, r1
 8005c26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c2e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005c30:	e023      	b.n	8005c7a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c32:	78fb      	ldrb	r3, [r7, #3]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c3e:	461a      	mov	r2, r3
 8005c40:	f240 2325 	movw	r3, #549	; 0x225
 8005c44:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005c46:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	da17      	bge.n	8005c7e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005c4e:	78fb      	ldrb	r3, [r7, #3]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	78fa      	ldrb	r2, [r7, #3]
 8005c5e:	0151      	lsls	r1, r2, #5
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	440a      	add	r2, r1
 8005c64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c68:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005c6c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005c6e:	e006      	b.n	8005c7e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	77fb      	strb	r3, [r7, #31]
      break;
 8005c74:	e004      	b.n	8005c80 <USB_HC_Init+0x14c>
      break;
 8005c76:	bf00      	nop
 8005c78:	e002      	b.n	8005c80 <USB_HC_Init+0x14c>
      break;
 8005c7a:	bf00      	nop
 8005c7c:	e000      	b.n	8005c80 <USB_HC_Init+0x14c>
      break;
 8005c7e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005c80:	78fb      	ldrb	r3, [r7, #3]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	78fa      	ldrb	r2, [r7, #3]
 8005c90:	0151      	lsls	r1, r2, #5
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	440a      	add	r2, r1
 8005c96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c9a:	f043 0302 	orr.w	r3, r3, #2
 8005c9e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ca6:	699a      	ldr	r2, [r3, #24]
 8005ca8:	78fb      	ldrb	r3, [r7, #3]
 8005caa:	f003 030f 	and.w	r3, r3, #15
 8005cae:	2101      	movs	r1, #1
 8005cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb4:	6939      	ldr	r1, [r7, #16]
 8005cb6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005cca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	da03      	bge.n	8005cda <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cd6:	61bb      	str	r3, [r7, #24]
 8005cd8:	e001      	b.n	8005cde <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7ff feff 	bl	8005ae2 <USB_GetHostSpeed>
 8005ce4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005ce6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d106      	bne.n	8005cfc <USB_HC_Init+0x1c8>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d003      	beq.n	8005cfc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005cf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005cf8:	617b      	str	r3, [r7, #20]
 8005cfa:	e001      	b.n	8005d00 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d00:	787b      	ldrb	r3, [r7, #1]
 8005d02:	059b      	lsls	r3, r3, #22
 8005d04:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d08:	78bb      	ldrb	r3, [r7, #2]
 8005d0a:	02db      	lsls	r3, r3, #11
 8005d0c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d10:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d12:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d16:	049b      	lsls	r3, r3, #18
 8005d18:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d1c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d1e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005d20:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d24:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d2a:	78fb      	ldrb	r3, [r7, #3]
 8005d2c:	0159      	lsls	r1, r3, #5
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	440b      	add	r3, r1
 8005d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d36:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d3c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005d3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d42:	2b03      	cmp	r3, #3
 8005d44:	d003      	beq.n	8005d4e <USB_HC_Init+0x21a>
 8005d46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d10f      	bne.n	8005d6e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005d4e:	78fb      	ldrb	r3, [r7, #3]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	78fa      	ldrb	r2, [r7, #3]
 8005d5e:	0151      	lsls	r1, r2, #5
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	440a      	add	r2, r1
 8005d64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d6c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005d6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3720      	adds	r7, #32
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08c      	sub	sp, #48	; 0x30
 8005d7c:	af02      	add	r7, sp, #8
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	4613      	mov	r3, r2
 8005d84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	785b      	ldrb	r3, [r3, #1]
 8005d8e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005d90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d94:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d02d      	beq.n	8005dfe <USB_HC_StartXfer+0x86>
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	791b      	ldrb	r3, [r3, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d129      	bne.n	8005dfe <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005daa:	79fb      	ldrb	r3, [r7, #7]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d117      	bne.n	8005de0 <USB_HC_StartXfer+0x68>
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	79db      	ldrb	r3, [r3, #7]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d003      	beq.n	8005dc0 <USB_HC_StartXfer+0x48>
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	79db      	ldrb	r3, [r3, #7]
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d10f      	bne.n	8005de0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	6a3b      	ldr	r3, [r7, #32]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	69fa      	ldr	r2, [r7, #28]
 8005dd0:	0151      	lsls	r1, r2, #5
 8005dd2:	6a3a      	ldr	r2, [r7, #32]
 8005dd4:	440a      	add	r2, r1
 8005dd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dde:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005de0:	79fb      	ldrb	r3, [r7, #7]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10b      	bne.n	8005dfe <USB_HC_StartXfer+0x86>
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	795b      	ldrb	r3, [r3, #5]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d107      	bne.n	8005dfe <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	785b      	ldrb	r3, [r3, #1]
 8005df2:	4619      	mov	r1, r3
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f000 fa0f 	bl	8006218 <USB_DoPing>
      return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	e0f8      	b.n	8005ff0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d018      	beq.n	8005e38 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	8912      	ldrh	r2, [r2, #8]
 8005e0e:	4413      	add	r3, r2
 8005e10:	3b01      	subs	r3, #1
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	8912      	ldrh	r2, [r2, #8]
 8005e16:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e1a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005e1c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005e1e:	8b7b      	ldrh	r3, [r7, #26]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d90b      	bls.n	8005e3c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005e24:	8b7b      	ldrh	r3, [r7, #26]
 8005e26:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005e28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	8912      	ldrh	r2, [r2, #8]
 8005e2e:	fb03 f202 	mul.w	r2, r3, r2
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	611a      	str	r2, [r3, #16]
 8005e36:	e001      	b.n	8005e3c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	78db      	ldrb	r3, [r3, #3]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d007      	beq.n	8005e54 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005e44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	8912      	ldrh	r2, [r2, #8]
 8005e4a:	fb03 f202 	mul.w	r2, r3, r2
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	611a      	str	r2, [r3, #16]
 8005e52:	e003      	b.n	8005e5c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	695a      	ldr	r2, [r3, #20]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e66:	04d9      	lsls	r1, r3, #19
 8005e68:	4b63      	ldr	r3, [pc, #396]	; (8005ff8 <USB_HC_StartXfer+0x280>)
 8005e6a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e6c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	7a9b      	ldrb	r3, [r3, #10]
 8005e72:	075b      	lsls	r3, r3, #29
 8005e74:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e78:	69f9      	ldr	r1, [r7, #28]
 8005e7a:	0148      	lsls	r0, r1, #5
 8005e7c:	6a39      	ldr	r1, [r7, #32]
 8005e7e:	4401      	add	r1, r0
 8005e80:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e84:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e86:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005e88:	79fb      	ldrb	r3, [r7, #7]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d009      	beq.n	8005ea2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	68d9      	ldr	r1, [r3, #12]
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e9e:	460a      	mov	r2, r1
 8005ea0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	bf0c      	ite	eq
 8005eb2:	2301      	moveq	r3, #1
 8005eb4:	2300      	movne	r3, #0
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	015a      	lsls	r2, r3, #5
 8005ebe:	6a3b      	ldr	r3, [r7, #32]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	69fa      	ldr	r2, [r7, #28]
 8005eca:	0151      	lsls	r1, r2, #5
 8005ecc:	6a3a      	ldr	r2, [r7, #32]
 8005ece:	440a      	add	r2, r1
 8005ed0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ed4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ed8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	7e7b      	ldrb	r3, [r7, #25]
 8005eea:	075b      	lsls	r3, r3, #29
 8005eec:	69f9      	ldr	r1, [r7, #28]
 8005eee:	0148      	lsls	r0, r1, #5
 8005ef0:	6a39      	ldr	r1, [r7, #32]
 8005ef2:	4401      	add	r1, r0
 8005ef4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f12:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	78db      	ldrb	r3, [r3, #3]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d004      	beq.n	8005f26 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f22:	613b      	str	r3, [r7, #16]
 8005f24:	e003      	b.n	8005f2e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f2c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f34:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	6a3b      	ldr	r3, [r7, #32]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f42:	461a      	mov	r2, r3
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005f48:	79fb      	ldrb	r3, [r7, #7]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d001      	beq.n	8005f52 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	e04e      	b.n	8005ff0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	78db      	ldrb	r3, [r3, #3]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d149      	bne.n	8005fee <USB_HC_StartXfer+0x276>
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d045      	beq.n	8005fee <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	79db      	ldrb	r3, [r3, #7]
 8005f66:	2b03      	cmp	r3, #3
 8005f68:	d830      	bhi.n	8005fcc <USB_HC_StartXfer+0x254>
 8005f6a:	a201      	add	r2, pc, #4	; (adr r2, 8005f70 <USB_HC_StartXfer+0x1f8>)
 8005f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f70:	08005f81 	.word	0x08005f81
 8005f74:	08005fa5 	.word	0x08005fa5
 8005f78:	08005f81 	.word	0x08005f81
 8005f7c:	08005fa5 	.word	0x08005fa5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	695b      	ldr	r3, [r3, #20]
 8005f84:	3303      	adds	r3, #3
 8005f86:	089b      	lsrs	r3, r3, #2
 8005f88:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005f8a:	8afa      	ldrh	r2, [r7, #22]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d91c      	bls.n	8005fd0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	f043 0220 	orr.w	r2, r3, #32
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	619a      	str	r2, [r3, #24]
        }
        break;
 8005fa2:	e015      	b.n	8005fd0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	3303      	adds	r3, #3
 8005faa:	089b      	lsrs	r3, r3, #2
 8005fac:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005fae:	8afa      	ldrh	r2, [r7, #22]
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
 8005fb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d90a      	bls.n	8005fd4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	619a      	str	r2, [r3, #24]
        }
        break;
 8005fca:	e003      	b.n	8005fd4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005fcc:	bf00      	nop
 8005fce:	e002      	b.n	8005fd6 <USB_HC_StartXfer+0x25e>
        break;
 8005fd0:	bf00      	nop
 8005fd2:	e000      	b.n	8005fd6 <USB_HC_StartXfer+0x25e>
        break;
 8005fd4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	68d9      	ldr	r1, [r3, #12]
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	785a      	ldrb	r2, [r3, #1]
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	2000      	movs	r0, #0
 8005fe6:	9000      	str	r0, [sp, #0]
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f7ff fb31 	bl	8005650 <USB_WritePacket>
  }

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3728      	adds	r7, #40	; 0x28
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	1ff80000 	.word	0x1ff80000

08005ffc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	b29b      	uxth	r3, r3
}
 8006012:	4618      	mov	r0, r3
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800601e:	b480      	push	{r7}
 8006020:	b089      	sub	sp, #36	; 0x24
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	460b      	mov	r3, r1
 8006028:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800602e:	78fb      	ldrb	r3, [r7, #3]
 8006030:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006032:	2300      	movs	r3, #0
 8006034:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	4413      	add	r3, r2
 800603e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	0c9b      	lsrs	r3, r3, #18
 8006046:	f003 0303 	and.w	r3, r3, #3
 800604a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	4413      	add	r3, r2
 8006054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	0fdb      	lsrs	r3, r3, #31
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f003 0320 	and.w	r3, r3, #32
 800606a:	2b20      	cmp	r3, #32
 800606c:	d104      	bne.n	8006078 <USB_HC_Halt+0x5a>
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006074:	2300      	movs	r3, #0
 8006076:	e0c8      	b.n	800620a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d002      	beq.n	8006084 <USB_HC_Halt+0x66>
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2b02      	cmp	r3, #2
 8006082:	d163      	bne.n	800614c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	4413      	add	r3, r2
 800608c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	0151      	lsls	r1, r2, #5
 8006096:	69fa      	ldr	r2, [r7, #28]
 8006098:	440a      	add	r2, r1
 800609a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800609e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060a2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f003 0320 	and.w	r3, r3, #32
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f040 80ab 	bne.w	8006208 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d133      	bne.n	8006126 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	0151      	lsls	r1, r2, #5
 80060d0:	69fa      	ldr	r2, [r7, #28]
 80060d2:	440a      	add	r2, r1
 80060d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060dc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	0151      	lsls	r1, r2, #5
 80060f0:	69fa      	ldr	r2, [r7, #28]
 80060f2:	440a      	add	r2, r1
 80060f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060fc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	3301      	adds	r3, #1
 8006102:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800610a:	d81d      	bhi.n	8006148 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	4413      	add	r3, r2
 8006114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800611e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006122:	d0ec      	beq.n	80060fe <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006124:	e070      	b.n	8006208 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	4413      	add	r3, r2
 800612e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	0151      	lsls	r1, r2, #5
 8006138:	69fa      	ldr	r2, [r7, #28]
 800613a:	440a      	add	r2, r1
 800613c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006140:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006144:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006146:	e05f      	b.n	8006208 <USB_HC_Halt+0x1ea>
            break;
 8006148:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800614a:	e05d      	b.n	8006208 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	4413      	add	r3, r2
 8006154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	0151      	lsls	r1, r2, #5
 800615e:	69fa      	ldr	r2, [r7, #28]
 8006160:	440a      	add	r2, r1
 8006162:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006166:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800616a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d133      	bne.n	80061e4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	015a      	lsls	r2, r3, #5
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	4413      	add	r3, r2
 8006184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	0151      	lsls	r1, r2, #5
 800618e:	69fa      	ldr	r2, [r7, #28]
 8006190:	440a      	add	r2, r1
 8006192:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006196:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800619a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	015a      	lsls	r2, r3, #5
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	0151      	lsls	r1, r2, #5
 80061ae:	69fa      	ldr	r2, [r7, #28]
 80061b0:	440a      	add	r2, r1
 80061b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061ba:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	3301      	adds	r3, #1
 80061c0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061c8:	d81d      	bhi.n	8006206 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061e0:	d0ec      	beq.n	80061bc <USB_HC_Halt+0x19e>
 80061e2:	e011      	b.n	8006208 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69ba      	ldr	r2, [r7, #24]
 80061f4:	0151      	lsls	r1, r2, #5
 80061f6:	69fa      	ldr	r2, [r7, #28]
 80061f8:	440a      	add	r2, r1
 80061fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006202:	6013      	str	r3, [r2, #0]
 8006204:	e000      	b.n	8006208 <USB_HC_Halt+0x1ea>
          break;
 8006206:	bf00      	nop
    }
  }

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3724      	adds	r7, #36	; 0x24
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
	...

08006218 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	460b      	mov	r3, r1
 8006222:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800622c:	2301      	movs	r3, #1
 800622e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	04da      	lsls	r2, r3, #19
 8006234:	4b15      	ldr	r3, [pc, #84]	; (800628c <USB_DoPing+0x74>)
 8006236:	4013      	ands	r3, r2
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	0151      	lsls	r1, r2, #5
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	440a      	add	r2, r1
 8006240:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006244:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006248:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	4413      	add	r3, r2
 8006252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006260:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006268:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	4413      	add	r3, r2
 8006272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006276:	461a      	mov	r2, r3
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	371c      	adds	r7, #28
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	1ff80000 	.word	0x1ff80000

08006290 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b088      	sub	sp, #32
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006298:	2300      	movs	r3, #0
 800629a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80062a0:	2300      	movs	r3, #0
 80062a2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7ff f911 	bl	80054cc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80062aa:	2110      	movs	r1, #16
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f7ff f96b 	bl	8005588 <USB_FlushTxFifo>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d001      	beq.n	80062bc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7ff f997 	bl	80055f0 <USB_FlushRxFifo>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80062cc:	2300      	movs	r3, #0
 80062ce:	61bb      	str	r3, [r7, #24]
 80062d0:	e01f      	b.n	8006312 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062e8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062f0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062f8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	4413      	add	r3, r2
 8006302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006306:	461a      	mov	r2, r3
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	3301      	adds	r3, #1
 8006310:	61bb      	str	r3, [r7, #24]
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	2b0f      	cmp	r3, #15
 8006316:	d9dc      	bls.n	80062d2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006318:	2300      	movs	r3, #0
 800631a:	61bb      	str	r3, [r7, #24]
 800631c:	e034      	b.n	8006388 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	4413      	add	r3, r2
 8006326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006334:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800633c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006344:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	4413      	add	r3, r2
 800634e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006352:	461a      	mov	r2, r3
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	3301      	adds	r3, #1
 800635c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006364:	d80c      	bhi.n	8006380 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	015a      	lsls	r2, r3, #5
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	4413      	add	r3, r2
 800636e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006378:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800637c:	d0ec      	beq.n	8006358 <USB_StopHost+0xc8>
 800637e:	e000      	b.n	8006382 <USB_StopHost+0xf2>
        break;
 8006380:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	3301      	adds	r3, #1
 8006386:	61bb      	str	r3, [r7, #24]
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	2b0f      	cmp	r3, #15
 800638c:	d9c7      	bls.n	800631e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006394:	461a      	mov	r2, r3
 8006396:	f04f 33ff 	mov.w	r3, #4294967295
 800639a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f04f 32ff 	mov.w	r2, #4294967295
 80063a2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f7ff f880 	bl	80054aa <USB_EnableGlobalInt>

  return ret;
 80063aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3720      	adds	r7, #32
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80063b4:	b590      	push	{r4, r7, lr}
 80063b6:	b089      	sub	sp, #36	; 0x24
 80063b8:	af04      	add	r7, sp, #16
 80063ba:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80063bc:	2301      	movs	r3, #1
 80063be:	2202      	movs	r2, #2
 80063c0:	2102      	movs	r1, #2
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fc66 	bl	8006c94 <USBH_FindInterface>
 80063c8:	4603      	mov	r3, r0
 80063ca:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
 80063ce:	2bff      	cmp	r3, #255	; 0xff
 80063d0:	d002      	beq.n	80063d8 <USBH_CDC_InterfaceInit+0x24>
 80063d2:	7bfb      	ldrb	r3, [r7, #15]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d901      	bls.n	80063dc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80063d8:	2302      	movs	r3, #2
 80063da:	e13d      	b.n	8006658 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80063dc:	7bfb      	ldrb	r3, [r7, #15]
 80063de:	4619      	mov	r1, r3
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 fc3b 	bl	8006c5c <USBH_SelectInterface>
 80063e6:	4603      	mov	r3, r0
 80063e8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80063ea:	7bbb      	ldrb	r3, [r7, #14]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80063f0:	2302      	movs	r3, #2
 80063f2:	e131      	b.n	8006658 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80063fa:	2050      	movs	r0, #80	; 0x50
 80063fc:	f002 fec6 	bl	800918c <malloc>
 8006400:	4603      	mov	r3, r0
 8006402:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800640a:	69db      	ldr	r3, [r3, #28]
 800640c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d101      	bne.n	8006418 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006414:	2302      	movs	r3, #2
 8006416:	e11f      	b.n	8006658 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006418:	2250      	movs	r2, #80	; 0x50
 800641a:	2100      	movs	r1, #0
 800641c:	68b8      	ldr	r0, [r7, #8]
 800641e:	f002 fec5 	bl	80091ac <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006422:	7bfb      	ldrb	r3, [r7, #15]
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	211a      	movs	r1, #26
 8006428:	fb01 f303 	mul.w	r3, r1, r3
 800642c:	4413      	add	r3, r2
 800642e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	b25b      	sxtb	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	da15      	bge.n	8006466 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800643a:	7bfb      	ldrb	r3, [r7, #15]
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	211a      	movs	r1, #26
 8006440:	fb01 f303 	mul.w	r3, r1, r3
 8006444:	4413      	add	r3, r2
 8006446:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800644a:	781a      	ldrb	r2, [r3, #0]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	211a      	movs	r1, #26
 8006456:	fb01 f303 	mul.w	r3, r1, r3
 800645a:	4413      	add	r3, r2
 800645c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006460:	881a      	ldrh	r2, [r3, #0]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	785b      	ldrb	r3, [r3, #1]
 800646a:	4619      	mov	r1, r3
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f001 ff2c 	bl	80082ca <USBH_AllocPipe>
 8006472:	4603      	mov	r3, r0
 8006474:	461a      	mov	r2, r3
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	7819      	ldrb	r1, [r3, #0]
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	7858      	ldrb	r0, [r3, #1]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	8952      	ldrh	r2, [r2, #10]
 8006492:	9202      	str	r2, [sp, #8]
 8006494:	2203      	movs	r2, #3
 8006496:	9201      	str	r2, [sp, #4]
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	4623      	mov	r3, r4
 800649c:	4602      	mov	r2, r0
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f001 fee4 	bl	800826c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	2200      	movs	r2, #0
 80064aa:	4619      	mov	r1, r3
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f002 f9f3 	bl	8008898 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80064b2:	2300      	movs	r3, #0
 80064b4:	2200      	movs	r2, #0
 80064b6:	210a      	movs	r1, #10
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 fbeb 	bl	8006c94 <USBH_FindInterface>
 80064be:	4603      	mov	r3, r0
 80064c0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80064c2:	7bfb      	ldrb	r3, [r7, #15]
 80064c4:	2bff      	cmp	r3, #255	; 0xff
 80064c6:	d002      	beq.n	80064ce <USBH_CDC_InterfaceInit+0x11a>
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d901      	bls.n	80064d2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80064ce:	2302      	movs	r3, #2
 80064d0:	e0c2      	b.n	8006658 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80064d2:	7bfb      	ldrb	r3, [r7, #15]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	211a      	movs	r1, #26
 80064d8:	fb01 f303 	mul.w	r3, r1, r3
 80064dc:	4413      	add	r3, r2
 80064de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	b25b      	sxtb	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	da16      	bge.n	8006518 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	211a      	movs	r1, #26
 80064f0:	fb01 f303 	mul.w	r3, r1, r3
 80064f4:	4413      	add	r3, r2
 80064f6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80064fa:	781a      	ldrb	r2, [r3, #0]
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006500:	7bfb      	ldrb	r3, [r7, #15]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	211a      	movs	r1, #26
 8006506:	fb01 f303 	mul.w	r3, r1, r3
 800650a:	4413      	add	r3, r2
 800650c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006510:	881a      	ldrh	r2, [r3, #0]
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	835a      	strh	r2, [r3, #26]
 8006516:	e015      	b.n	8006544 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006518:	7bfb      	ldrb	r3, [r7, #15]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	211a      	movs	r1, #26
 800651e:	fb01 f303 	mul.w	r3, r1, r3
 8006522:	4413      	add	r3, r2
 8006524:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006528:	781a      	ldrb	r2, [r3, #0]
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800652e:	7bfb      	ldrb	r3, [r7, #15]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	211a      	movs	r1, #26
 8006534:	fb01 f303 	mul.w	r3, r1, r3
 8006538:	4413      	add	r3, r2
 800653a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800653e:	881a      	ldrh	r2, [r3, #0]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006544:	7bfb      	ldrb	r3, [r7, #15]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	211a      	movs	r1, #26
 800654a:	fb01 f303 	mul.w	r3, r1, r3
 800654e:	4413      	add	r3, r2
 8006550:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	b25b      	sxtb	r3, r3
 8006558:	2b00      	cmp	r3, #0
 800655a:	da16      	bge.n	800658a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800655c:	7bfb      	ldrb	r3, [r7, #15]
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	211a      	movs	r1, #26
 8006562:	fb01 f303 	mul.w	r3, r1, r3
 8006566:	4413      	add	r3, r2
 8006568:	f203 3356 	addw	r3, r3, #854	; 0x356
 800656c:	781a      	ldrb	r2, [r3, #0]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006572:	7bfb      	ldrb	r3, [r7, #15]
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	211a      	movs	r1, #26
 8006578:	fb01 f303 	mul.w	r3, r1, r3
 800657c:	4413      	add	r3, r2
 800657e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006582:	881a      	ldrh	r2, [r3, #0]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	835a      	strh	r2, [r3, #26]
 8006588:	e015      	b.n	80065b6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800658a:	7bfb      	ldrb	r3, [r7, #15]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	211a      	movs	r1, #26
 8006590:	fb01 f303 	mul.w	r3, r1, r3
 8006594:	4413      	add	r3, r2
 8006596:	f203 3356 	addw	r3, r3, #854	; 0x356
 800659a:	781a      	ldrb	r2, [r3, #0]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	211a      	movs	r1, #26
 80065a6:	fb01 f303 	mul.w	r3, r1, r3
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80065b0:	881a      	ldrh	r2, [r3, #0]
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	7b9b      	ldrb	r3, [r3, #14]
 80065ba:	4619      	mov	r1, r3
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f001 fe84 	bl	80082ca <USBH_AllocPipe>
 80065c2:	4603      	mov	r3, r0
 80065c4:	461a      	mov	r2, r3
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	7bdb      	ldrb	r3, [r3, #15]
 80065ce:	4619      	mov	r1, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f001 fe7a 	bl	80082ca <USBH_AllocPipe>
 80065d6:	4603      	mov	r3, r0
 80065d8:	461a      	mov	r2, r3
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	7b59      	ldrb	r1, [r3, #13]
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	7b98      	ldrb	r0, [r3, #14]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	8b12      	ldrh	r2, [r2, #24]
 80065f6:	9202      	str	r2, [sp, #8]
 80065f8:	2202      	movs	r2, #2
 80065fa:	9201      	str	r2, [sp, #4]
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	4623      	mov	r3, r4
 8006600:	4602      	mov	r2, r0
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f001 fe32 	bl	800826c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	7b19      	ldrb	r1, [r3, #12]
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	7bd8      	ldrb	r0, [r3, #15]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	8b52      	ldrh	r2, [r2, #26]
 8006620:	9202      	str	r2, [sp, #8]
 8006622:	2202      	movs	r2, #2
 8006624:	9201      	str	r2, [sp, #4]
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	4623      	mov	r3, r4
 800662a:	4602      	mov	r2, r0
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f001 fe1d 	bl	800826c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	7b5b      	ldrb	r3, [r3, #13]
 800663e:	2200      	movs	r2, #0
 8006640:	4619      	mov	r1, r3
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f002 f928 	bl	8008898 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	7b1b      	ldrb	r3, [r3, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f002 f921 	bl	8008898 <USBH_LL_SetToggle>

  return USBH_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	bd90      	pop	{r4, r7, pc}

08006660 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800666e:	69db      	ldr	r3, [r3, #28]
 8006670:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00e      	beq.n	8006698 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	4619      	mov	r1, r3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f001 fe12 	bl	80082aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	4619      	mov	r1, r3
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f001 fe3d 	bl	800830c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	7b1b      	ldrb	r3, [r3, #12]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00e      	beq.n	80066be <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	7b1b      	ldrb	r3, [r3, #12]
 80066a4:	4619      	mov	r1, r3
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f001 fdff 	bl	80082aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	7b1b      	ldrb	r3, [r3, #12]
 80066b0:	4619      	mov	r1, r3
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f001 fe2a 	bl	800830c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	7b5b      	ldrb	r3, [r3, #13]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00e      	beq.n	80066e4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	7b5b      	ldrb	r3, [r3, #13]
 80066ca:	4619      	mov	r1, r3
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f001 fdec 	bl	80082aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	7b5b      	ldrb	r3, [r3, #13]
 80066d6:	4619      	mov	r1, r3
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f001 fe17 	bl	800830c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066ea:	69db      	ldr	r3, [r3, #28]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00b      	beq.n	8006708 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066f6:	69db      	ldr	r3, [r3, #28]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f002 fd4f 	bl	800919c <free>
    phost->pActiveClass->pData = 0U;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006704:	2200      	movs	r2, #0
 8006706:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b084      	sub	sp, #16
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006720:	69db      	ldr	r3, [r3, #28]
 8006722:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	3340      	adds	r3, #64	; 0x40
 8006728:	4619      	mov	r1, r3
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f8b1 	bl	8006892 <GetLineCoding>
 8006730:	4603      	mov	r3, r0
 8006732:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006734:	7afb      	ldrb	r3, [r7, #11]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d105      	bne.n	8006746 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006740:	2102      	movs	r1, #2
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006746:	7afb      	ldrb	r3, [r7, #11]
}
 8006748:	4618      	mov	r0, r3
 800674a:	3710      	adds	r7, #16
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006758:	2301      	movs	r3, #1
 800675a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800675c:	2300      	movs	r3, #0
 800675e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006766:	69db      	ldr	r3, [r3, #28]
 8006768:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006770:	2b04      	cmp	r3, #4
 8006772:	d877      	bhi.n	8006864 <USBH_CDC_Process+0x114>
 8006774:	a201      	add	r2, pc, #4	; (adr r2, 800677c <USBH_CDC_Process+0x2c>)
 8006776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677a:	bf00      	nop
 800677c:	08006791 	.word	0x08006791
 8006780:	08006797 	.word	0x08006797
 8006784:	080067c7 	.word	0x080067c7
 8006788:	0800683b 	.word	0x0800683b
 800678c:	08006849 	.word	0x08006849
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006790:	2300      	movs	r3, #0
 8006792:	73fb      	strb	r3, [r7, #15]
      break;
 8006794:	e06d      	b.n	8006872 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800679a:	4619      	mov	r1, r3
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f897 	bl	80068d0 <SetLineCoding>
 80067a2:	4603      	mov	r3, r0
 80067a4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80067a6:	7bbb      	ldrb	r3, [r7, #14]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d104      	bne.n	80067b6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2202      	movs	r2, #2
 80067b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80067b4:	e058      	b.n	8006868 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80067b6:	7bbb      	ldrb	r3, [r7, #14]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d055      	beq.n	8006868 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2204      	movs	r2, #4
 80067c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80067c4:	e050      	b.n	8006868 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	3340      	adds	r3, #64	; 0x40
 80067ca:	4619      	mov	r1, r3
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f860 	bl	8006892 <GetLineCoding>
 80067d2:	4603      	mov	r3, r0
 80067d4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80067d6:	7bbb      	ldrb	r3, [r7, #14]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d126      	bne.n	800682a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ee:	791b      	ldrb	r3, [r3, #4]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d13b      	bne.n	800686c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067fe:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006800:	429a      	cmp	r2, r3
 8006802:	d133      	bne.n	800686c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800680e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006810:	429a      	cmp	r2, r3
 8006812:	d12b      	bne.n	800686c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800681c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800681e:	429a      	cmp	r2, r3
 8006820:	d124      	bne.n	800686c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f958 	bl	8006ad8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006828:	e020      	b.n	800686c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800682a:	7bbb      	ldrb	r3, [r7, #14]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d01d      	beq.n	800686c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	2204      	movs	r2, #4
 8006834:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006838:	e018      	b.n	800686c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f867 	bl	800690e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f8da 	bl	80069fa <CDC_ProcessReception>
      break;
 8006846:	e014      	b.n	8006872 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006848:	2100      	movs	r1, #0
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 ffef 	bl	800782e <USBH_ClrFeature>
 8006850:	4603      	mov	r3, r0
 8006852:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006854:	7bbb      	ldrb	r3, [r7, #14]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10a      	bne.n	8006870 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006862:	e005      	b.n	8006870 <USBH_CDC_Process+0x120>

    default:
      break;
 8006864:	bf00      	nop
 8006866:	e004      	b.n	8006872 <USBH_CDC_Process+0x122>
      break;
 8006868:	bf00      	nop
 800686a:	e002      	b.n	8006872 <USBH_CDC_Process+0x122>
      break;
 800686c:	bf00      	nop
 800686e:	e000      	b.n	8006872 <USBH_CDC_Process+0x122>
      break;
 8006870:	bf00      	nop

  }

  return status;
 8006872:	7bfb      	ldrb	r3, [r7, #15]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b082      	sub	sp, #8
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
 800689a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	22a1      	movs	r2, #161	; 0xa1
 80068a0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2221      	movs	r2, #33	; 0x21
 80068a6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2207      	movs	r2, #7
 80068b8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2207      	movs	r2, #7
 80068be:	4619      	mov	r1, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f001 fa81 	bl	8007dc8 <USBH_CtlReq>
 80068c6:	4603      	mov	r3, r0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2221      	movs	r2, #33	; 0x21
 80068de:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2220      	movs	r2, #32
 80068e4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2207      	movs	r2, #7
 80068f6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	2207      	movs	r2, #7
 80068fc:	4619      	mov	r1, r3
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f001 fa62 	bl	8007dc8 <USBH_CtlReq>
 8006904:	4603      	mov	r3, r0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b086      	sub	sp, #24
 8006912:	af02      	add	r7, sp, #8
 8006914:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800691c:	69db      	ldr	r3, [r3, #28]
 800691e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006920:	2300      	movs	r3, #0
 8006922:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800692a:	2b01      	cmp	r3, #1
 800692c:	d002      	beq.n	8006934 <CDC_ProcessTransmission+0x26>
 800692e:	2b02      	cmp	r3, #2
 8006930:	d023      	beq.n	800697a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006932:	e05e      	b.n	80069f2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	8b12      	ldrh	r2, [r2, #24]
 800693c:	4293      	cmp	r3, r2
 800693e:	d90b      	bls.n	8006958 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	69d9      	ldr	r1, [r3, #28]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	8b1a      	ldrh	r2, [r3, #24]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	7b5b      	ldrb	r3, [r3, #13]
 800694c:	2001      	movs	r0, #1
 800694e:	9000      	str	r0, [sp, #0]
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f001 fc48 	bl	80081e6 <USBH_BulkSendData>
 8006956:	e00b      	b.n	8006970 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006960:	b29a      	uxth	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	7b5b      	ldrb	r3, [r3, #13]
 8006966:	2001      	movs	r0, #1
 8006968:	9000      	str	r0, [sp, #0]
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f001 fc3b 	bl	80081e6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2202      	movs	r2, #2
 8006974:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006978:	e03b      	b.n	80069f2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	7b5b      	ldrb	r3, [r3, #13]
 800697e:	4619      	mov	r1, r3
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f001 ff5f 	bl	8008844 <USBH_LL_GetURBState>
 8006986:	4603      	mov	r3, r0
 8006988:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800698a:	7afb      	ldrb	r3, [r7, #11]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d128      	bne.n	80069e2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	8b12      	ldrh	r2, [r2, #24]
 8006998:	4293      	cmp	r3, r2
 800699a:	d90e      	bls.n	80069ba <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	8b12      	ldrh	r2, [r2, #24]
 80069a4:	1a9a      	subs	r2, r3, r2
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	8b12      	ldrh	r2, [r2, #24]
 80069b2:	441a      	add	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	61da      	str	r2, [r3, #28]
 80069b8:	e002      	b.n	80069c0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d004      	beq.n	80069d2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80069d0:	e00e      	b.n	80069f0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f868 	bl	8006ab0 <USBH_CDC_TransmitCallback>
      break;
 80069e0:	e006      	b.n	80069f0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80069e2:	7afb      	ldrb	r3, [r7, #11]
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d103      	bne.n	80069f0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80069f0:	bf00      	nop
  }
}
 80069f2:	bf00      	nop
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b086      	sub	sp, #24
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a08:	69db      	ldr	r3, [r3, #28]
 8006a0a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006a16:	2b03      	cmp	r3, #3
 8006a18:	d002      	beq.n	8006a20 <CDC_ProcessReception+0x26>
 8006a1a:	2b04      	cmp	r3, #4
 8006a1c:	d00e      	beq.n	8006a3c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006a1e:	e043      	b.n	8006aa8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	6a19      	ldr	r1, [r3, #32]
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	8b5a      	ldrh	r2, [r3, #26]
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	7b1b      	ldrb	r3, [r3, #12]
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f001 fbff 	bl	8008230 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	2204      	movs	r2, #4
 8006a36:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006a3a:	e035      	b.n	8006aa8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	7b1b      	ldrb	r3, [r3, #12]
 8006a40:	4619      	mov	r1, r3
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f001 fefe 	bl	8008844 <USBH_LL_GetURBState>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006a4c:	7cfb      	ldrb	r3, [r7, #19]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d129      	bne.n	8006aa6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	7b1b      	ldrb	r3, [r3, #12]
 8006a56:	4619      	mov	r1, r3
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f001 fe61 	bl	8008720 <USBH_LL_GetLastXferSize>
 8006a5e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d016      	beq.n	8006a98 <CDC_ProcessReception+0x9e>
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	8b5b      	ldrh	r3, [r3, #26]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d910      	bls.n	8006a98 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	1ad2      	subs	r2, r2, r3
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	6a1a      	ldr	r2, [r3, #32]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	441a      	add	r2, r3
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	2203      	movs	r2, #3
 8006a92:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006a96:	e006      	b.n	8006aa6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 f80f 	bl	8006ac4 <USBH_CDC_ReceiveCallback>
      break;
 8006aa6:	bf00      	nop
  }
}
 8006aa8:	bf00      	nop
 8006aaa:	3718      	adds	r7, #24
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	4613      	mov	r3, r2
 8006af8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006b00:	2302      	movs	r3, #2
 8006b02:	e029      	b.n	8006b58 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	79fa      	ldrb	r2, [r7, #7]
 8006b08:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 f81f 	bl	8006b60 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d003      	beq.n	8006b50 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f001 fd31 	bl	80085b8 <USBH_LL_Init>

  return USBH_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	60fb      	str	r3, [r7, #12]
 8006b70:	e009      	b.n	8006b86 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	33e0      	adds	r3, #224	; 0xe0
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	3301      	adds	r3, #1
 8006b84:	60fb      	str	r3, [r7, #12]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2b0f      	cmp	r3, #15
 8006b8a:	d9f2      	bls.n	8006b72 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	60fb      	str	r3, [r7, #12]
 8006b90:	e009      	b.n	8006ba6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	60fb      	str	r3, [r7, #12]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bac:	d3f1      	bcc.n	8006b92 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2240      	movs	r2, #64	; 0x40
 8006bd2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3714      	adds	r7, #20
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006c12:	2300      	movs	r3, #0
 8006c14:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d016      	beq.n	8006c4a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10e      	bne.n	8006c44 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006c2c:	1c59      	adds	r1, r3, #1
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	33de      	adds	r3, #222	; 0xde
 8006c38:	6839      	ldr	r1, [r7, #0]
 8006c3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	73fb      	strb	r3, [r7, #15]
 8006c42:	e004      	b.n	8006c4e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006c44:	2302      	movs	r3, #2
 8006c46:	73fb      	strb	r3, [r7, #15]
 8006c48:	e001      	b.n	8006c4e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3714      	adds	r7, #20
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	460b      	mov	r3, r1
 8006c66:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006c72:	78fa      	ldrb	r2, [r7, #3]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d204      	bcs.n	8006c82 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	78fa      	ldrb	r2, [r7, #3]
 8006c7c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006c80:	e001      	b.n	8006c86 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006c82:	2302      	movs	r3, #2
 8006c84:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	4608      	mov	r0, r1
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	70fb      	strb	r3, [r7, #3]
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	70bb      	strb	r3, [r7, #2]
 8006caa:	4613      	mov	r3, r2
 8006cac:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006cbc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006cbe:	e025      	b.n	8006d0c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006cc0:	7dfb      	ldrb	r3, [r7, #23]
 8006cc2:	221a      	movs	r2, #26
 8006cc4:	fb02 f303 	mul.w	r3, r2, r3
 8006cc8:	3308      	adds	r3, #8
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	4413      	add	r3, r2
 8006cce:	3302      	adds	r3, #2
 8006cd0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	795b      	ldrb	r3, [r3, #5]
 8006cd6:	78fa      	ldrb	r2, [r7, #3]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d002      	beq.n	8006ce2 <USBH_FindInterface+0x4e>
 8006cdc:	78fb      	ldrb	r3, [r7, #3]
 8006cde:	2bff      	cmp	r3, #255	; 0xff
 8006ce0:	d111      	bne.n	8006d06 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006ce6:	78ba      	ldrb	r2, [r7, #2]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d002      	beq.n	8006cf2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006cec:	78bb      	ldrb	r3, [r7, #2]
 8006cee:	2bff      	cmp	r3, #255	; 0xff
 8006cf0:	d109      	bne.n	8006d06 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006cf6:	787a      	ldrb	r2, [r7, #1]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d002      	beq.n	8006d02 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006cfc:	787b      	ldrb	r3, [r7, #1]
 8006cfe:	2bff      	cmp	r3, #255	; 0xff
 8006d00:	d101      	bne.n	8006d06 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006d02:	7dfb      	ldrb	r3, [r7, #23]
 8006d04:	e006      	b.n	8006d14 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006d06:	7dfb      	ldrb	r3, [r7, #23]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006d0c:	7dfb      	ldrb	r3, [r7, #23]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d9d6      	bls.n	8006cc0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006d12:	23ff      	movs	r3, #255	; 0xff
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	371c      	adds	r7, #28
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f001 fc81 	bl	8008630 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006d2e:	2101      	movs	r1, #1
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f001 fd9a 	bl	800886a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b088      	sub	sp, #32
 8006d44:	af04      	add	r7, sp, #16
 8006d46:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006d48:	2302      	movs	r3, #2
 8006d4a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d102      	bne.n	8006d62 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2203      	movs	r2, #3
 8006d60:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b0b      	cmp	r3, #11
 8006d6a:	f200 81be 	bhi.w	80070ea <USBH_Process+0x3aa>
 8006d6e:	a201      	add	r2, pc, #4	; (adr r2, 8006d74 <USBH_Process+0x34>)
 8006d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d74:	08006da5 	.word	0x08006da5
 8006d78:	08006dd7 	.word	0x08006dd7
 8006d7c:	08006e3f 	.word	0x08006e3f
 8006d80:	08007085 	.word	0x08007085
 8006d84:	080070eb 	.word	0x080070eb
 8006d88:	08006ee3 	.word	0x08006ee3
 8006d8c:	0800702b 	.word	0x0800702b
 8006d90:	08006f19 	.word	0x08006f19
 8006d94:	08006f39 	.word	0x08006f39
 8006d98:	08006f59 	.word	0x08006f59
 8006d9c:	08006f9d 	.word	0x08006f9d
 8006da0:	0800706d 	.word	0x0800706d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 819e 	beq.w	80070ee <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006db8:	20c8      	movs	r0, #200	; 0xc8
 8006dba:	f001 fd9d 	bl	80088f8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f001 fc93 	bl	80086ea <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006dd4:	e18b      	b.n	80070ee <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d107      	bne.n	8006df0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2202      	movs	r2, #2
 8006dec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006dee:	e18d      	b.n	800710c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006df6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dfa:	d914      	bls.n	8006e26 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006e02:	3301      	adds	r3, #1
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006e12:	2b03      	cmp	r3, #3
 8006e14:	d903      	bls.n	8006e1e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	220d      	movs	r2, #13
 8006e1a:	701a      	strb	r2, [r3, #0]
      break;
 8006e1c:	e176      	b.n	800710c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	701a      	strb	r2, [r3, #0]
      break;
 8006e24:	e172      	b.n	800710c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006e2c:	f103 020a 	add.w	r2, r3, #10
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006e36:	200a      	movs	r0, #10
 8006e38:	f001 fd5e 	bl	80088f8 <USBH_Delay>
      break;
 8006e3c:	e166      	b.n	800710c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d005      	beq.n	8006e54 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e4e:	2104      	movs	r1, #4
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006e54:	2064      	movs	r0, #100	; 0x64
 8006e56:	f001 fd4f 	bl	80088f8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f001 fc1e 	bl	800869c <USBH_LL_GetSpeed>
 8006e60:	4603      	mov	r3, r0
 8006e62:	461a      	mov	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2205      	movs	r2, #5
 8006e6e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006e70:	2100      	movs	r1, #0
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f001 fa29 	bl	80082ca <USBH_AllocPipe>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006e80:	2180      	movs	r1, #128	; 0x80
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f001 fa21 	bl	80082ca <USBH_AllocPipe>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	7919      	ldrb	r1, [r3, #4]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006ea4:	b292      	uxth	r2, r2
 8006ea6:	9202      	str	r2, [sp, #8]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	9201      	str	r2, [sp, #4]
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2280      	movs	r2, #128	; 0x80
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f001 f9da 	bl	800826c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	7959      	ldrb	r1, [r3, #5]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006ecc:	b292      	uxth	r2, r2
 8006ece:	9202      	str	r2, [sp, #8]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	9201      	str	r2, [sp, #4]
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2200      	movs	r2, #0
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f001 f9c6 	bl	800826c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ee0:	e114      	b.n	800710c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f918 	bl	8007118 <USBH_HandleEnum>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006eec:	7bbb      	ldrb	r3, [r7, #14]
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f040 80fe 	bne.w	80070f2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d103      	bne.n	8006f10 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2208      	movs	r2, #8
 8006f0c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006f0e:	e0f0      	b.n	80070f2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2207      	movs	r2, #7
 8006f14:	701a      	strb	r2, [r3, #0]
      break;
 8006f16:	e0ec      	b.n	80070f2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f000 80e9 	beq.w	80070f6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f2a:	2101      	movs	r1, #1
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2208      	movs	r2, #8
 8006f34:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006f36:	e0de      	b.n	80070f6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	4619      	mov	r1, r3
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fc2c 	bl	80077a0 <USBH_SetCfg>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f040 80d5 	bne.w	80070fa <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2209      	movs	r2, #9
 8006f54:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f56:	e0d0      	b.n	80070fa <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006f5e:	f003 0320 	and.w	r3, r3, #32
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d016      	beq.n	8006f94 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006f66:	2101      	movs	r1, #1
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fc3c 	bl	80077e6 <USBH_SetFeature>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006f72:	7bbb      	ldrb	r3, [r7, #14]
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d103      	bne.n	8006f82 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	220a      	movs	r2, #10
 8006f7e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f80:	e0bd      	b.n	80070fe <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006f82:	7bbb      	ldrb	r3, [r7, #14]
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	2b03      	cmp	r3, #3
 8006f88:	f040 80b9 	bne.w	80070fe <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	220a      	movs	r2, #10
 8006f90:	701a      	strb	r2, [r3, #0]
      break;
 8006f92:	e0b4      	b.n	80070fe <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	220a      	movs	r2, #10
 8006f98:	701a      	strb	r2, [r3, #0]
      break;
 8006f9a:	e0b0      	b.n	80070fe <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	f000 80ad 	beq.w	8007102 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	73fb      	strb	r3, [r7, #15]
 8006fb4:	e016      	b.n	8006fe4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006fb6:	7bfa      	ldrb	r2, [r7, #15]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	32de      	adds	r2, #222	; 0xde
 8006fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc0:	791a      	ldrb	r2, [r3, #4]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d108      	bne.n	8006fde <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006fcc:	7bfa      	ldrb	r2, [r7, #15]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	32de      	adds	r2, #222	; 0xde
 8006fd2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006fdc:	e005      	b.n	8006fea <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006fde:	7bfb      	ldrb	r3, [r7, #15]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	73fb      	strb	r3, [r7, #15]
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d0e5      	beq.n	8006fb6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d016      	beq.n	8007022 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	4798      	blx	r3
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d109      	bne.n	800701a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2206      	movs	r2, #6
 800700a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007012:	2103      	movs	r1, #3
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007018:	e073      	b.n	8007102 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	220d      	movs	r2, #13
 800701e:	701a      	strb	r2, [r3, #0]
      break;
 8007020:	e06f      	b.n	8007102 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	220d      	movs	r2, #13
 8007026:	701a      	strb	r2, [r3, #0]
      break;
 8007028:	e06b      	b.n	8007102 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007030:	2b00      	cmp	r3, #0
 8007032:	d017      	beq.n	8007064 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	4798      	blx	r3
 8007040:	4603      	mov	r3, r0
 8007042:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007044:	7bbb      	ldrb	r3, [r7, #14]
 8007046:	b2db      	uxtb	r3, r3
 8007048:	2b00      	cmp	r3, #0
 800704a:	d103      	bne.n	8007054 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	220b      	movs	r2, #11
 8007050:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007052:	e058      	b.n	8007106 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007054:	7bbb      	ldrb	r3, [r7, #14]
 8007056:	b2db      	uxtb	r3, r3
 8007058:	2b02      	cmp	r3, #2
 800705a:	d154      	bne.n	8007106 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	220d      	movs	r2, #13
 8007060:	701a      	strb	r2, [r3, #0]
      break;
 8007062:	e050      	b.n	8007106 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	220d      	movs	r2, #13
 8007068:	701a      	strb	r2, [r3, #0]
      break;
 800706a:	e04c      	b.n	8007106 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007072:	2b00      	cmp	r3, #0
 8007074:	d049      	beq.n	800710a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	4798      	blx	r3
      }
      break;
 8007082:	e042      	b.n	800710a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f7ff fd67 	bl	8006b60 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007098:	2b00      	cmp	r3, #0
 800709a:	d009      	beq.n	80070b0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d005      	beq.n	80070c6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070c0:	2105      	movs	r1, #5
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d107      	bne.n	80070e2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7ff fe20 	bl	8006d20 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80070e0:	e014      	b.n	800710c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f001 faa4 	bl	8008630 <USBH_LL_Start>
      break;
 80070e8:	e010      	b.n	800710c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80070ea:	bf00      	nop
 80070ec:	e00e      	b.n	800710c <USBH_Process+0x3cc>
      break;
 80070ee:	bf00      	nop
 80070f0:	e00c      	b.n	800710c <USBH_Process+0x3cc>
      break;
 80070f2:	bf00      	nop
 80070f4:	e00a      	b.n	800710c <USBH_Process+0x3cc>
    break;
 80070f6:	bf00      	nop
 80070f8:	e008      	b.n	800710c <USBH_Process+0x3cc>
      break;
 80070fa:	bf00      	nop
 80070fc:	e006      	b.n	800710c <USBH_Process+0x3cc>
      break;
 80070fe:	bf00      	nop
 8007100:	e004      	b.n	800710c <USBH_Process+0x3cc>
      break;
 8007102:	bf00      	nop
 8007104:	e002      	b.n	800710c <USBH_Process+0x3cc>
      break;
 8007106:	bf00      	nop
 8007108:	e000      	b.n	800710c <USBH_Process+0x3cc>
      break;
 800710a:	bf00      	nop
  }
  return USBH_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop

08007118 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b088      	sub	sp, #32
 800711c:	af04      	add	r7, sp, #16
 800711e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007120:	2301      	movs	r3, #1
 8007122:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007124:	2301      	movs	r3, #1
 8007126:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	785b      	ldrb	r3, [r3, #1]
 800712c:	2b07      	cmp	r3, #7
 800712e:	f200 81c1 	bhi.w	80074b4 <USBH_HandleEnum+0x39c>
 8007132:	a201      	add	r2, pc, #4	; (adr r2, 8007138 <USBH_HandleEnum+0x20>)
 8007134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007138:	08007159 	.word	0x08007159
 800713c:	08007217 	.word	0x08007217
 8007140:	08007281 	.word	0x08007281
 8007144:	0800730f 	.word	0x0800730f
 8007148:	08007379 	.word	0x08007379
 800714c:	080073e9 	.word	0x080073e9
 8007150:	0800742f 	.word	0x0800742f
 8007154:	08007475 	.word	0x08007475
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007158:	2108      	movs	r1, #8
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fa50 	bl	8007600 <USBH_Get_DevDesc>
 8007160:	4603      	mov	r3, r0
 8007162:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007164:	7bbb      	ldrb	r3, [r7, #14]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d130      	bne.n	80071cc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	7919      	ldrb	r1, [r3, #4]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800718e:	b292      	uxth	r2, r2
 8007190:	9202      	str	r2, [sp, #8]
 8007192:	2200      	movs	r2, #0
 8007194:	9201      	str	r2, [sp, #4]
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	4603      	mov	r3, r0
 800719a:	2280      	movs	r2, #128	; 0x80
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f001 f865 	bl	800826c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	7959      	ldrb	r1, [r3, #5]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80071b6:	b292      	uxth	r2, r2
 80071b8:	9202      	str	r2, [sp, #8]
 80071ba:	2200      	movs	r2, #0
 80071bc:	9201      	str	r2, [sp, #4]
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	4603      	mov	r3, r0
 80071c2:	2200      	movs	r2, #0
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f001 f851 	bl	800826c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80071ca:	e175      	b.n	80074b8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071cc:	7bbb      	ldrb	r3, [r7, #14]
 80071ce:	2b03      	cmp	r3, #3
 80071d0:	f040 8172 	bne.w	80074b8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071da:	3301      	adds	r3, #1
 80071dc:	b2da      	uxtb	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071ea:	2b03      	cmp	r3, #3
 80071ec:	d903      	bls.n	80071f6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	220d      	movs	r2, #13
 80071f2:	701a      	strb	r2, [r3, #0]
      break;
 80071f4:	e160      	b.n	80074b8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	795b      	ldrb	r3, [r3, #5]
 80071fa:	4619      	mov	r1, r3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f001 f885 	bl	800830c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	791b      	ldrb	r3, [r3, #4]
 8007206:	4619      	mov	r1, r3
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f001 f87f 	bl	800830c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	701a      	strb	r2, [r3, #0]
      break;
 8007214:	e150      	b.n	80074b8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007216:	2112      	movs	r1, #18
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 f9f1 	bl	8007600 <USBH_Get_DevDesc>
 800721e:	4603      	mov	r3, r0
 8007220:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007222:	7bbb      	ldrb	r3, [r7, #14]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d103      	bne.n	8007230 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2202      	movs	r2, #2
 800722c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800722e:	e145      	b.n	80074bc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007230:	7bbb      	ldrb	r3, [r7, #14]
 8007232:	2b03      	cmp	r3, #3
 8007234:	f040 8142 	bne.w	80074bc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800723e:	3301      	adds	r3, #1
 8007240:	b2da      	uxtb	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800724e:	2b03      	cmp	r3, #3
 8007250:	d903      	bls.n	800725a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	220d      	movs	r2, #13
 8007256:	701a      	strb	r2, [r3, #0]
      break;
 8007258:	e130      	b.n	80074bc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	795b      	ldrb	r3, [r3, #5]
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f001 f853 	bl	800830c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	791b      	ldrb	r3, [r3, #4]
 800726a:	4619      	mov	r1, r3
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f001 f84d 	bl	800830c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	701a      	strb	r2, [r3, #0]
      break;
 800727e:	e11d      	b.n	80074bc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007280:	2101      	movs	r1, #1
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 fa68 	bl	8007758 <USBH_SetAddress>
 8007288:	4603      	mov	r3, r0
 800728a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800728c:	7bbb      	ldrb	r3, [r7, #14]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d132      	bne.n	80072f8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007292:	2002      	movs	r0, #2
 8007294:	f001 fb30 	bl	80088f8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2203      	movs	r2, #3
 80072a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	7919      	ldrb	r1, [r3, #4]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80072ba:	b292      	uxth	r2, r2
 80072bc:	9202      	str	r2, [sp, #8]
 80072be:	2200      	movs	r2, #0
 80072c0:	9201      	str	r2, [sp, #4]
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	4603      	mov	r3, r0
 80072c6:	2280      	movs	r2, #128	; 0x80
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 ffcf 	bl	800826c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	7959      	ldrb	r1, [r3, #5]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80072e2:	b292      	uxth	r2, r2
 80072e4:	9202      	str	r2, [sp, #8]
 80072e6:	2200      	movs	r2, #0
 80072e8:	9201      	str	r2, [sp, #4]
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	4603      	mov	r3, r0
 80072ee:	2200      	movs	r2, #0
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 ffbb 	bl	800826c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80072f6:	e0e3      	b.n	80074c0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072f8:	7bbb      	ldrb	r3, [r7, #14]
 80072fa:	2b03      	cmp	r3, #3
 80072fc:	f040 80e0 	bne.w	80074c0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	220d      	movs	r2, #13
 8007304:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	705a      	strb	r2, [r3, #1]
      break;
 800730c:	e0d8      	b.n	80074c0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800730e:	2109      	movs	r1, #9
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f99d 	bl	8007650 <USBH_Get_CfgDesc>
 8007316:	4603      	mov	r3, r0
 8007318:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800731a:	7bbb      	ldrb	r3, [r7, #14]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d103      	bne.n	8007328 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2204      	movs	r2, #4
 8007324:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007326:	e0cd      	b.n	80074c4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007328:	7bbb      	ldrb	r3, [r7, #14]
 800732a:	2b03      	cmp	r3, #3
 800732c:	f040 80ca 	bne.w	80074c4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007336:	3301      	adds	r3, #1
 8007338:	b2da      	uxtb	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007346:	2b03      	cmp	r3, #3
 8007348:	d903      	bls.n	8007352 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	220d      	movs	r2, #13
 800734e:	701a      	strb	r2, [r3, #0]
      break;
 8007350:	e0b8      	b.n	80074c4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	795b      	ldrb	r3, [r3, #5]
 8007356:	4619      	mov	r1, r3
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 ffd7 	bl	800830c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	791b      	ldrb	r3, [r3, #4]
 8007362:	4619      	mov	r1, r3
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 ffd1 	bl	800830c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	701a      	strb	r2, [r3, #0]
      break;
 8007376:	e0a5      	b.n	80074c4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800737e:	4619      	mov	r1, r3
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 f965 	bl	8007650 <USBH_Get_CfgDesc>
 8007386:	4603      	mov	r3, r0
 8007388:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800738a:	7bbb      	ldrb	r3, [r7, #14]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d103      	bne.n	8007398 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2205      	movs	r2, #5
 8007394:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007396:	e097      	b.n	80074c8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007398:	7bbb      	ldrb	r3, [r7, #14]
 800739a:	2b03      	cmp	r3, #3
 800739c:	f040 8094 	bne.w	80074c8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073a6:	3301      	adds	r3, #1
 80073a8:	b2da      	uxtb	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073b6:	2b03      	cmp	r3, #3
 80073b8:	d903      	bls.n	80073c2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	220d      	movs	r2, #13
 80073be:	701a      	strb	r2, [r3, #0]
      break;
 80073c0:	e082      	b.n	80074c8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	795b      	ldrb	r3, [r3, #5]
 80073c6:	4619      	mov	r1, r3
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 ff9f 	bl	800830c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	791b      	ldrb	r3, [r3, #4]
 80073d2:	4619      	mov	r1, r3
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 ff99 	bl	800830c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	701a      	strb	r2, [r3, #0]
      break;
 80073e6:	e06f      	b.n	80074c8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d019      	beq.n	8007426 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80073fe:	23ff      	movs	r3, #255	; 0xff
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 f949 	bl	8007698 <USBH_Get_StringDesc>
 8007406:	4603      	mov	r3, r0
 8007408:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800740a:	7bbb      	ldrb	r3, [r7, #14]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d103      	bne.n	8007418 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2206      	movs	r2, #6
 8007414:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007416:	e059      	b.n	80074cc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007418:	7bbb      	ldrb	r3, [r7, #14]
 800741a:	2b03      	cmp	r3, #3
 800741c:	d156      	bne.n	80074cc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2206      	movs	r2, #6
 8007422:	705a      	strb	r2, [r3, #1]
      break;
 8007424:	e052      	b.n	80074cc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2206      	movs	r2, #6
 800742a:	705a      	strb	r2, [r3, #1]
      break;
 800742c:	e04e      	b.n	80074cc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007434:	2b00      	cmp	r3, #0
 8007436:	d019      	beq.n	800746c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007444:	23ff      	movs	r3, #255	; 0xff
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f926 	bl	8007698 <USBH_Get_StringDesc>
 800744c:	4603      	mov	r3, r0
 800744e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007450:	7bbb      	ldrb	r3, [r7, #14]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d103      	bne.n	800745e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2207      	movs	r2, #7
 800745a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800745c:	e038      	b.n	80074d0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800745e:	7bbb      	ldrb	r3, [r7, #14]
 8007460:	2b03      	cmp	r3, #3
 8007462:	d135      	bne.n	80074d0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2207      	movs	r2, #7
 8007468:	705a      	strb	r2, [r3, #1]
      break;
 800746a:	e031      	b.n	80074d0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2207      	movs	r2, #7
 8007470:	705a      	strb	r2, [r3, #1]
      break;
 8007472:	e02d      	b.n	80074d0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800747a:	2b00      	cmp	r3, #0
 800747c:	d017      	beq.n	80074ae <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800748a:	23ff      	movs	r3, #255	; 0xff
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f903 	bl	8007698 <USBH_Get_StringDesc>
 8007492:	4603      	mov	r3, r0
 8007494:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007496:	7bbb      	ldrb	r3, [r7, #14]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d102      	bne.n	80074a2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800749c:	2300      	movs	r3, #0
 800749e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80074a0:	e018      	b.n	80074d4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074a2:	7bbb      	ldrb	r3, [r7, #14]
 80074a4:	2b03      	cmp	r3, #3
 80074a6:	d115      	bne.n	80074d4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80074a8:	2300      	movs	r3, #0
 80074aa:	73fb      	strb	r3, [r7, #15]
      break;
 80074ac:	e012      	b.n	80074d4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80074ae:	2300      	movs	r3, #0
 80074b0:	73fb      	strb	r3, [r7, #15]
      break;
 80074b2:	e00f      	b.n	80074d4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80074b4:	bf00      	nop
 80074b6:	e00e      	b.n	80074d6 <USBH_HandleEnum+0x3be>
      break;
 80074b8:	bf00      	nop
 80074ba:	e00c      	b.n	80074d6 <USBH_HandleEnum+0x3be>
      break;
 80074bc:	bf00      	nop
 80074be:	e00a      	b.n	80074d6 <USBH_HandleEnum+0x3be>
      break;
 80074c0:	bf00      	nop
 80074c2:	e008      	b.n	80074d6 <USBH_HandleEnum+0x3be>
      break;
 80074c4:	bf00      	nop
 80074c6:	e006      	b.n	80074d6 <USBH_HandleEnum+0x3be>
      break;
 80074c8:	bf00      	nop
 80074ca:	e004      	b.n	80074d6 <USBH_HandleEnum+0x3be>
      break;
 80074cc:	bf00      	nop
 80074ce:	e002      	b.n	80074d6 <USBH_HandleEnum+0x3be>
      break;
 80074d0:	bf00      	nop
 80074d2:	e000      	b.n	80074d6 <USBH_HandleEnum+0x3be>
      break;
 80074d4:	bf00      	nop
  }
  return Status;
 80074d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	683a      	ldr	r2, [r7, #0]
 80074ee:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80074f2:	bf00      	nop
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b082      	sub	sp, #8
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800750c:	1c5a      	adds	r2, r3, #1
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f804 	bl	8007522 <USBH_HandleSof>
}
 800751a:	bf00      	nop
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b082      	sub	sp, #8
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b0b      	cmp	r3, #11
 8007532:	d10a      	bne.n	800754a <USBH_HandleSof+0x28>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800753a:	2b00      	cmp	r3, #0
 800753c:	d005      	beq.n	800754a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	4798      	blx	r3
  }
}
 800754a:	bf00      	nop
 800754c:	3708      	adds	r7, #8
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007552:	b480      	push	{r7}
 8007554:	b083      	sub	sp, #12
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007562:	bf00      	nop
}
 8007564:	370c      	adds	r7, #12
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr

0800756e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800756e:	b480      	push	{r7}
 8007570:	b083      	sub	sp, #12
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800757e:	bf00      	nop
}
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800758a:	b480      	push	{r7}
 800758c:	b083      	sub	sp, #12
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f001 f844 	bl	8008666 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	791b      	ldrb	r3, [r3, #4]
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fe91 	bl	800830c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	795b      	ldrb	r3, [r3, #5]
 80075ee:	4619      	mov	r1, r3
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fe8b 	bl	800830c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af02      	add	r7, sp, #8
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	460b      	mov	r3, r1
 800760a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007612:	78fb      	ldrb	r3, [r7, #3]
 8007614:	b29b      	uxth	r3, r3
 8007616:	9300      	str	r3, [sp, #0]
 8007618:	4613      	mov	r3, r2
 800761a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800761e:	2100      	movs	r1, #0
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f864 	bl	80076ee <USBH_GetDescriptor>
 8007626:	4603      	mov	r3, r0
 8007628:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800762a:	7bfb      	ldrb	r3, [r7, #15]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10a      	bne.n	8007646 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800763c:	78fa      	ldrb	r2, [r7, #3]
 800763e:	b292      	uxth	r2, r2
 8007640:	4619      	mov	r1, r3
 8007642:	f000 f918 	bl	8007876 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007646:	7bfb      	ldrb	r3, [r7, #15]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af02      	add	r7, sp, #8
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	460b      	mov	r3, r1
 800765a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	331c      	adds	r3, #28
 8007660:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007662:	887b      	ldrh	r3, [r7, #2]
 8007664:	9300      	str	r3, [sp, #0]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800766c:	2100      	movs	r1, #0
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f83d 	bl	80076ee <USBH_GetDescriptor>
 8007674:	4603      	mov	r3, r0
 8007676:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007678:	7bfb      	ldrb	r3, [r7, #15]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d107      	bne.n	800768e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800767e:	887b      	ldrh	r3, [r7, #2]
 8007680:	461a      	mov	r2, r3
 8007682:	68b9      	ldr	r1, [r7, #8]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f987 	bl	8007998 <USBH_ParseCfgDesc>
 800768a:	4603      	mov	r3, r0
 800768c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800768e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b088      	sub	sp, #32
 800769c:	af02      	add	r7, sp, #8
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	607a      	str	r2, [r7, #4]
 80076a2:	461a      	mov	r2, r3
 80076a4:	460b      	mov	r3, r1
 80076a6:	72fb      	strb	r3, [r7, #11]
 80076a8:	4613      	mov	r3, r2
 80076aa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80076ac:	7afb      	ldrb	r3, [r7, #11]
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80076b4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80076bc:	893b      	ldrh	r3, [r7, #8]
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	460b      	mov	r3, r1
 80076c2:	2100      	movs	r1, #0
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f000 f812 	bl	80076ee <USBH_GetDescriptor>
 80076ca:	4603      	mov	r3, r0
 80076cc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80076ce:	7dfb      	ldrb	r3, [r7, #23]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d107      	bne.n	80076e4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80076da:	893a      	ldrh	r2, [r7, #8]
 80076dc:	6879      	ldr	r1, [r7, #4]
 80076de:	4618      	mov	r0, r3
 80076e0:	f000 fb24 	bl	8007d2c <USBH_ParseStringDesc>
  }

  return status;
 80076e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3718      	adds	r7, #24
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b084      	sub	sp, #16
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	60f8      	str	r0, [r7, #12]
 80076f6:	607b      	str	r3, [r7, #4]
 80076f8:	460b      	mov	r3, r1
 80076fa:	72fb      	strb	r3, [r7, #11]
 80076fc:	4613      	mov	r3, r2
 80076fe:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	789b      	ldrb	r3, [r3, #2]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d11c      	bne.n	8007742 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007708:	7afb      	ldrb	r3, [r7, #11]
 800770a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800770e:	b2da      	uxtb	r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2206      	movs	r2, #6
 8007718:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	893a      	ldrh	r2, [r7, #8]
 800771e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007720:	893b      	ldrh	r3, [r7, #8]
 8007722:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007726:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800772a:	d104      	bne.n	8007736 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f240 4209 	movw	r2, #1033	; 0x409
 8007732:	829a      	strh	r2, [r3, #20]
 8007734:	e002      	b.n	800773c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	8b3a      	ldrh	r2, [r7, #24]
 8007740:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007742:	8b3b      	ldrh	r3, [r7, #24]
 8007744:	461a      	mov	r2, r3
 8007746:	6879      	ldr	r1, [r7, #4]
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 fb3d 	bl	8007dc8 <USBH_CtlReq>
 800774e:	4603      	mov	r3, r0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	460b      	mov	r3, r1
 8007762:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	789b      	ldrb	r3, [r3, #2]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d10f      	bne.n	800778c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2205      	movs	r2, #5
 8007776:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007778:	78fb      	ldrb	r3, [r7, #3]
 800777a:	b29a      	uxth	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800778c:	2200      	movs	r2, #0
 800778e:	2100      	movs	r1, #0
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 fb19 	bl	8007dc8 <USBH_CtlReq>
 8007796:	4603      	mov	r3, r0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	460b      	mov	r3, r1
 80077aa:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	789b      	ldrb	r3, [r3, #2]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d10e      	bne.n	80077d2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2209      	movs	r2, #9
 80077be:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	887a      	ldrh	r2, [r7, #2]
 80077c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80077d2:	2200      	movs	r2, #0
 80077d4:	2100      	movs	r1, #0
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 faf6 	bl	8007dc8 <USBH_CtlReq>
 80077dc:	4603      	mov	r3, r0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b082      	sub	sp, #8
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	460b      	mov	r3, r1
 80077f0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	789b      	ldrb	r3, [r3, #2]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d10f      	bne.n	800781a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2203      	movs	r2, #3
 8007804:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007806:	78fb      	ldrb	r3, [r7, #3]
 8007808:	b29a      	uxth	r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800781a:	2200      	movs	r2, #0
 800781c:	2100      	movs	r1, #0
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fad2 	bl	8007dc8 <USBH_CtlReq>
 8007824:	4603      	mov	r3, r0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b082      	sub	sp, #8
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
 8007836:	460b      	mov	r3, r1
 8007838:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	789b      	ldrb	r3, [r3, #2]
 800783e:	2b01      	cmp	r3, #1
 8007840:	d10f      	bne.n	8007862 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2202      	movs	r2, #2
 8007846:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007854:	78fb      	ldrb	r3, [r7, #3]
 8007856:	b29a      	uxth	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007862:	2200      	movs	r2, #0
 8007864:	2100      	movs	r1, #0
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 faae 	bl	8007dc8 <USBH_CtlReq>
 800786c:	4603      	mov	r3, r0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007876:	b480      	push	{r7}
 8007878:	b085      	sub	sp, #20
 800787a:	af00      	add	r7, sp, #0
 800787c:	60f8      	str	r0, [r7, #12]
 800787e:	60b9      	str	r1, [r7, #8]
 8007880:	4613      	mov	r3, r2
 8007882:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	781a      	ldrb	r2, [r3, #0]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	785a      	ldrb	r2, [r3, #1]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	3302      	adds	r3, #2
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	b29a      	uxth	r2, r3
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	3303      	adds	r3, #3
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	021b      	lsls	r3, r3, #8
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	4313      	orrs	r3, r2
 80078aa:	b29a      	uxth	r2, r3
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	791a      	ldrb	r2, [r3, #4]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	795a      	ldrb	r2, [r3, #5]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	799a      	ldrb	r2, [r3, #6]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	79da      	ldrb	r2, [r3, #7]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	79db      	ldrb	r3, [r3, #7]
 80078d4:	2b20      	cmp	r3, #32
 80078d6:	dc11      	bgt.n	80078fc <USBH_ParseDevDesc+0x86>
 80078d8:	2b08      	cmp	r3, #8
 80078da:	db16      	blt.n	800790a <USBH_ParseDevDesc+0x94>
 80078dc:	3b08      	subs	r3, #8
 80078de:	2201      	movs	r2, #1
 80078e0:	fa02 f303 	lsl.w	r3, r2, r3
 80078e4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80078e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	bf14      	ite	ne
 80078f0:	2301      	movne	r3, #1
 80078f2:	2300      	moveq	r3, #0
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d102      	bne.n	8007900 <USBH_ParseDevDesc+0x8a>
 80078fa:	e006      	b.n	800790a <USBH_ParseDevDesc+0x94>
 80078fc:	2b40      	cmp	r3, #64	; 0x40
 80078fe:	d104      	bne.n	800790a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	79da      	ldrb	r2, [r3, #7]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	71da      	strb	r2, [r3, #7]
      break;
 8007908:	e003      	b.n	8007912 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2240      	movs	r2, #64	; 0x40
 800790e:	71da      	strb	r2, [r3, #7]
      break;
 8007910:	bf00      	nop
  }

  if (length > 8U)
 8007912:	88fb      	ldrh	r3, [r7, #6]
 8007914:	2b08      	cmp	r3, #8
 8007916:	d939      	bls.n	800798c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	3308      	adds	r3, #8
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	b29a      	uxth	r2, r3
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	3309      	adds	r3, #9
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	b29b      	uxth	r3, r3
 8007928:	021b      	lsls	r3, r3, #8
 800792a:	b29b      	uxth	r3, r3
 800792c:	4313      	orrs	r3, r2
 800792e:	b29a      	uxth	r2, r3
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	330a      	adds	r3, #10
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	b29a      	uxth	r2, r3
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	330b      	adds	r3, #11
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	b29b      	uxth	r3, r3
 8007944:	021b      	lsls	r3, r3, #8
 8007946:	b29b      	uxth	r3, r3
 8007948:	4313      	orrs	r3, r2
 800794a:	b29a      	uxth	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	330c      	adds	r3, #12
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	b29a      	uxth	r2, r3
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	330d      	adds	r3, #13
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	b29b      	uxth	r3, r3
 8007960:	021b      	lsls	r3, r3, #8
 8007962:	b29b      	uxth	r3, r3
 8007964:	4313      	orrs	r3, r2
 8007966:	b29a      	uxth	r2, r3
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	7b9a      	ldrb	r2, [r3, #14]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	7bda      	ldrb	r2, [r3, #15]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	7c1a      	ldrb	r2, [r3, #16]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	7c5a      	ldrb	r2, [r3, #17]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	745a      	strb	r2, [r3, #17]
  }
}
 800798c:	bf00      	nop
 800798e:	3714      	adds	r7, #20
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b08c      	sub	sp, #48	; 0x30
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	4613      	mov	r3, r2
 80079a4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80079ac:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80079b8:	2300      	movs	r3, #0
 80079ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80079be:	2300      	movs	r3, #0
 80079c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	781a      	ldrb	r2, [r3, #0]
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	785a      	ldrb	r2, [r3, #1]
 80079d4:	6a3b      	ldr	r3, [r7, #32]
 80079d6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	3302      	adds	r3, #2
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	b29a      	uxth	r2, r3
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	3303      	adds	r3, #3
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	021b      	lsls	r3, r3, #8
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	4313      	orrs	r3, r2
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079f4:	bf28      	it	cs
 80079f6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	791a      	ldrb	r2, [r3, #4]
 8007a04:	6a3b      	ldr	r3, [r7, #32]
 8007a06:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	795a      	ldrb	r2, [r3, #5]
 8007a0c:	6a3b      	ldr	r3, [r7, #32]
 8007a0e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	799a      	ldrb	r2, [r3, #6]
 8007a14:	6a3b      	ldr	r3, [r7, #32]
 8007a16:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	79da      	ldrb	r2, [r3, #7]
 8007a1c:	6a3b      	ldr	r3, [r7, #32]
 8007a1e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	7a1a      	ldrb	r2, [r3, #8]
 8007a24:	6a3b      	ldr	r3, [r7, #32]
 8007a26:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007a28:	6a3b      	ldr	r3, [r7, #32]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	2b09      	cmp	r3, #9
 8007a2e:	d002      	beq.n	8007a36 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007a30:	6a3b      	ldr	r3, [r7, #32]
 8007a32:	2209      	movs	r2, #9
 8007a34:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007a36:	88fb      	ldrh	r3, [r7, #6]
 8007a38:	2b09      	cmp	r3, #9
 8007a3a:	f240 809d 	bls.w	8007b78 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007a3e:	2309      	movs	r3, #9
 8007a40:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007a42:	2300      	movs	r3, #0
 8007a44:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a46:	e081      	b.n	8007b4c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007a48:	f107 0316 	add.w	r3, r7, #22
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a50:	f000 f99f 	bl	8007d92 <USBH_GetNextDesc>
 8007a54:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a58:	785b      	ldrb	r3, [r3, #1]
 8007a5a:	2b04      	cmp	r3, #4
 8007a5c:	d176      	bne.n	8007b4c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	2b09      	cmp	r3, #9
 8007a64:	d002      	beq.n	8007a6c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a68:	2209      	movs	r2, #9
 8007a6a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a70:	221a      	movs	r2, #26
 8007a72:	fb02 f303 	mul.w	r3, r2, r3
 8007a76:	3308      	adds	r3, #8
 8007a78:	6a3a      	ldr	r2, [r7, #32]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	3302      	adds	r3, #2
 8007a7e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007a80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a82:	69f8      	ldr	r0, [r7, #28]
 8007a84:	f000 f87e 	bl	8007b84 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a92:	e043      	b.n	8007b1c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007a94:	f107 0316 	add.w	r3, r7, #22
 8007a98:	4619      	mov	r1, r3
 8007a9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a9c:	f000 f979 	bl	8007d92 <USBH_GetNextDesc>
 8007aa0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa4:	785b      	ldrb	r3, [r3, #1]
 8007aa6:	2b05      	cmp	r3, #5
 8007aa8:	d138      	bne.n	8007b1c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	795b      	ldrb	r3, [r3, #5]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d10f      	bne.n	8007ad2 <USBH_ParseCfgDesc+0x13a>
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	799b      	ldrb	r3, [r3, #6]
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d10b      	bne.n	8007ad2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	79db      	ldrb	r3, [r3, #7]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10f      	bne.n	8007ae2 <USBH_ParseCfgDesc+0x14a>
 8007ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	2b09      	cmp	r3, #9
 8007ac8:	d00b      	beq.n	8007ae2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007acc:	2209      	movs	r2, #9
 8007ace:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007ad0:	e007      	b.n	8007ae2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	2b07      	cmp	r3, #7
 8007ad8:	d004      	beq.n	8007ae4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007adc:	2207      	movs	r2, #7
 8007ade:	701a      	strb	r2, [r3, #0]
 8007ae0:	e000      	b.n	8007ae4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007ae2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ae8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007aec:	3201      	adds	r2, #1
 8007aee:	00d2      	lsls	r2, r2, #3
 8007af0:	211a      	movs	r1, #26
 8007af2:	fb01 f303 	mul.w	r3, r1, r3
 8007af6:	4413      	add	r3, r2
 8007af8:	3308      	adds	r3, #8
 8007afa:	6a3a      	ldr	r2, [r7, #32]
 8007afc:	4413      	add	r3, r2
 8007afe:	3304      	adds	r3, #4
 8007b00:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007b02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b04:	69b9      	ldr	r1, [r7, #24]
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f000 f86b 	bl	8007be2 <USBH_ParseEPDesc>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007b12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b16:	3301      	adds	r3, #1
 8007b18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	791b      	ldrb	r3, [r3, #4]
 8007b20:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d204      	bcs.n	8007b32 <USBH_ParseCfgDesc+0x19a>
 8007b28:	6a3b      	ldr	r3, [r7, #32]
 8007b2a:	885a      	ldrh	r2, [r3, #2]
 8007b2c:	8afb      	ldrh	r3, [r7, #22]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d8b0      	bhi.n	8007a94 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	791b      	ldrb	r3, [r3, #4]
 8007b36:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d201      	bcs.n	8007b42 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e01c      	b.n	8007b7c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007b42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b46:	3301      	adds	r3, #1
 8007b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d805      	bhi.n	8007b60 <USBH_ParseCfgDesc+0x1c8>
 8007b54:	6a3b      	ldr	r3, [r7, #32]
 8007b56:	885a      	ldrh	r2, [r3, #2]
 8007b58:	8afb      	ldrh	r3, [r7, #22]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	f63f af74 	bhi.w	8007a48 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007b60:	6a3b      	ldr	r3, [r7, #32]
 8007b62:	791b      	ldrb	r3, [r3, #4]
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	bf28      	it	cs
 8007b68:	2302      	movcs	r3, #2
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d201      	bcs.n	8007b78 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e001      	b.n	8007b7c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007b78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3730      	adds	r7, #48	; 0x30
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	781a      	ldrb	r2, [r3, #0]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	785a      	ldrb	r2, [r3, #1]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	789a      	ldrb	r2, [r3, #2]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	78da      	ldrb	r2, [r3, #3]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	791a      	ldrb	r2, [r3, #4]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	795a      	ldrb	r2, [r3, #5]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	799a      	ldrb	r2, [r3, #6]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	79da      	ldrb	r2, [r3, #7]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	7a1a      	ldrb	r2, [r3, #8]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	721a      	strb	r2, [r3, #8]
}
 8007bd6:	bf00      	nop
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b087      	sub	sp, #28
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	60f8      	str	r0, [r7, #12]
 8007bea:	60b9      	str	r1, [r7, #8]
 8007bec:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	781a      	ldrb	r2, [r3, #0]
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	785a      	ldrb	r2, [r3, #1]
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	789a      	ldrb	r2, [r3, #2]
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	78da      	ldrb	r2, [r3, #3]
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	3304      	adds	r3, #4
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	3305      	adds	r3, #5
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	021b      	lsls	r3, r3, #8
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	4313      	orrs	r3, r2
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	799a      	ldrb	r2, [r3, #6]
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	889b      	ldrh	r3, [r3, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d102      	bne.n	8007c44 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	75fb      	strb	r3, [r7, #23]
 8007c42:	e033      	b.n	8007cac <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	889b      	ldrh	r3, [r3, #4]
 8007c48:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007c4c:	f023 0307 	bic.w	r3, r3, #7
 8007c50:	b29a      	uxth	r2, r3
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	889b      	ldrh	r3, [r3, #4]
 8007c5a:	b21a      	sxth	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	3304      	adds	r3, #4
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	b299      	uxth	r1, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	3305      	adds	r3, #5
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	021b      	lsls	r3, r3, #8
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	430b      	orrs	r3, r1
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d110      	bne.n	8007c9e <USBH_ParseEPDesc+0xbc>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	3304      	adds	r3, #4
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	b299      	uxth	r1, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	3305      	adds	r3, #5
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	021b      	lsls	r3, r3, #8
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	430b      	orrs	r3, r1
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	b21b      	sxth	r3, r3
 8007c96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c9a:	b21b      	sxth	r3, r3
 8007c9c:	e001      	b.n	8007ca2 <USBH_ParseEPDesc+0xc0>
 8007c9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	b21b      	sxth	r3, r3
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d116      	bne.n	8007ce4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	78db      	ldrb	r3, [r3, #3]
 8007cba:	f003 0303 	and.w	r3, r3, #3
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d005      	beq.n	8007cce <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	78db      	ldrb	r3, [r3, #3]
 8007cc6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007cca:	2b03      	cmp	r3, #3
 8007ccc:	d127      	bne.n	8007d1e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	799b      	ldrb	r3, [r3, #6]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <USBH_ParseEPDesc+0xfc>
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	799b      	ldrb	r3, [r3, #6]
 8007cda:	2b10      	cmp	r3, #16
 8007cdc:	d91f      	bls.n	8007d1e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	75fb      	strb	r3, [r7, #23]
 8007ce2:	e01c      	b.n	8007d1e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	78db      	ldrb	r3, [r3, #3]
 8007ce8:	f003 0303 	and.w	r3, r3, #3
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d10a      	bne.n	8007d06 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	799b      	ldrb	r3, [r3, #6]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d003      	beq.n	8007d00 <USBH_ParseEPDesc+0x11e>
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	799b      	ldrb	r3, [r3, #6]
 8007cfc:	2b10      	cmp	r3, #16
 8007cfe:	d90e      	bls.n	8007d1e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007d00:	2303      	movs	r3, #3
 8007d02:	75fb      	strb	r3, [r7, #23]
 8007d04:	e00b      	b.n	8007d1e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	78db      	ldrb	r3, [r3, #3]
 8007d0a:	f003 0303 	and.w	r3, r3, #3
 8007d0e:	2b03      	cmp	r3, #3
 8007d10:	d105      	bne.n	8007d1e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	799b      	ldrb	r3, [r3, #6]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d101      	bne.n	8007d1e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	371c      	adds	r7, #28
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b087      	sub	sp, #28
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	4613      	mov	r3, r2
 8007d38:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	2b03      	cmp	r3, #3
 8007d42:	d120      	bne.n	8007d86 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	1e9a      	subs	r2, r3, #2
 8007d4a:	88fb      	ldrh	r3, [r7, #6]
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	bf28      	it	cs
 8007d50:	4613      	movcs	r3, r2
 8007d52:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	3302      	adds	r3, #2
 8007d58:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	82fb      	strh	r3, [r7, #22]
 8007d5e:	e00b      	b.n	8007d78 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007d60:	8afb      	ldrh	r3, [r7, #22]
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	4413      	add	r3, r2
 8007d66:	781a      	ldrb	r2, [r3, #0]
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007d72:	8afb      	ldrh	r3, [r7, #22]
 8007d74:	3302      	adds	r3, #2
 8007d76:	82fb      	strh	r3, [r7, #22]
 8007d78:	8afa      	ldrh	r2, [r7, #22]
 8007d7a:	8abb      	ldrh	r3, [r7, #20]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d3ef      	bcc.n	8007d60 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	2200      	movs	r2, #0
 8007d84:	701a      	strb	r2, [r3, #0]
  }
}
 8007d86:	bf00      	nop
 8007d88:	371c      	adds	r7, #28
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b085      	sub	sp, #20
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
 8007d9a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	881a      	ldrh	r2, [r3, #0]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	4413      	add	r3, r2
 8007da8:	b29a      	uxth	r2, r3
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4413      	add	r3, r2
 8007db8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007dba:	68fb      	ldr	r3, [r7, #12]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3714      	adds	r7, #20
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b086      	sub	sp, #24
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	789b      	ldrb	r3, [r3, #2]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d002      	beq.n	8007de8 <USBH_CtlReq+0x20>
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d00f      	beq.n	8007e06 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007de6:	e027      	b.n	8007e38 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	68ba      	ldr	r2, [r7, #8]
 8007dec:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	88fa      	ldrh	r2, [r7, #6]
 8007df2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2201      	movs	r2, #1
 8007df8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2202      	movs	r2, #2
 8007dfe:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007e00:	2301      	movs	r3, #1
 8007e02:	75fb      	strb	r3, [r7, #23]
      break;
 8007e04:	e018      	b.n	8007e38 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f000 f81c 	bl	8007e44 <USBH_HandleControl>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007e10:	7dfb      	ldrb	r3, [r7, #23]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d002      	beq.n	8007e1c <USBH_CtlReq+0x54>
 8007e16:	7dfb      	ldrb	r3, [r7, #23]
 8007e18:	2b03      	cmp	r3, #3
 8007e1a:	d106      	bne.n	8007e2a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	761a      	strb	r2, [r3, #24]
      break;
 8007e28:	e005      	b.n	8007e36 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007e2a:	7dfb      	ldrb	r3, [r7, #23]
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d102      	bne.n	8007e36 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2201      	movs	r2, #1
 8007e34:	709a      	strb	r2, [r3, #2]
      break;
 8007e36:	bf00      	nop
  }
  return status;
 8007e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3718      	adds	r7, #24
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
	...

08007e44 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af02      	add	r7, sp, #8
 8007e4a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007e50:	2300      	movs	r3, #0
 8007e52:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	7e1b      	ldrb	r3, [r3, #24]
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	2b0a      	cmp	r3, #10
 8007e5c:	f200 8156 	bhi.w	800810c <USBH_HandleControl+0x2c8>
 8007e60:	a201      	add	r2, pc, #4	; (adr r2, 8007e68 <USBH_HandleControl+0x24>)
 8007e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e66:	bf00      	nop
 8007e68:	08007e95 	.word	0x08007e95
 8007e6c:	08007eaf 	.word	0x08007eaf
 8007e70:	08007f19 	.word	0x08007f19
 8007e74:	08007f3f 	.word	0x08007f3f
 8007e78:	08007f77 	.word	0x08007f77
 8007e7c:	08007fa1 	.word	0x08007fa1
 8007e80:	08007ff3 	.word	0x08007ff3
 8007e84:	08008015 	.word	0x08008015
 8007e88:	08008051 	.word	0x08008051
 8007e8c:	08008077 	.word	0x08008077
 8007e90:	080080b5 	.word	0x080080b5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f103 0110 	add.w	r1, r3, #16
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	795b      	ldrb	r3, [r3, #5]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 f943 	bl	800812c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2202      	movs	r2, #2
 8007eaa:	761a      	strb	r2, [r3, #24]
      break;
 8007eac:	e139      	b.n	8008122 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	795b      	ldrb	r3, [r3, #5]
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 fcc5 	bl	8008844 <USBH_LL_GetURBState>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007ebe:	7bbb      	ldrb	r3, [r7, #14]
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d11e      	bne.n	8007f02 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	7c1b      	ldrb	r3, [r3, #16]
 8007ec8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ecc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	8adb      	ldrh	r3, [r3, #22]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00a      	beq.n	8007eec <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007ed6:	7b7b      	ldrb	r3, [r7, #13]
 8007ed8:	2b80      	cmp	r3, #128	; 0x80
 8007eda:	d103      	bne.n	8007ee4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2203      	movs	r2, #3
 8007ee0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ee2:	e115      	b.n	8008110 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2205      	movs	r2, #5
 8007ee8:	761a      	strb	r2, [r3, #24]
      break;
 8007eea:	e111      	b.n	8008110 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007eec:	7b7b      	ldrb	r3, [r7, #13]
 8007eee:	2b80      	cmp	r3, #128	; 0x80
 8007ef0:	d103      	bne.n	8007efa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2209      	movs	r2, #9
 8007ef6:	761a      	strb	r2, [r3, #24]
      break;
 8007ef8:	e10a      	b.n	8008110 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2207      	movs	r2, #7
 8007efe:	761a      	strb	r2, [r3, #24]
      break;
 8007f00:	e106      	b.n	8008110 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007f02:	7bbb      	ldrb	r3, [r7, #14]
 8007f04:	2b04      	cmp	r3, #4
 8007f06:	d003      	beq.n	8007f10 <USBH_HandleControl+0xcc>
 8007f08:	7bbb      	ldrb	r3, [r7, #14]
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	f040 8100 	bne.w	8008110 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	220b      	movs	r2, #11
 8007f14:	761a      	strb	r2, [r3, #24]
      break;
 8007f16:	e0fb      	b.n	8008110 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6899      	ldr	r1, [r3, #8]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	899a      	ldrh	r2, [r3, #12]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	791b      	ldrb	r3, [r3, #4]
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 f93a 	bl	80081aa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2204      	movs	r2, #4
 8007f3a:	761a      	strb	r2, [r3, #24]
      break;
 8007f3c:	e0f1      	b.n	8008122 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	791b      	ldrb	r3, [r3, #4]
 8007f42:	4619      	mov	r1, r3
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fc7d 	bl	8008844 <USBH_LL_GetURBState>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007f4e:	7bbb      	ldrb	r3, [r7, #14]
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d102      	bne.n	8007f5a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2209      	movs	r2, #9
 8007f58:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007f5a:	7bbb      	ldrb	r3, [r7, #14]
 8007f5c:	2b05      	cmp	r3, #5
 8007f5e:	d102      	bne.n	8007f66 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007f60:	2303      	movs	r3, #3
 8007f62:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f64:	e0d6      	b.n	8008114 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007f66:	7bbb      	ldrb	r3, [r7, #14]
 8007f68:	2b04      	cmp	r3, #4
 8007f6a:	f040 80d3 	bne.w	8008114 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	220b      	movs	r2, #11
 8007f72:	761a      	strb	r2, [r3, #24]
      break;
 8007f74:	e0ce      	b.n	8008114 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6899      	ldr	r1, [r3, #8]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	899a      	ldrh	r2, [r3, #12]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	795b      	ldrb	r3, [r3, #5]
 8007f82:	2001      	movs	r0, #1
 8007f84:	9000      	str	r0, [sp, #0]
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 f8ea 	bl	8008160 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2206      	movs	r2, #6
 8007f9c:	761a      	strb	r2, [r3, #24]
      break;
 8007f9e:	e0c0      	b.n	8008122 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	795b      	ldrb	r3, [r3, #5]
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fc4c 	bl	8008844 <USBH_LL_GetURBState>
 8007fac:	4603      	mov	r3, r0
 8007fae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007fb0:	7bbb      	ldrb	r3, [r7, #14]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d103      	bne.n	8007fbe <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2207      	movs	r2, #7
 8007fba:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007fbc:	e0ac      	b.n	8008118 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007fbe:	7bbb      	ldrb	r3, [r7, #14]
 8007fc0:	2b05      	cmp	r3, #5
 8007fc2:	d105      	bne.n	8007fd0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	220c      	movs	r2, #12
 8007fc8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8007fce:	e0a3      	b.n	8008118 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007fd0:	7bbb      	ldrb	r3, [r7, #14]
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d103      	bne.n	8007fde <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2205      	movs	r2, #5
 8007fda:	761a      	strb	r2, [r3, #24]
      break;
 8007fdc:	e09c      	b.n	8008118 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007fde:	7bbb      	ldrb	r3, [r7, #14]
 8007fe0:	2b04      	cmp	r3, #4
 8007fe2:	f040 8099 	bne.w	8008118 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	220b      	movs	r2, #11
 8007fea:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007fec:	2302      	movs	r3, #2
 8007fee:	73fb      	strb	r3, [r7, #15]
      break;
 8007ff0:	e092      	b.n	8008118 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	791b      	ldrb	r3, [r3, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 f8d5 	bl	80081aa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008006:	b29a      	uxth	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2208      	movs	r2, #8
 8008010:	761a      	strb	r2, [r3, #24]

      break;
 8008012:	e086      	b.n	8008122 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	791b      	ldrb	r3, [r3, #4]
 8008018:	4619      	mov	r1, r3
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fc12 	bl	8008844 <USBH_LL_GetURBState>
 8008020:	4603      	mov	r3, r0
 8008022:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008024:	7bbb      	ldrb	r3, [r7, #14]
 8008026:	2b01      	cmp	r3, #1
 8008028:	d105      	bne.n	8008036 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	220d      	movs	r2, #13
 800802e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008030:	2300      	movs	r3, #0
 8008032:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008034:	e072      	b.n	800811c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008036:	7bbb      	ldrb	r3, [r7, #14]
 8008038:	2b04      	cmp	r3, #4
 800803a:	d103      	bne.n	8008044 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	220b      	movs	r2, #11
 8008040:	761a      	strb	r2, [r3, #24]
      break;
 8008042:	e06b      	b.n	800811c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008044:	7bbb      	ldrb	r3, [r7, #14]
 8008046:	2b05      	cmp	r3, #5
 8008048:	d168      	bne.n	800811c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800804a:	2303      	movs	r3, #3
 800804c:	73fb      	strb	r3, [r7, #15]
      break;
 800804e:	e065      	b.n	800811c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	795b      	ldrb	r3, [r3, #5]
 8008054:	2201      	movs	r2, #1
 8008056:	9200      	str	r2, [sp, #0]
 8008058:	2200      	movs	r2, #0
 800805a:	2100      	movs	r1, #0
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 f87f 	bl	8008160 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008068:	b29a      	uxth	r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	220a      	movs	r2, #10
 8008072:	761a      	strb	r2, [r3, #24]
      break;
 8008074:	e055      	b.n	8008122 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	795b      	ldrb	r3, [r3, #5]
 800807a:	4619      	mov	r1, r3
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fbe1 	bl	8008844 <USBH_LL_GetURBState>
 8008082:	4603      	mov	r3, r0
 8008084:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008086:	7bbb      	ldrb	r3, [r7, #14]
 8008088:	2b01      	cmp	r3, #1
 800808a:	d105      	bne.n	8008098 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800808c:	2300      	movs	r3, #0
 800808e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	220d      	movs	r2, #13
 8008094:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008096:	e043      	b.n	8008120 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008098:	7bbb      	ldrb	r3, [r7, #14]
 800809a:	2b02      	cmp	r3, #2
 800809c:	d103      	bne.n	80080a6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2209      	movs	r2, #9
 80080a2:	761a      	strb	r2, [r3, #24]
      break;
 80080a4:	e03c      	b.n	8008120 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80080a6:	7bbb      	ldrb	r3, [r7, #14]
 80080a8:	2b04      	cmp	r3, #4
 80080aa:	d139      	bne.n	8008120 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	220b      	movs	r2, #11
 80080b0:	761a      	strb	r2, [r3, #24]
      break;
 80080b2:	e035      	b.n	8008120 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	7e5b      	ldrb	r3, [r3, #25]
 80080b8:	3301      	adds	r3, #1
 80080ba:	b2da      	uxtb	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	765a      	strb	r2, [r3, #25]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	7e5b      	ldrb	r3, [r3, #25]
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d806      	bhi.n	80080d6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2201      	movs	r2, #1
 80080d2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80080d4:	e025      	b.n	8008122 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080dc:	2106      	movs	r1, #6
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	795b      	ldrb	r3, [r3, #5]
 80080ec:	4619      	mov	r1, r3
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f90c 	bl	800830c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	791b      	ldrb	r3, [r3, #4]
 80080f8:	4619      	mov	r1, r3
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f906 	bl	800830c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008106:	2302      	movs	r3, #2
 8008108:	73fb      	strb	r3, [r7, #15]
      break;
 800810a:	e00a      	b.n	8008122 <USBH_HandleControl+0x2de>

    default:
      break;
 800810c:	bf00      	nop
 800810e:	e008      	b.n	8008122 <USBH_HandleControl+0x2de>
      break;
 8008110:	bf00      	nop
 8008112:	e006      	b.n	8008122 <USBH_HandleControl+0x2de>
      break;
 8008114:	bf00      	nop
 8008116:	e004      	b.n	8008122 <USBH_HandleControl+0x2de>
      break;
 8008118:	bf00      	nop
 800811a:	e002      	b.n	8008122 <USBH_HandleControl+0x2de>
      break;
 800811c:	bf00      	nop
 800811e:	e000      	b.n	8008122 <USBH_HandleControl+0x2de>
      break;
 8008120:	bf00      	nop
  }

  return status;
 8008122:	7bfb      	ldrb	r3, [r7, #15]
}
 8008124:	4618      	mov	r0, r3
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b088      	sub	sp, #32
 8008130:	af04      	add	r7, sp, #16
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	4613      	mov	r3, r2
 8008138:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800813a:	79f9      	ldrb	r1, [r7, #7]
 800813c:	2300      	movs	r3, #0
 800813e:	9303      	str	r3, [sp, #12]
 8008140:	2308      	movs	r3, #8
 8008142:	9302      	str	r3, [sp, #8]
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	9301      	str	r3, [sp, #4]
 8008148:	2300      	movs	r3, #0
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	2300      	movs	r3, #0
 800814e:	2200      	movs	r2, #0
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f000 fb46 	bl	80087e2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b088      	sub	sp, #32
 8008164:	af04      	add	r7, sp, #16
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	4611      	mov	r1, r2
 800816c:	461a      	mov	r2, r3
 800816e:	460b      	mov	r3, r1
 8008170:	80fb      	strh	r3, [r7, #6]
 8008172:	4613      	mov	r3, r2
 8008174:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800817c:	2b00      	cmp	r3, #0
 800817e:	d001      	beq.n	8008184 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008180:	2300      	movs	r3, #0
 8008182:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008184:	7979      	ldrb	r1, [r7, #5]
 8008186:	7e3b      	ldrb	r3, [r7, #24]
 8008188:	9303      	str	r3, [sp, #12]
 800818a:	88fb      	ldrh	r3, [r7, #6]
 800818c:	9302      	str	r3, [sp, #8]
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	9301      	str	r3, [sp, #4]
 8008192:	2301      	movs	r3, #1
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	2300      	movs	r3, #0
 8008198:	2200      	movs	r2, #0
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f000 fb21 	bl	80087e2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b088      	sub	sp, #32
 80081ae:	af04      	add	r7, sp, #16
 80081b0:	60f8      	str	r0, [r7, #12]
 80081b2:	60b9      	str	r1, [r7, #8]
 80081b4:	4611      	mov	r1, r2
 80081b6:	461a      	mov	r2, r3
 80081b8:	460b      	mov	r3, r1
 80081ba:	80fb      	strh	r3, [r7, #6]
 80081bc:	4613      	mov	r3, r2
 80081be:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80081c0:	7979      	ldrb	r1, [r7, #5]
 80081c2:	2300      	movs	r3, #0
 80081c4:	9303      	str	r3, [sp, #12]
 80081c6:	88fb      	ldrh	r3, [r7, #6]
 80081c8:	9302      	str	r3, [sp, #8]
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	9301      	str	r3, [sp, #4]
 80081ce:	2301      	movs	r3, #1
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	2300      	movs	r3, #0
 80081d4:	2201      	movs	r2, #1
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	f000 fb03 	bl	80087e2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80081dc:	2300      	movs	r3, #0

}
 80081de:	4618      	mov	r0, r3
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b088      	sub	sp, #32
 80081ea:	af04      	add	r7, sp, #16
 80081ec:	60f8      	str	r0, [r7, #12]
 80081ee:	60b9      	str	r1, [r7, #8]
 80081f0:	4611      	mov	r1, r2
 80081f2:	461a      	mov	r2, r3
 80081f4:	460b      	mov	r3, r1
 80081f6:	80fb      	strh	r3, [r7, #6]
 80081f8:	4613      	mov	r3, r2
 80081fa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008202:	2b00      	cmp	r3, #0
 8008204:	d001      	beq.n	800820a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008206:	2300      	movs	r3, #0
 8008208:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800820a:	7979      	ldrb	r1, [r7, #5]
 800820c:	7e3b      	ldrb	r3, [r7, #24]
 800820e:	9303      	str	r3, [sp, #12]
 8008210:	88fb      	ldrh	r3, [r7, #6]
 8008212:	9302      	str	r3, [sp, #8]
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	9301      	str	r3, [sp, #4]
 8008218:	2301      	movs	r3, #1
 800821a:	9300      	str	r3, [sp, #0]
 800821c:	2302      	movs	r3, #2
 800821e:	2200      	movs	r2, #0
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f000 fade 	bl	80087e2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3710      	adds	r7, #16
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b088      	sub	sp, #32
 8008234:	af04      	add	r7, sp, #16
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	4611      	mov	r1, r2
 800823c:	461a      	mov	r2, r3
 800823e:	460b      	mov	r3, r1
 8008240:	80fb      	strh	r3, [r7, #6]
 8008242:	4613      	mov	r3, r2
 8008244:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008246:	7979      	ldrb	r1, [r7, #5]
 8008248:	2300      	movs	r3, #0
 800824a:	9303      	str	r3, [sp, #12]
 800824c:	88fb      	ldrh	r3, [r7, #6]
 800824e:	9302      	str	r3, [sp, #8]
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	9301      	str	r3, [sp, #4]
 8008254:	2301      	movs	r3, #1
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	2302      	movs	r3, #2
 800825a:	2201      	movs	r2, #1
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	f000 fac0 	bl	80087e2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b086      	sub	sp, #24
 8008270:	af04      	add	r7, sp, #16
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	4608      	mov	r0, r1
 8008276:	4611      	mov	r1, r2
 8008278:	461a      	mov	r2, r3
 800827a:	4603      	mov	r3, r0
 800827c:	70fb      	strb	r3, [r7, #3]
 800827e:	460b      	mov	r3, r1
 8008280:	70bb      	strb	r3, [r7, #2]
 8008282:	4613      	mov	r3, r2
 8008284:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008286:	7878      	ldrb	r0, [r7, #1]
 8008288:	78ba      	ldrb	r2, [r7, #2]
 800828a:	78f9      	ldrb	r1, [r7, #3]
 800828c:	8b3b      	ldrh	r3, [r7, #24]
 800828e:	9302      	str	r3, [sp, #8]
 8008290:	7d3b      	ldrb	r3, [r7, #20]
 8008292:	9301      	str	r3, [sp, #4]
 8008294:	7c3b      	ldrb	r3, [r7, #16]
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	4603      	mov	r3, r0
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 fa53 	bl	8008746 <USBH_LL_OpenPipe>

  return USBH_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b082      	sub	sp, #8
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	460b      	mov	r3, r1
 80082b4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80082b6:	78fb      	ldrb	r3, [r7, #3]
 80082b8:	4619      	mov	r1, r3
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fa72 	bl	80087a4 <USBH_LL_ClosePipe>

  return USBH_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b084      	sub	sp, #16
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
 80082d2:	460b      	mov	r3, r1
 80082d4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f836 	bl	8008348 <USBH_GetFreePipe>
 80082dc:	4603      	mov	r3, r0
 80082de:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80082e0:	89fb      	ldrh	r3, [r7, #14]
 80082e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d00a      	beq.n	8008300 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80082ea:	78fa      	ldrb	r2, [r7, #3]
 80082ec:	89fb      	ldrh	r3, [r7, #14]
 80082ee:	f003 030f 	and.w	r3, r3, #15
 80082f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082f6:	6879      	ldr	r1, [r7, #4]
 80082f8:	33e0      	adds	r3, #224	; 0xe0
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	440b      	add	r3, r1
 80082fe:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008300:	89fb      	ldrh	r3, [r7, #14]
 8008302:	b2db      	uxtb	r3, r3
}
 8008304:	4618      	mov	r0, r3
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	460b      	mov	r3, r1
 8008316:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008318:	78fb      	ldrb	r3, [r7, #3]
 800831a:	2b0f      	cmp	r3, #15
 800831c:	d80d      	bhi.n	800833a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800831e:	78fb      	ldrb	r3, [r7, #3]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	33e0      	adds	r3, #224	; 0xe0
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4413      	add	r3, r2
 8008328:	685a      	ldr	r2, [r3, #4]
 800832a:	78fb      	ldrb	r3, [r7, #3]
 800832c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008330:	6879      	ldr	r1, [r7, #4]
 8008332:	33e0      	adds	r3, #224	; 0xe0
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	440b      	add	r3, r1
 8008338:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008350:	2300      	movs	r3, #0
 8008352:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008354:	2300      	movs	r3, #0
 8008356:	73fb      	strb	r3, [r7, #15]
 8008358:	e00f      	b.n	800837a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800835a:	7bfb      	ldrb	r3, [r7, #15]
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	33e0      	adds	r3, #224	; 0xe0
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4413      	add	r3, r2
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800836a:	2b00      	cmp	r3, #0
 800836c:	d102      	bne.n	8008374 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800836e:	7bfb      	ldrb	r3, [r7, #15]
 8008370:	b29b      	uxth	r3, r3
 8008372:	e007      	b.n	8008384 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008374:	7bfb      	ldrb	r3, [r7, #15]
 8008376:	3301      	adds	r3, #1
 8008378:	73fb      	strb	r3, [r7, #15]
 800837a:	7bfb      	ldrb	r3, [r7, #15]
 800837c:	2b0f      	cmp	r3, #15
 800837e:	d9ec      	bls.n	800835a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008380:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008384:	4618      	mov	r0, r3
 8008386:	3714      	adds	r7, #20
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008394:	2201      	movs	r2, #1
 8008396:	490e      	ldr	r1, [pc, #56]	; (80083d0 <MX_USB_HOST_Init+0x40>)
 8008398:	480e      	ldr	r0, [pc, #56]	; (80083d4 <MX_USB_HOST_Init+0x44>)
 800839a:	f7fe fba7 	bl	8006aec <USBH_Init>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d001      	beq.n	80083a8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80083a4:	f7f8 fcce 	bl	8000d44 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80083a8:	490b      	ldr	r1, [pc, #44]	; (80083d8 <MX_USB_HOST_Init+0x48>)
 80083aa:	480a      	ldr	r0, [pc, #40]	; (80083d4 <MX_USB_HOST_Init+0x44>)
 80083ac:	f7fe fc2c 	bl	8006c08 <USBH_RegisterClass>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d001      	beq.n	80083ba <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80083b6:	f7f8 fcc5 	bl	8000d44 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80083ba:	4806      	ldr	r0, [pc, #24]	; (80083d4 <MX_USB_HOST_Init+0x44>)
 80083bc:	f7fe fcb0 	bl	8006d20 <USBH_Start>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d001      	beq.n	80083ca <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80083c6:	f7f8 fcbd 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80083ca:	bf00      	nop
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	080083f1 	.word	0x080083f1
 80083d4:	200001f8 	.word	0x200001f8
 80083d8:	2000000c 	.word	0x2000000c

080083dc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80083e0:	4802      	ldr	r0, [pc, #8]	; (80083ec <MX_USB_HOST_Process+0x10>)
 80083e2:	f7fe fcad 	bl	8006d40 <USBH_Process>
}
 80083e6:	bf00      	nop
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	200001f8 	.word	0x200001f8

080083f0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	460b      	mov	r3, r1
 80083fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80083fc:	78fb      	ldrb	r3, [r7, #3]
 80083fe:	3b01      	subs	r3, #1
 8008400:	2b04      	cmp	r3, #4
 8008402:	d819      	bhi.n	8008438 <USBH_UserProcess+0x48>
 8008404:	a201      	add	r2, pc, #4	; (adr r2, 800840c <USBH_UserProcess+0x1c>)
 8008406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800840a:	bf00      	nop
 800840c:	08008439 	.word	0x08008439
 8008410:	08008429 	.word	0x08008429
 8008414:	08008439 	.word	0x08008439
 8008418:	08008431 	.word	0x08008431
 800841c:	08008421 	.word	0x08008421
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008420:	4b09      	ldr	r3, [pc, #36]	; (8008448 <USBH_UserProcess+0x58>)
 8008422:	2203      	movs	r2, #3
 8008424:	701a      	strb	r2, [r3, #0]
  break;
 8008426:	e008      	b.n	800843a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008428:	4b07      	ldr	r3, [pc, #28]	; (8008448 <USBH_UserProcess+0x58>)
 800842a:	2202      	movs	r2, #2
 800842c:	701a      	strb	r2, [r3, #0]
  break;
 800842e:	e004      	b.n	800843a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008430:	4b05      	ldr	r3, [pc, #20]	; (8008448 <USBH_UserProcess+0x58>)
 8008432:	2201      	movs	r2, #1
 8008434:	701a      	strb	r2, [r3, #0]
  break;
 8008436:	e000      	b.n	800843a <USBH_UserProcess+0x4a>

  default:
  break;
 8008438:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800843a:	bf00      	nop
 800843c:	370c      	adds	r7, #12
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	200005d0 	.word	0x200005d0

0800844c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b08a      	sub	sp, #40	; 0x28
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008454:	f107 0314 	add.w	r3, r7, #20
 8008458:	2200      	movs	r2, #0
 800845a:	601a      	str	r2, [r3, #0]
 800845c:	605a      	str	r2, [r3, #4]
 800845e:	609a      	str	r2, [r3, #8]
 8008460:	60da      	str	r2, [r3, #12]
 8008462:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800846c:	d147      	bne.n	80084fe <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800846e:	2300      	movs	r3, #0
 8008470:	613b      	str	r3, [r7, #16]
 8008472:	4b25      	ldr	r3, [pc, #148]	; (8008508 <HAL_HCD_MspInit+0xbc>)
 8008474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008476:	4a24      	ldr	r2, [pc, #144]	; (8008508 <HAL_HCD_MspInit+0xbc>)
 8008478:	f043 0301 	orr.w	r3, r3, #1
 800847c:	6313      	str	r3, [r2, #48]	; 0x30
 800847e:	4b22      	ldr	r3, [pc, #136]	; (8008508 <HAL_HCD_MspInit+0xbc>)
 8008480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008482:	f003 0301 	and.w	r3, r3, #1
 8008486:	613b      	str	r3, [r7, #16]
 8008488:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800848a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800848e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008490:	2300      	movs	r3, #0
 8008492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008494:	2300      	movs	r3, #0
 8008496:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008498:	f107 0314 	add.w	r3, r7, #20
 800849c:	4619      	mov	r1, r3
 800849e:	481b      	ldr	r0, [pc, #108]	; (800850c <HAL_HCD_MspInit+0xc0>)
 80084a0:	f7f8 ff82 	bl	80013a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80084a4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80084a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084aa:	2302      	movs	r3, #2
 80084ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084ae:	2300      	movs	r3, #0
 80084b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084b2:	2303      	movs	r3, #3
 80084b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80084b6:	230a      	movs	r3, #10
 80084b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084ba:	f107 0314 	add.w	r3, r7, #20
 80084be:	4619      	mov	r1, r3
 80084c0:	4812      	ldr	r0, [pc, #72]	; (800850c <HAL_HCD_MspInit+0xc0>)
 80084c2:	f7f8 ff71 	bl	80013a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80084c6:	4b10      	ldr	r3, [pc, #64]	; (8008508 <HAL_HCD_MspInit+0xbc>)
 80084c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ca:	4a0f      	ldr	r2, [pc, #60]	; (8008508 <HAL_HCD_MspInit+0xbc>)
 80084cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084d0:	6353      	str	r3, [r2, #52]	; 0x34
 80084d2:	2300      	movs	r3, #0
 80084d4:	60fb      	str	r3, [r7, #12]
 80084d6:	4b0c      	ldr	r3, [pc, #48]	; (8008508 <HAL_HCD_MspInit+0xbc>)
 80084d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084da:	4a0b      	ldr	r2, [pc, #44]	; (8008508 <HAL_HCD_MspInit+0xbc>)
 80084dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80084e0:	6453      	str	r3, [r2, #68]	; 0x44
 80084e2:	4b09      	ldr	r3, [pc, #36]	; (8008508 <HAL_HCD_MspInit+0xbc>)
 80084e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084ea:	60fb      	str	r3, [r7, #12]
 80084ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80084ee:	2200      	movs	r2, #0
 80084f0:	2100      	movs	r1, #0
 80084f2:	2043      	movs	r0, #67	; 0x43
 80084f4:	f7f8 ff08 	bl	8001308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80084f8:	2043      	movs	r0, #67	; 0x43
 80084fa:	f7f8 ff31 	bl	8001360 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80084fe:	bf00      	nop
 8008500:	3728      	adds	r7, #40	; 0x28
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	40023800 	.word	0x40023800
 800850c:	40020000 	.word	0x40020000

08008510 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800851e:	4618      	mov	r0, r3
 8008520:	f7fe ffed 	bl	80074fe <USBH_LL_IncTimer>
}
 8008524:	bf00      	nop
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800853a:	4618      	mov	r0, r3
 800853c:	f7ff f825 	bl	800758a <USBH_LL_Connect>
}
 8008540:	bf00      	nop
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008556:	4618      	mov	r0, r3
 8008558:	f7ff f82e 	bl	80075b8 <USBH_LL_Disconnect>
}
 800855c:	bf00      	nop
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	460b      	mov	r3, r1
 800856e:	70fb      	strb	r3, [r7, #3]
 8008570:	4613      	mov	r3, r2
 8008572:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800858e:	4618      	mov	r0, r3
 8008590:	f7fe ffdf 	bl	8007552 <USBH_LL_PortEnabled>
}
 8008594:	bf00      	nop
 8008596:	3708      	adds	r7, #8
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7fe ffdf 	bl	800756e <USBH_LL_PortDisabled>
}
 80085b0:	bf00      	nop
 80085b2:	3708      	adds	r7, #8
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d12a      	bne.n	8008620 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80085ca:	4a18      	ldr	r2, [pc, #96]	; (800862c <USBH_LL_Init+0x74>)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a15      	ldr	r2, [pc, #84]	; (800862c <USBH_LL_Init+0x74>)
 80085d6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80085da:	4b14      	ldr	r3, [pc, #80]	; (800862c <USBH_LL_Init+0x74>)
 80085dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80085e0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80085e2:	4b12      	ldr	r3, [pc, #72]	; (800862c <USBH_LL_Init+0x74>)
 80085e4:	2208      	movs	r2, #8
 80085e6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80085e8:	4b10      	ldr	r3, [pc, #64]	; (800862c <USBH_LL_Init+0x74>)
 80085ea:	2201      	movs	r2, #1
 80085ec:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80085ee:	4b0f      	ldr	r3, [pc, #60]	; (800862c <USBH_LL_Init+0x74>)
 80085f0:	2200      	movs	r2, #0
 80085f2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80085f4:	4b0d      	ldr	r3, [pc, #52]	; (800862c <USBH_LL_Init+0x74>)
 80085f6:	2202      	movs	r2, #2
 80085f8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80085fa:	4b0c      	ldr	r3, [pc, #48]	; (800862c <USBH_LL_Init+0x74>)
 80085fc:	2200      	movs	r2, #0
 80085fe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008600:	480a      	ldr	r0, [pc, #40]	; (800862c <USBH_LL_Init+0x74>)
 8008602:	f7f9 f9c3 	bl	800198c <HAL_HCD_Init>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d001      	beq.n	8008610 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800860c:	f7f8 fb9a 	bl	8000d44 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008610:	4806      	ldr	r0, [pc, #24]	; (800862c <USBH_LL_Init+0x74>)
 8008612:	f7f9 fdb2 	bl	800217a <HAL_HCD_GetCurrentFrame>
 8008616:	4603      	mov	r3, r0
 8008618:	4619      	mov	r1, r3
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f7fe ff60 	bl	80074e0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	200005d4 	.word	0x200005d4

08008630 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008638:	2300      	movs	r3, #0
 800863a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800863c:	2300      	movs	r3, #0
 800863e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008646:	4618      	mov	r0, r3
 8008648:	f7f9 fd21 	bl	800208e <HAL_HCD_Start>
 800864c:	4603      	mov	r3, r0
 800864e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008650:	7bfb      	ldrb	r3, [r7, #15]
 8008652:	4618      	mov	r0, r3
 8008654:	f000 f95c 	bl	8008910 <USBH_Get_USB_Status>
 8008658:	4603      	mov	r3, r0
 800865a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800865c:	7bbb      	ldrb	r3, [r7, #14]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b084      	sub	sp, #16
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800866e:	2300      	movs	r3, #0
 8008670:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008672:	2300      	movs	r3, #0
 8008674:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800867c:	4618      	mov	r0, r3
 800867e:	f7f9 fd29 	bl	80020d4 <HAL_HCD_Stop>
 8008682:	4603      	mov	r3, r0
 8008684:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008686:	7bfb      	ldrb	r3, [r7, #15]
 8008688:	4618      	mov	r0, r3
 800868a:	f000 f941 	bl	8008910 <USBH_Get_USB_Status>
 800868e:	4603      	mov	r3, r0
 8008690:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008692:	7bbb      	ldrb	r3, [r7, #14]
}
 8008694:	4618      	mov	r0, r3
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80086a4:	2301      	movs	r3, #1
 80086a6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7f9 fd71 	bl	8002196 <HAL_HCD_GetCurrentSpeed>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d00c      	beq.n	80086d4 <USBH_LL_GetSpeed+0x38>
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d80d      	bhi.n	80086da <USBH_LL_GetSpeed+0x3e>
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d002      	beq.n	80086c8 <USBH_LL_GetSpeed+0x2c>
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d003      	beq.n	80086ce <USBH_LL_GetSpeed+0x32>
 80086c6:	e008      	b.n	80086da <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80086c8:	2300      	movs	r3, #0
 80086ca:	73fb      	strb	r3, [r7, #15]
    break;
 80086cc:	e008      	b.n	80086e0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80086ce:	2301      	movs	r3, #1
 80086d0:	73fb      	strb	r3, [r7, #15]
    break;
 80086d2:	e005      	b.n	80086e0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80086d4:	2302      	movs	r3, #2
 80086d6:	73fb      	strb	r3, [r7, #15]
    break;
 80086d8:	e002      	b.n	80086e0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80086da:	2301      	movs	r3, #1
 80086dc:	73fb      	strb	r3, [r7, #15]
    break;
 80086de:	bf00      	nop
  }
  return  speed;
 80086e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086f2:	2300      	movs	r3, #0
 80086f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086f6:	2300      	movs	r3, #0
 80086f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008700:	4618      	mov	r0, r3
 8008702:	f7f9 fd04 	bl	800210e <HAL_HCD_ResetPort>
 8008706:	4603      	mov	r3, r0
 8008708:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800870a:	7bfb      	ldrb	r3, [r7, #15]
 800870c:	4618      	mov	r0, r3
 800870e:	f000 f8ff 	bl	8008910 <USBH_Get_USB_Status>
 8008712:	4603      	mov	r3, r0
 8008714:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008716:	7bbb      	ldrb	r3, [r7, #14]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	460b      	mov	r3, r1
 800872a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008732:	78fa      	ldrb	r2, [r7, #3]
 8008734:	4611      	mov	r1, r2
 8008736:	4618      	mov	r0, r3
 8008738:	f7f9 fd0b 	bl	8002152 <HAL_HCD_HC_GetXferCount>
 800873c:	4603      	mov	r3, r0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3708      	adds	r7, #8
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008746:	b590      	push	{r4, r7, lr}
 8008748:	b089      	sub	sp, #36	; 0x24
 800874a:	af04      	add	r7, sp, #16
 800874c:	6078      	str	r0, [r7, #4]
 800874e:	4608      	mov	r0, r1
 8008750:	4611      	mov	r1, r2
 8008752:	461a      	mov	r2, r3
 8008754:	4603      	mov	r3, r0
 8008756:	70fb      	strb	r3, [r7, #3]
 8008758:	460b      	mov	r3, r1
 800875a:	70bb      	strb	r3, [r7, #2]
 800875c:	4613      	mov	r3, r2
 800875e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008760:	2300      	movs	r3, #0
 8008762:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008764:	2300      	movs	r3, #0
 8008766:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800876e:	787c      	ldrb	r4, [r7, #1]
 8008770:	78ba      	ldrb	r2, [r7, #2]
 8008772:	78f9      	ldrb	r1, [r7, #3]
 8008774:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008776:	9302      	str	r3, [sp, #8]
 8008778:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800877c:	9301      	str	r3, [sp, #4]
 800877e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008782:	9300      	str	r3, [sp, #0]
 8008784:	4623      	mov	r3, r4
 8008786:	f7f9 f96f 	bl	8001a68 <HAL_HCD_HC_Init>
 800878a:	4603      	mov	r3, r0
 800878c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800878e:	7bfb      	ldrb	r3, [r7, #15]
 8008790:	4618      	mov	r0, r3
 8008792:	f000 f8bd 	bl	8008910 <USBH_Get_USB_Status>
 8008796:	4603      	mov	r3, r0
 8008798:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800879a:	7bbb      	ldrb	r3, [r7, #14]
}
 800879c:	4618      	mov	r0, r3
 800879e:	3714      	adds	r7, #20
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd90      	pop	{r4, r7, pc}

080087a4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	460b      	mov	r3, r1
 80087ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087b0:	2300      	movs	r3, #0
 80087b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087b4:	2300      	movs	r3, #0
 80087b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80087be:	78fa      	ldrb	r2, [r7, #3]
 80087c0:	4611      	mov	r1, r2
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7f9 f9df 	bl	8001b86 <HAL_HCD_HC_Halt>
 80087c8:	4603      	mov	r3, r0
 80087ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80087cc:	7bfb      	ldrb	r3, [r7, #15]
 80087ce:	4618      	mov	r0, r3
 80087d0:	f000 f89e 	bl	8008910 <USBH_Get_USB_Status>
 80087d4:	4603      	mov	r3, r0
 80087d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80087e2:	b590      	push	{r4, r7, lr}
 80087e4:	b089      	sub	sp, #36	; 0x24
 80087e6:	af04      	add	r7, sp, #16
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	4608      	mov	r0, r1
 80087ec:	4611      	mov	r1, r2
 80087ee:	461a      	mov	r2, r3
 80087f0:	4603      	mov	r3, r0
 80087f2:	70fb      	strb	r3, [r7, #3]
 80087f4:	460b      	mov	r3, r1
 80087f6:	70bb      	strb	r3, [r7, #2]
 80087f8:	4613      	mov	r3, r2
 80087fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087fc:	2300      	movs	r3, #0
 80087fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800880a:	787c      	ldrb	r4, [r7, #1]
 800880c:	78ba      	ldrb	r2, [r7, #2]
 800880e:	78f9      	ldrb	r1, [r7, #3]
 8008810:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008814:	9303      	str	r3, [sp, #12]
 8008816:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008818:	9302      	str	r3, [sp, #8]
 800881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881c:	9301      	str	r3, [sp, #4]
 800881e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008822:	9300      	str	r3, [sp, #0]
 8008824:	4623      	mov	r3, r4
 8008826:	f7f9 f9d1 	bl	8001bcc <HAL_HCD_HC_SubmitRequest>
 800882a:	4603      	mov	r3, r0
 800882c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800882e:	7bfb      	ldrb	r3, [r7, #15]
 8008830:	4618      	mov	r0, r3
 8008832:	f000 f86d 	bl	8008910 <USBH_Get_USB_Status>
 8008836:	4603      	mov	r3, r0
 8008838:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800883a:	7bbb      	ldrb	r3, [r7, #14]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3714      	adds	r7, #20
 8008840:	46bd      	mov	sp, r7
 8008842:	bd90      	pop	{r4, r7, pc}

08008844 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	460b      	mov	r3, r1
 800884e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008856:	78fa      	ldrb	r2, [r7, #3]
 8008858:	4611      	mov	r1, r2
 800885a:	4618      	mov	r0, r3
 800885c:	f7f9 fc65 	bl	800212a <HAL_HCD_HC_GetURBState>
 8008860:	4603      	mov	r3, r0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b082      	sub	sp, #8
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
 8008872:	460b      	mov	r3, r1
 8008874:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800887c:	2b01      	cmp	r3, #1
 800887e:	d103      	bne.n	8008888 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008880:	78fb      	ldrb	r3, [r7, #3]
 8008882:	4618      	mov	r0, r3
 8008884:	f000 f870 	bl	8008968 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008888:	20c8      	movs	r0, #200	; 0xc8
 800888a:	f7f8 fc29 	bl	80010e0 <HAL_Delay>
  return USBH_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	460b      	mov	r3, r1
 80088a2:	70fb      	strb	r3, [r7, #3]
 80088a4:	4613      	mov	r3, r2
 80088a6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088ae:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80088b0:	78fb      	ldrb	r3, [r7, #3]
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	212c      	movs	r1, #44	; 0x2c
 80088b6:	fb01 f303 	mul.w	r3, r1, r3
 80088ba:	4413      	add	r3, r2
 80088bc:	333b      	adds	r3, #59	; 0x3b
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d009      	beq.n	80088d8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80088c4:	78fb      	ldrb	r3, [r7, #3]
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	212c      	movs	r1, #44	; 0x2c
 80088ca:	fb01 f303 	mul.w	r3, r1, r3
 80088ce:	4413      	add	r3, r2
 80088d0:	3354      	adds	r3, #84	; 0x54
 80088d2:	78ba      	ldrb	r2, [r7, #2]
 80088d4:	701a      	strb	r2, [r3, #0]
 80088d6:	e008      	b.n	80088ea <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80088d8:	78fb      	ldrb	r3, [r7, #3]
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	212c      	movs	r1, #44	; 0x2c
 80088de:	fb01 f303 	mul.w	r3, r1, r3
 80088e2:	4413      	add	r3, r2
 80088e4:	3355      	adds	r3, #85	; 0x55
 80088e6:	78ba      	ldrb	r2, [r7, #2]
 80088e8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3714      	adds	r7, #20
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f7f8 fbed 	bl	80010e0 <HAL_Delay>
}
 8008906:	bf00      	nop
 8008908:	3708      	adds	r7, #8
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
	...

08008910 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	4603      	mov	r3, r0
 8008918:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800891a:	2300      	movs	r3, #0
 800891c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800891e:	79fb      	ldrb	r3, [r7, #7]
 8008920:	2b03      	cmp	r3, #3
 8008922:	d817      	bhi.n	8008954 <USBH_Get_USB_Status+0x44>
 8008924:	a201      	add	r2, pc, #4	; (adr r2, 800892c <USBH_Get_USB_Status+0x1c>)
 8008926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800892a:	bf00      	nop
 800892c:	0800893d 	.word	0x0800893d
 8008930:	08008943 	.word	0x08008943
 8008934:	08008949 	.word	0x08008949
 8008938:	0800894f 	.word	0x0800894f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800893c:	2300      	movs	r3, #0
 800893e:	73fb      	strb	r3, [r7, #15]
    break;
 8008940:	e00b      	b.n	800895a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008942:	2302      	movs	r3, #2
 8008944:	73fb      	strb	r3, [r7, #15]
    break;
 8008946:	e008      	b.n	800895a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008948:	2301      	movs	r3, #1
 800894a:	73fb      	strb	r3, [r7, #15]
    break;
 800894c:	e005      	b.n	800895a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800894e:	2302      	movs	r3, #2
 8008950:	73fb      	strb	r3, [r7, #15]
    break;
 8008952:	e002      	b.n	800895a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008954:	2302      	movs	r3, #2
 8008956:	73fb      	strb	r3, [r7, #15]
    break;
 8008958:	bf00      	nop
  }
  return usb_status;
 800895a:	7bfb      	ldrb	r3, [r7, #15]
}
 800895c:	4618      	mov	r0, r3
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	4603      	mov	r3, r0
 8008970:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008972:	79fb      	ldrb	r3, [r7, #7]
 8008974:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008976:	79fb      	ldrb	r3, [r7, #7]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d102      	bne.n	8008982 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800897c:	2300      	movs	r3, #0
 800897e:	73fb      	strb	r3, [r7, #15]
 8008980:	e001      	b.n	8008986 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008982:	2301      	movs	r3, #1
 8008984:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008986:	7bfb      	ldrb	r3, [r7, #15]
 8008988:	461a      	mov	r2, r3
 800898a:	2101      	movs	r1, #1
 800898c:	4803      	ldr	r0, [pc, #12]	; (800899c <MX_DriverVbusFS+0x34>)
 800898e:	f7f8 ffcb 	bl	8001928 <HAL_GPIO_WritePin>
}
 8008992:	bf00      	nop
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop
 800899c:	40020800 	.word	0x40020800

080089a0 <__errno>:
 80089a0:	4b01      	ldr	r3, [pc, #4]	; (80089a8 <__errno+0x8>)
 80089a2:	6818      	ldr	r0, [r3, #0]
 80089a4:	4770      	bx	lr
 80089a6:	bf00      	nop
 80089a8:	2000002c 	.word	0x2000002c

080089ac <_fclose_r>:
 80089ac:	b570      	push	{r4, r5, r6, lr}
 80089ae:	4605      	mov	r5, r0
 80089b0:	460c      	mov	r4, r1
 80089b2:	b911      	cbnz	r1, 80089ba <_fclose_r+0xe>
 80089b4:	2600      	movs	r6, #0
 80089b6:	4630      	mov	r0, r6
 80089b8:	bd70      	pop	{r4, r5, r6, pc}
 80089ba:	b118      	cbz	r0, 80089c4 <_fclose_r+0x18>
 80089bc:	6983      	ldr	r3, [r0, #24]
 80089be:	b90b      	cbnz	r3, 80089c4 <_fclose_r+0x18>
 80089c0:	f000 f994 	bl	8008cec <__sinit>
 80089c4:	4b2c      	ldr	r3, [pc, #176]	; (8008a78 <_fclose_r+0xcc>)
 80089c6:	429c      	cmp	r4, r3
 80089c8:	d114      	bne.n	80089f4 <_fclose_r+0x48>
 80089ca:	686c      	ldr	r4, [r5, #4]
 80089cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089ce:	07d8      	lsls	r0, r3, #31
 80089d0:	d405      	bmi.n	80089de <_fclose_r+0x32>
 80089d2:	89a3      	ldrh	r3, [r4, #12]
 80089d4:	0599      	lsls	r1, r3, #22
 80089d6:	d402      	bmi.n	80089de <_fclose_r+0x32>
 80089d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089da:	f000 fb6f 	bl	80090bc <__retarget_lock_acquire_recursive>
 80089de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089e2:	b98b      	cbnz	r3, 8008a08 <_fclose_r+0x5c>
 80089e4:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80089e6:	f016 0601 	ands.w	r6, r6, #1
 80089ea:	d1e3      	bne.n	80089b4 <_fclose_r+0x8>
 80089ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089ee:	f000 fb66 	bl	80090be <__retarget_lock_release_recursive>
 80089f2:	e7e0      	b.n	80089b6 <_fclose_r+0xa>
 80089f4:	4b21      	ldr	r3, [pc, #132]	; (8008a7c <_fclose_r+0xd0>)
 80089f6:	429c      	cmp	r4, r3
 80089f8:	d101      	bne.n	80089fe <_fclose_r+0x52>
 80089fa:	68ac      	ldr	r4, [r5, #8]
 80089fc:	e7e6      	b.n	80089cc <_fclose_r+0x20>
 80089fe:	4b20      	ldr	r3, [pc, #128]	; (8008a80 <_fclose_r+0xd4>)
 8008a00:	429c      	cmp	r4, r3
 8008a02:	bf08      	it	eq
 8008a04:	68ec      	ldreq	r4, [r5, #12]
 8008a06:	e7e1      	b.n	80089cc <_fclose_r+0x20>
 8008a08:	4621      	mov	r1, r4
 8008a0a:	4628      	mov	r0, r5
 8008a0c:	f000 f842 	bl	8008a94 <__sflush_r>
 8008a10:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008a12:	4606      	mov	r6, r0
 8008a14:	b133      	cbz	r3, 8008a24 <_fclose_r+0x78>
 8008a16:	6a21      	ldr	r1, [r4, #32]
 8008a18:	4628      	mov	r0, r5
 8008a1a:	4798      	blx	r3
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	bfb8      	it	lt
 8008a20:	f04f 36ff 	movlt.w	r6, #4294967295
 8008a24:	89a3      	ldrh	r3, [r4, #12]
 8008a26:	061a      	lsls	r2, r3, #24
 8008a28:	d503      	bpl.n	8008a32 <_fclose_r+0x86>
 8008a2a:	6921      	ldr	r1, [r4, #16]
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	f000 fbc5 	bl	80091bc <_free_r>
 8008a32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a34:	b141      	cbz	r1, 8008a48 <_fclose_r+0x9c>
 8008a36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a3a:	4299      	cmp	r1, r3
 8008a3c:	d002      	beq.n	8008a44 <_fclose_r+0x98>
 8008a3e:	4628      	mov	r0, r5
 8008a40:	f000 fbbc 	bl	80091bc <_free_r>
 8008a44:	2300      	movs	r3, #0
 8008a46:	6363      	str	r3, [r4, #52]	; 0x34
 8008a48:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008a4a:	b121      	cbz	r1, 8008a56 <_fclose_r+0xaa>
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	f000 fbb5 	bl	80091bc <_free_r>
 8008a52:	2300      	movs	r3, #0
 8008a54:	64a3      	str	r3, [r4, #72]	; 0x48
 8008a56:	f000 f931 	bl	8008cbc <__sfp_lock_acquire>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	81a3      	strh	r3, [r4, #12]
 8008a5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a60:	07db      	lsls	r3, r3, #31
 8008a62:	d402      	bmi.n	8008a6a <_fclose_r+0xbe>
 8008a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a66:	f000 fb2a 	bl	80090be <__retarget_lock_release_recursive>
 8008a6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a6c:	f000 fb25 	bl	80090ba <__retarget_lock_close_recursive>
 8008a70:	f000 f92a 	bl	8008cc8 <__sfp_lock_release>
 8008a74:	e79f      	b.n	80089b6 <_fclose_r+0xa>
 8008a76:	bf00      	nop
 8008a78:	0800a504 	.word	0x0800a504
 8008a7c:	0800a524 	.word	0x0800a524
 8008a80:	0800a4e4 	.word	0x0800a4e4

08008a84 <fclose>:
 8008a84:	4b02      	ldr	r3, [pc, #8]	; (8008a90 <fclose+0xc>)
 8008a86:	4601      	mov	r1, r0
 8008a88:	6818      	ldr	r0, [r3, #0]
 8008a8a:	f7ff bf8f 	b.w	80089ac <_fclose_r>
 8008a8e:	bf00      	nop
 8008a90:	2000002c 	.word	0x2000002c

08008a94 <__sflush_r>:
 8008a94:	898a      	ldrh	r2, [r1, #12]
 8008a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a9a:	4605      	mov	r5, r0
 8008a9c:	0710      	lsls	r0, r2, #28
 8008a9e:	460c      	mov	r4, r1
 8008aa0:	d458      	bmi.n	8008b54 <__sflush_r+0xc0>
 8008aa2:	684b      	ldr	r3, [r1, #4]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	dc05      	bgt.n	8008ab4 <__sflush_r+0x20>
 8008aa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	dc02      	bgt.n	8008ab4 <__sflush_r+0x20>
 8008aae:	2000      	movs	r0, #0
 8008ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ab4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ab6:	2e00      	cmp	r6, #0
 8008ab8:	d0f9      	beq.n	8008aae <__sflush_r+0x1a>
 8008aba:	2300      	movs	r3, #0
 8008abc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ac0:	682f      	ldr	r7, [r5, #0]
 8008ac2:	602b      	str	r3, [r5, #0]
 8008ac4:	d032      	beq.n	8008b2c <__sflush_r+0x98>
 8008ac6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ac8:	89a3      	ldrh	r3, [r4, #12]
 8008aca:	075a      	lsls	r2, r3, #29
 8008acc:	d505      	bpl.n	8008ada <__sflush_r+0x46>
 8008ace:	6863      	ldr	r3, [r4, #4]
 8008ad0:	1ac0      	subs	r0, r0, r3
 8008ad2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ad4:	b10b      	cbz	r3, 8008ada <__sflush_r+0x46>
 8008ad6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ad8:	1ac0      	subs	r0, r0, r3
 8008ada:	2300      	movs	r3, #0
 8008adc:	4602      	mov	r2, r0
 8008ade:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ae0:	6a21      	ldr	r1, [r4, #32]
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	47b0      	blx	r6
 8008ae6:	1c43      	adds	r3, r0, #1
 8008ae8:	89a3      	ldrh	r3, [r4, #12]
 8008aea:	d106      	bne.n	8008afa <__sflush_r+0x66>
 8008aec:	6829      	ldr	r1, [r5, #0]
 8008aee:	291d      	cmp	r1, #29
 8008af0:	d82c      	bhi.n	8008b4c <__sflush_r+0xb8>
 8008af2:	4a2a      	ldr	r2, [pc, #168]	; (8008b9c <__sflush_r+0x108>)
 8008af4:	40ca      	lsrs	r2, r1
 8008af6:	07d6      	lsls	r6, r2, #31
 8008af8:	d528      	bpl.n	8008b4c <__sflush_r+0xb8>
 8008afa:	2200      	movs	r2, #0
 8008afc:	6062      	str	r2, [r4, #4]
 8008afe:	04d9      	lsls	r1, r3, #19
 8008b00:	6922      	ldr	r2, [r4, #16]
 8008b02:	6022      	str	r2, [r4, #0]
 8008b04:	d504      	bpl.n	8008b10 <__sflush_r+0x7c>
 8008b06:	1c42      	adds	r2, r0, #1
 8008b08:	d101      	bne.n	8008b0e <__sflush_r+0x7a>
 8008b0a:	682b      	ldr	r3, [r5, #0]
 8008b0c:	b903      	cbnz	r3, 8008b10 <__sflush_r+0x7c>
 8008b0e:	6560      	str	r0, [r4, #84]	; 0x54
 8008b10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b12:	602f      	str	r7, [r5, #0]
 8008b14:	2900      	cmp	r1, #0
 8008b16:	d0ca      	beq.n	8008aae <__sflush_r+0x1a>
 8008b18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b1c:	4299      	cmp	r1, r3
 8008b1e:	d002      	beq.n	8008b26 <__sflush_r+0x92>
 8008b20:	4628      	mov	r0, r5
 8008b22:	f000 fb4b 	bl	80091bc <_free_r>
 8008b26:	2000      	movs	r0, #0
 8008b28:	6360      	str	r0, [r4, #52]	; 0x34
 8008b2a:	e7c1      	b.n	8008ab0 <__sflush_r+0x1c>
 8008b2c:	6a21      	ldr	r1, [r4, #32]
 8008b2e:	2301      	movs	r3, #1
 8008b30:	4628      	mov	r0, r5
 8008b32:	47b0      	blx	r6
 8008b34:	1c41      	adds	r1, r0, #1
 8008b36:	d1c7      	bne.n	8008ac8 <__sflush_r+0x34>
 8008b38:	682b      	ldr	r3, [r5, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d0c4      	beq.n	8008ac8 <__sflush_r+0x34>
 8008b3e:	2b1d      	cmp	r3, #29
 8008b40:	d001      	beq.n	8008b46 <__sflush_r+0xb2>
 8008b42:	2b16      	cmp	r3, #22
 8008b44:	d101      	bne.n	8008b4a <__sflush_r+0xb6>
 8008b46:	602f      	str	r7, [r5, #0]
 8008b48:	e7b1      	b.n	8008aae <__sflush_r+0x1a>
 8008b4a:	89a3      	ldrh	r3, [r4, #12]
 8008b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b50:	81a3      	strh	r3, [r4, #12]
 8008b52:	e7ad      	b.n	8008ab0 <__sflush_r+0x1c>
 8008b54:	690f      	ldr	r7, [r1, #16]
 8008b56:	2f00      	cmp	r7, #0
 8008b58:	d0a9      	beq.n	8008aae <__sflush_r+0x1a>
 8008b5a:	0793      	lsls	r3, r2, #30
 8008b5c:	680e      	ldr	r6, [r1, #0]
 8008b5e:	bf08      	it	eq
 8008b60:	694b      	ldreq	r3, [r1, #20]
 8008b62:	600f      	str	r7, [r1, #0]
 8008b64:	bf18      	it	ne
 8008b66:	2300      	movne	r3, #0
 8008b68:	eba6 0807 	sub.w	r8, r6, r7
 8008b6c:	608b      	str	r3, [r1, #8]
 8008b6e:	f1b8 0f00 	cmp.w	r8, #0
 8008b72:	dd9c      	ble.n	8008aae <__sflush_r+0x1a>
 8008b74:	6a21      	ldr	r1, [r4, #32]
 8008b76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b78:	4643      	mov	r3, r8
 8008b7a:	463a      	mov	r2, r7
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	47b0      	blx	r6
 8008b80:	2800      	cmp	r0, #0
 8008b82:	dc06      	bgt.n	8008b92 <__sflush_r+0xfe>
 8008b84:	89a3      	ldrh	r3, [r4, #12]
 8008b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b8a:	81a3      	strh	r3, [r4, #12]
 8008b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b90:	e78e      	b.n	8008ab0 <__sflush_r+0x1c>
 8008b92:	4407      	add	r7, r0
 8008b94:	eba8 0800 	sub.w	r8, r8, r0
 8008b98:	e7e9      	b.n	8008b6e <__sflush_r+0xda>
 8008b9a:	bf00      	nop
 8008b9c:	20400001 	.word	0x20400001

08008ba0 <_fflush_r>:
 8008ba0:	b538      	push	{r3, r4, r5, lr}
 8008ba2:	690b      	ldr	r3, [r1, #16]
 8008ba4:	4605      	mov	r5, r0
 8008ba6:	460c      	mov	r4, r1
 8008ba8:	b913      	cbnz	r3, 8008bb0 <_fflush_r+0x10>
 8008baa:	2500      	movs	r5, #0
 8008bac:	4628      	mov	r0, r5
 8008bae:	bd38      	pop	{r3, r4, r5, pc}
 8008bb0:	b118      	cbz	r0, 8008bba <_fflush_r+0x1a>
 8008bb2:	6983      	ldr	r3, [r0, #24]
 8008bb4:	b90b      	cbnz	r3, 8008bba <_fflush_r+0x1a>
 8008bb6:	f000 f899 	bl	8008cec <__sinit>
 8008bba:	4b14      	ldr	r3, [pc, #80]	; (8008c0c <_fflush_r+0x6c>)
 8008bbc:	429c      	cmp	r4, r3
 8008bbe:	d11b      	bne.n	8008bf8 <_fflush_r+0x58>
 8008bc0:	686c      	ldr	r4, [r5, #4]
 8008bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d0ef      	beq.n	8008baa <_fflush_r+0xa>
 8008bca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008bcc:	07d0      	lsls	r0, r2, #31
 8008bce:	d404      	bmi.n	8008bda <_fflush_r+0x3a>
 8008bd0:	0599      	lsls	r1, r3, #22
 8008bd2:	d402      	bmi.n	8008bda <_fflush_r+0x3a>
 8008bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bd6:	f000 fa71 	bl	80090bc <__retarget_lock_acquire_recursive>
 8008bda:	4628      	mov	r0, r5
 8008bdc:	4621      	mov	r1, r4
 8008bde:	f7ff ff59 	bl	8008a94 <__sflush_r>
 8008be2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008be4:	07da      	lsls	r2, r3, #31
 8008be6:	4605      	mov	r5, r0
 8008be8:	d4e0      	bmi.n	8008bac <_fflush_r+0xc>
 8008bea:	89a3      	ldrh	r3, [r4, #12]
 8008bec:	059b      	lsls	r3, r3, #22
 8008bee:	d4dd      	bmi.n	8008bac <_fflush_r+0xc>
 8008bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bf2:	f000 fa64 	bl	80090be <__retarget_lock_release_recursive>
 8008bf6:	e7d9      	b.n	8008bac <_fflush_r+0xc>
 8008bf8:	4b05      	ldr	r3, [pc, #20]	; (8008c10 <_fflush_r+0x70>)
 8008bfa:	429c      	cmp	r4, r3
 8008bfc:	d101      	bne.n	8008c02 <_fflush_r+0x62>
 8008bfe:	68ac      	ldr	r4, [r5, #8]
 8008c00:	e7df      	b.n	8008bc2 <_fflush_r+0x22>
 8008c02:	4b04      	ldr	r3, [pc, #16]	; (8008c14 <_fflush_r+0x74>)
 8008c04:	429c      	cmp	r4, r3
 8008c06:	bf08      	it	eq
 8008c08:	68ec      	ldreq	r4, [r5, #12]
 8008c0a:	e7da      	b.n	8008bc2 <_fflush_r+0x22>
 8008c0c:	0800a504 	.word	0x0800a504
 8008c10:	0800a524 	.word	0x0800a524
 8008c14:	0800a4e4 	.word	0x0800a4e4

08008c18 <fflush>:
 8008c18:	4601      	mov	r1, r0
 8008c1a:	b920      	cbnz	r0, 8008c26 <fflush+0xe>
 8008c1c:	4b04      	ldr	r3, [pc, #16]	; (8008c30 <fflush+0x18>)
 8008c1e:	4905      	ldr	r1, [pc, #20]	; (8008c34 <fflush+0x1c>)
 8008c20:	6818      	ldr	r0, [r3, #0]
 8008c22:	f000 ba05 	b.w	8009030 <_fwalk_reent>
 8008c26:	4b04      	ldr	r3, [pc, #16]	; (8008c38 <fflush+0x20>)
 8008c28:	6818      	ldr	r0, [r3, #0]
 8008c2a:	f7ff bfb9 	b.w	8008ba0 <_fflush_r>
 8008c2e:	bf00      	nop
 8008c30:	0800a544 	.word	0x0800a544
 8008c34:	08008ba1 	.word	0x08008ba1
 8008c38:	2000002c 	.word	0x2000002c

08008c3c <std>:
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	b510      	push	{r4, lr}
 8008c40:	4604      	mov	r4, r0
 8008c42:	e9c0 3300 	strd	r3, r3, [r0]
 8008c46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c4a:	6083      	str	r3, [r0, #8]
 8008c4c:	8181      	strh	r1, [r0, #12]
 8008c4e:	6643      	str	r3, [r0, #100]	; 0x64
 8008c50:	81c2      	strh	r2, [r0, #14]
 8008c52:	6183      	str	r3, [r0, #24]
 8008c54:	4619      	mov	r1, r3
 8008c56:	2208      	movs	r2, #8
 8008c58:	305c      	adds	r0, #92	; 0x5c
 8008c5a:	f000 faa7 	bl	80091ac <memset>
 8008c5e:	4b05      	ldr	r3, [pc, #20]	; (8008c74 <std+0x38>)
 8008c60:	6263      	str	r3, [r4, #36]	; 0x24
 8008c62:	4b05      	ldr	r3, [pc, #20]	; (8008c78 <std+0x3c>)
 8008c64:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c66:	4b05      	ldr	r3, [pc, #20]	; (8008c7c <std+0x40>)
 8008c68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c6a:	4b05      	ldr	r3, [pc, #20]	; (8008c80 <std+0x44>)
 8008c6c:	6224      	str	r4, [r4, #32]
 8008c6e:	6323      	str	r3, [r4, #48]	; 0x30
 8008c70:	bd10      	pop	{r4, pc}
 8008c72:	bf00      	nop
 8008c74:	080099cd 	.word	0x080099cd
 8008c78:	080099ef 	.word	0x080099ef
 8008c7c:	08009a27 	.word	0x08009a27
 8008c80:	08009a4b 	.word	0x08009a4b

08008c84 <_cleanup_r>:
 8008c84:	4901      	ldr	r1, [pc, #4]	; (8008c8c <_cleanup_r+0x8>)
 8008c86:	f000 b9d3 	b.w	8009030 <_fwalk_reent>
 8008c8a:	bf00      	nop
 8008c8c:	08008ba1 	.word	0x08008ba1

08008c90 <__sfmoreglue>:
 8008c90:	b570      	push	{r4, r5, r6, lr}
 8008c92:	2268      	movs	r2, #104	; 0x68
 8008c94:	1e4d      	subs	r5, r1, #1
 8008c96:	4355      	muls	r5, r2
 8008c98:	460e      	mov	r6, r1
 8008c9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008c9e:	f000 faf9 	bl	8009294 <_malloc_r>
 8008ca2:	4604      	mov	r4, r0
 8008ca4:	b140      	cbz	r0, 8008cb8 <__sfmoreglue+0x28>
 8008ca6:	2100      	movs	r1, #0
 8008ca8:	e9c0 1600 	strd	r1, r6, [r0]
 8008cac:	300c      	adds	r0, #12
 8008cae:	60a0      	str	r0, [r4, #8]
 8008cb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008cb4:	f000 fa7a 	bl	80091ac <memset>
 8008cb8:	4620      	mov	r0, r4
 8008cba:	bd70      	pop	{r4, r5, r6, pc}

08008cbc <__sfp_lock_acquire>:
 8008cbc:	4801      	ldr	r0, [pc, #4]	; (8008cc4 <__sfp_lock_acquire+0x8>)
 8008cbe:	f000 b9fd 	b.w	80090bc <__retarget_lock_acquire_recursive>
 8008cc2:	bf00      	nop
 8008cc4:	200008d9 	.word	0x200008d9

08008cc8 <__sfp_lock_release>:
 8008cc8:	4801      	ldr	r0, [pc, #4]	; (8008cd0 <__sfp_lock_release+0x8>)
 8008cca:	f000 b9f8 	b.w	80090be <__retarget_lock_release_recursive>
 8008cce:	bf00      	nop
 8008cd0:	200008d9 	.word	0x200008d9

08008cd4 <__sinit_lock_acquire>:
 8008cd4:	4801      	ldr	r0, [pc, #4]	; (8008cdc <__sinit_lock_acquire+0x8>)
 8008cd6:	f000 b9f1 	b.w	80090bc <__retarget_lock_acquire_recursive>
 8008cda:	bf00      	nop
 8008cdc:	200008da 	.word	0x200008da

08008ce0 <__sinit_lock_release>:
 8008ce0:	4801      	ldr	r0, [pc, #4]	; (8008ce8 <__sinit_lock_release+0x8>)
 8008ce2:	f000 b9ec 	b.w	80090be <__retarget_lock_release_recursive>
 8008ce6:	bf00      	nop
 8008ce8:	200008da 	.word	0x200008da

08008cec <__sinit>:
 8008cec:	b510      	push	{r4, lr}
 8008cee:	4604      	mov	r4, r0
 8008cf0:	f7ff fff0 	bl	8008cd4 <__sinit_lock_acquire>
 8008cf4:	69a3      	ldr	r3, [r4, #24]
 8008cf6:	b11b      	cbz	r3, 8008d00 <__sinit+0x14>
 8008cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cfc:	f7ff bff0 	b.w	8008ce0 <__sinit_lock_release>
 8008d00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d04:	6523      	str	r3, [r4, #80]	; 0x50
 8008d06:	4b13      	ldr	r3, [pc, #76]	; (8008d54 <__sinit+0x68>)
 8008d08:	4a13      	ldr	r2, [pc, #76]	; (8008d58 <__sinit+0x6c>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d0e:	42a3      	cmp	r3, r4
 8008d10:	bf04      	itt	eq
 8008d12:	2301      	moveq	r3, #1
 8008d14:	61a3      	streq	r3, [r4, #24]
 8008d16:	4620      	mov	r0, r4
 8008d18:	f000 f820 	bl	8008d5c <__sfp>
 8008d1c:	6060      	str	r0, [r4, #4]
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f000 f81c 	bl	8008d5c <__sfp>
 8008d24:	60a0      	str	r0, [r4, #8]
 8008d26:	4620      	mov	r0, r4
 8008d28:	f000 f818 	bl	8008d5c <__sfp>
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	60e0      	str	r0, [r4, #12]
 8008d30:	2104      	movs	r1, #4
 8008d32:	6860      	ldr	r0, [r4, #4]
 8008d34:	f7ff ff82 	bl	8008c3c <std>
 8008d38:	68a0      	ldr	r0, [r4, #8]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	2109      	movs	r1, #9
 8008d3e:	f7ff ff7d 	bl	8008c3c <std>
 8008d42:	68e0      	ldr	r0, [r4, #12]
 8008d44:	2202      	movs	r2, #2
 8008d46:	2112      	movs	r1, #18
 8008d48:	f7ff ff78 	bl	8008c3c <std>
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	61a3      	str	r3, [r4, #24]
 8008d50:	e7d2      	b.n	8008cf8 <__sinit+0xc>
 8008d52:	bf00      	nop
 8008d54:	0800a544 	.word	0x0800a544
 8008d58:	08008c85 	.word	0x08008c85

08008d5c <__sfp>:
 8008d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d5e:	4607      	mov	r7, r0
 8008d60:	f7ff ffac 	bl	8008cbc <__sfp_lock_acquire>
 8008d64:	4b1e      	ldr	r3, [pc, #120]	; (8008de0 <__sfp+0x84>)
 8008d66:	681e      	ldr	r6, [r3, #0]
 8008d68:	69b3      	ldr	r3, [r6, #24]
 8008d6a:	b913      	cbnz	r3, 8008d72 <__sfp+0x16>
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	f7ff ffbd 	bl	8008cec <__sinit>
 8008d72:	3648      	adds	r6, #72	; 0x48
 8008d74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	d503      	bpl.n	8008d84 <__sfp+0x28>
 8008d7c:	6833      	ldr	r3, [r6, #0]
 8008d7e:	b30b      	cbz	r3, 8008dc4 <__sfp+0x68>
 8008d80:	6836      	ldr	r6, [r6, #0]
 8008d82:	e7f7      	b.n	8008d74 <__sfp+0x18>
 8008d84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d88:	b9d5      	cbnz	r5, 8008dc0 <__sfp+0x64>
 8008d8a:	4b16      	ldr	r3, [pc, #88]	; (8008de4 <__sfp+0x88>)
 8008d8c:	60e3      	str	r3, [r4, #12]
 8008d8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d92:	6665      	str	r5, [r4, #100]	; 0x64
 8008d94:	f000 f990 	bl	80090b8 <__retarget_lock_init_recursive>
 8008d98:	f7ff ff96 	bl	8008cc8 <__sfp_lock_release>
 8008d9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008da0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008da4:	6025      	str	r5, [r4, #0]
 8008da6:	61a5      	str	r5, [r4, #24]
 8008da8:	2208      	movs	r2, #8
 8008daa:	4629      	mov	r1, r5
 8008dac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008db0:	f000 f9fc 	bl	80091ac <memset>
 8008db4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008db8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dc0:	3468      	adds	r4, #104	; 0x68
 8008dc2:	e7d9      	b.n	8008d78 <__sfp+0x1c>
 8008dc4:	2104      	movs	r1, #4
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	f7ff ff62 	bl	8008c90 <__sfmoreglue>
 8008dcc:	4604      	mov	r4, r0
 8008dce:	6030      	str	r0, [r6, #0]
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	d1d5      	bne.n	8008d80 <__sfp+0x24>
 8008dd4:	f7ff ff78 	bl	8008cc8 <__sfp_lock_release>
 8008dd8:	230c      	movs	r3, #12
 8008dda:	603b      	str	r3, [r7, #0]
 8008ddc:	e7ee      	b.n	8008dbc <__sfp+0x60>
 8008dde:	bf00      	nop
 8008de0:	0800a544 	.word	0x0800a544
 8008de4:	ffff0001 	.word	0xffff0001

08008de8 <_fopen_r>:
 8008de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dea:	460f      	mov	r7, r1
 8008dec:	4611      	mov	r1, r2
 8008dee:	aa01      	add	r2, sp, #4
 8008df0:	4605      	mov	r5, r0
 8008df2:	f000 ff11 	bl	8009c18 <__sflags>
 8008df6:	4606      	mov	r6, r0
 8008df8:	b918      	cbnz	r0, 8008e02 <_fopen_r+0x1a>
 8008dfa:	2400      	movs	r4, #0
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	b003      	add	sp, #12
 8008e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e02:	4628      	mov	r0, r5
 8008e04:	f7ff ffaa 	bl	8008d5c <__sfp>
 8008e08:	4604      	mov	r4, r0
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	d0f5      	beq.n	8008dfa <_fopen_r+0x12>
 8008e0e:	4639      	mov	r1, r7
 8008e10:	9a01      	ldr	r2, [sp, #4]
 8008e12:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 8008e16:	4628      	mov	r0, r5
 8008e18:	f000 fd9e 	bl	8009958 <_open_r>
 8008e1c:	1e07      	subs	r7, r0, #0
 8008e1e:	da09      	bge.n	8008e34 <_fopen_r+0x4c>
 8008e20:	2500      	movs	r5, #0
 8008e22:	f7ff ff4b 	bl	8008cbc <__sfp_lock_acquire>
 8008e26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e28:	81a5      	strh	r5, [r4, #12]
 8008e2a:	f000 f946 	bl	80090ba <__retarget_lock_close_recursive>
 8008e2e:	f7ff ff4b 	bl	8008cc8 <__sfp_lock_release>
 8008e32:	e7e2      	b.n	8008dfa <_fopen_r+0x12>
 8008e34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e36:	07db      	lsls	r3, r3, #31
 8008e38:	d405      	bmi.n	8008e46 <_fopen_r+0x5e>
 8008e3a:	89a3      	ldrh	r3, [r4, #12]
 8008e3c:	0598      	lsls	r0, r3, #22
 8008e3e:	d402      	bmi.n	8008e46 <_fopen_r+0x5e>
 8008e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e42:	f000 f93b 	bl	80090bc <__retarget_lock_acquire_recursive>
 8008e46:	4b0e      	ldr	r3, [pc, #56]	; (8008e80 <_fopen_r+0x98>)
 8008e48:	6263      	str	r3, [r4, #36]	; 0x24
 8008e4a:	4b0e      	ldr	r3, [pc, #56]	; (8008e84 <_fopen_r+0x9c>)
 8008e4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e4e:	4b0e      	ldr	r3, [pc, #56]	; (8008e88 <_fopen_r+0xa0>)
 8008e50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e52:	05f1      	lsls	r1, r6, #23
 8008e54:	4b0d      	ldr	r3, [pc, #52]	; (8008e8c <_fopen_r+0xa4>)
 8008e56:	81e7      	strh	r7, [r4, #14]
 8008e58:	81a6      	strh	r6, [r4, #12]
 8008e5a:	6224      	str	r4, [r4, #32]
 8008e5c:	6323      	str	r3, [r4, #48]	; 0x30
 8008e5e:	d505      	bpl.n	8008e6c <_fopen_r+0x84>
 8008e60:	2302      	movs	r3, #2
 8008e62:	2200      	movs	r2, #0
 8008e64:	4621      	mov	r1, r4
 8008e66:	4628      	mov	r0, r5
 8008e68:	f000 f82c 	bl	8008ec4 <_fseek_r>
 8008e6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e6e:	07da      	lsls	r2, r3, #31
 8008e70:	d4c4      	bmi.n	8008dfc <_fopen_r+0x14>
 8008e72:	89a3      	ldrh	r3, [r4, #12]
 8008e74:	059b      	lsls	r3, r3, #22
 8008e76:	d4c1      	bmi.n	8008dfc <_fopen_r+0x14>
 8008e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e7a:	f000 f920 	bl	80090be <__retarget_lock_release_recursive>
 8008e7e:	e7bd      	b.n	8008dfc <_fopen_r+0x14>
 8008e80:	080099cd 	.word	0x080099cd
 8008e84:	080099ef 	.word	0x080099ef
 8008e88:	08009a27 	.word	0x08009a27
 8008e8c:	08009a4b 	.word	0x08009a4b

08008e90 <fopen>:
 8008e90:	4b02      	ldr	r3, [pc, #8]	; (8008e9c <fopen+0xc>)
 8008e92:	460a      	mov	r2, r1
 8008e94:	4601      	mov	r1, r0
 8008e96:	6818      	ldr	r0, [r3, #0]
 8008e98:	f7ff bfa6 	b.w	8008de8 <_fopen_r>
 8008e9c:	2000002c 	.word	0x2000002c

08008ea0 <fiprintf>:
 8008ea0:	b40e      	push	{r1, r2, r3}
 8008ea2:	b503      	push	{r0, r1, lr}
 8008ea4:	4601      	mov	r1, r0
 8008ea6:	ab03      	add	r3, sp, #12
 8008ea8:	4805      	ldr	r0, [pc, #20]	; (8008ec0 <fiprintf+0x20>)
 8008eaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eae:	6800      	ldr	r0, [r0, #0]
 8008eb0:	9301      	str	r3, [sp, #4]
 8008eb2:	f000 fa8d 	bl	80093d0 <_vfiprintf_r>
 8008eb6:	b002      	add	sp, #8
 8008eb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ebc:	b003      	add	sp, #12
 8008ebe:	4770      	bx	lr
 8008ec0:	2000002c 	.word	0x2000002c

08008ec4 <_fseek_r>:
 8008ec4:	f000 b800 	b.w	8008ec8 <_fseeko_r>

08008ec8 <_fseeko_r>:
 8008ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ecc:	460c      	mov	r4, r1
 8008ece:	4617      	mov	r7, r2
 8008ed0:	461d      	mov	r5, r3
 8008ed2:	4606      	mov	r6, r0
 8008ed4:	b118      	cbz	r0, 8008ede <_fseeko_r+0x16>
 8008ed6:	6983      	ldr	r3, [r0, #24]
 8008ed8:	b90b      	cbnz	r3, 8008ede <_fseeko_r+0x16>
 8008eda:	f7ff ff07 	bl	8008cec <__sinit>
 8008ede:	4b51      	ldr	r3, [pc, #324]	; (8009024 <_fseeko_r+0x15c>)
 8008ee0:	429c      	cmp	r4, r3
 8008ee2:	d122      	bne.n	8008f2a <_fseeko_r+0x62>
 8008ee4:	6874      	ldr	r4, [r6, #4]
 8008ee6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ee8:	07d9      	lsls	r1, r3, #31
 8008eea:	d405      	bmi.n	8008ef8 <_fseeko_r+0x30>
 8008eec:	89a3      	ldrh	r3, [r4, #12]
 8008eee:	059a      	lsls	r2, r3, #22
 8008ef0:	d402      	bmi.n	8008ef8 <_fseeko_r+0x30>
 8008ef2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ef4:	f000 f8e2 	bl	80090bc <__retarget_lock_acquire_recursive>
 8008ef8:	89a3      	ldrh	r3, [r4, #12]
 8008efa:	f403 7384 	and.w	r3, r3, #264	; 0x108
 8008efe:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8008f02:	d103      	bne.n	8008f0c <_fseeko_r+0x44>
 8008f04:	4621      	mov	r1, r4
 8008f06:	4630      	mov	r0, r6
 8008f08:	f7ff fe4a 	bl	8008ba0 <_fflush_r>
 8008f0c:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8008f10:	f1b8 0f00 	cmp.w	r8, #0
 8008f14:	d113      	bne.n	8008f3e <_fseeko_r+0x76>
 8008f16:	231d      	movs	r3, #29
 8008f18:	6033      	str	r3, [r6, #0]
 8008f1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f1c:	07d9      	lsls	r1, r3, #31
 8008f1e:	d578      	bpl.n	8009012 <_fseeko_r+0x14a>
 8008f20:	f04f 35ff 	mov.w	r5, #4294967295
 8008f24:	4628      	mov	r0, r5
 8008f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f2a:	4b3f      	ldr	r3, [pc, #252]	; (8009028 <_fseeko_r+0x160>)
 8008f2c:	429c      	cmp	r4, r3
 8008f2e:	d101      	bne.n	8008f34 <_fseeko_r+0x6c>
 8008f30:	68b4      	ldr	r4, [r6, #8]
 8008f32:	e7d8      	b.n	8008ee6 <_fseeko_r+0x1e>
 8008f34:	4b3d      	ldr	r3, [pc, #244]	; (800902c <_fseeko_r+0x164>)
 8008f36:	429c      	cmp	r4, r3
 8008f38:	bf08      	it	eq
 8008f3a:	68f4      	ldreq	r4, [r6, #12]
 8008f3c:	e7d3      	b.n	8008ee6 <_fseeko_r+0x1e>
 8008f3e:	2d01      	cmp	r5, #1
 8008f40:	d036      	beq.n	8008fb0 <_fseeko_r+0xe8>
 8008f42:	f035 0302 	bics.w	r3, r5, #2
 8008f46:	d162      	bne.n	800900e <_fseeko_r+0x146>
 8008f48:	6923      	ldr	r3, [r4, #16]
 8008f4a:	b91b      	cbnz	r3, 8008f54 <_fseeko_r+0x8c>
 8008f4c:	4621      	mov	r1, r4
 8008f4e:	4630      	mov	r0, r6
 8008f50:	f000 f8dc 	bl	800910c <__smakebuf_r>
 8008f54:	4621      	mov	r1, r4
 8008f56:	4630      	mov	r0, r6
 8008f58:	f7ff fe22 	bl	8008ba0 <_fflush_r>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	d1dc      	bne.n	8008f1a <_fseeko_r+0x52>
 8008f60:	6a21      	ldr	r1, [r4, #32]
 8008f62:	462b      	mov	r3, r5
 8008f64:	463a      	mov	r2, r7
 8008f66:	4630      	mov	r0, r6
 8008f68:	47c0      	blx	r8
 8008f6a:	3001      	adds	r0, #1
 8008f6c:	d0d5      	beq.n	8008f1a <_fseeko_r+0x52>
 8008f6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f70:	b141      	cbz	r1, 8008f84 <_fseeko_r+0xbc>
 8008f72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f76:	4299      	cmp	r1, r3
 8008f78:	d002      	beq.n	8008f80 <_fseeko_r+0xb8>
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	f000 f91e 	bl	80091bc <_free_r>
 8008f80:	2300      	movs	r3, #0
 8008f82:	6363      	str	r3, [r4, #52]	; 0x34
 8008f84:	6923      	ldr	r3, [r4, #16]
 8008f86:	6023      	str	r3, [r4, #0]
 8008f88:	89a3      	ldrh	r3, [r4, #12]
 8008f8a:	2600      	movs	r6, #0
 8008f8c:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 8008f90:	6066      	str	r6, [r4, #4]
 8008f92:	81a3      	strh	r3, [r4, #12]
 8008f94:	2208      	movs	r2, #8
 8008f96:	4631      	mov	r1, r6
 8008f98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f9c:	f000 f906 	bl	80091ac <memset>
 8008fa0:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8008fa2:	f015 0501 	ands.w	r5, r5, #1
 8008fa6:	d13b      	bne.n	8009020 <_fseeko_r+0x158>
 8008fa8:	89a3      	ldrh	r3, [r4, #12]
 8008faa:	059b      	lsls	r3, r3, #22
 8008fac:	d4ba      	bmi.n	8008f24 <_fseeko_r+0x5c>
 8008fae:	e021      	b.n	8008ff4 <_fseeko_r+0x12c>
 8008fb0:	4621      	mov	r1, r4
 8008fb2:	4630      	mov	r0, r6
 8008fb4:	f7ff fdf4 	bl	8008ba0 <_fflush_r>
 8008fb8:	89a2      	ldrh	r2, [r4, #12]
 8008fba:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008fbe:	d00c      	beq.n	8008fda <_fseeko_r+0x112>
 8008fc0:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8008fc2:	89a3      	ldrh	r3, [r4, #12]
 8008fc4:	075a      	lsls	r2, r3, #29
 8008fc6:	d519      	bpl.n	8008ffc <_fseeko_r+0x134>
 8008fc8:	6863      	ldr	r3, [r4, #4]
 8008fca:	1aed      	subs	r5, r5, r3
 8008fcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008fce:	b10b      	cbz	r3, 8008fd4 <_fseeko_r+0x10c>
 8008fd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fd2:	1aed      	subs	r5, r5, r3
 8008fd4:	442f      	add	r7, r5
 8008fd6:	2500      	movs	r5, #0
 8008fd8:	e7b6      	b.n	8008f48 <_fseeko_r+0x80>
 8008fda:	462b      	mov	r3, r5
 8008fdc:	6a21      	ldr	r1, [r4, #32]
 8008fde:	4630      	mov	r0, r6
 8008fe0:	47c0      	blx	r8
 8008fe2:	1c43      	adds	r3, r0, #1
 8008fe4:	4605      	mov	r5, r0
 8008fe6:	d1ec      	bne.n	8008fc2 <_fseeko_r+0xfa>
 8008fe8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fea:	07d8      	lsls	r0, r3, #31
 8008fec:	d498      	bmi.n	8008f20 <_fseeko_r+0x58>
 8008fee:	89a3      	ldrh	r3, [r4, #12]
 8008ff0:	0599      	lsls	r1, r3, #22
 8008ff2:	d495      	bmi.n	8008f20 <_fseeko_r+0x58>
 8008ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ff6:	f000 f862 	bl	80090be <__retarget_lock_release_recursive>
 8008ffa:	e793      	b.n	8008f24 <_fseeko_r+0x5c>
 8008ffc:	0718      	lsls	r0, r3, #28
 8008ffe:	d5e9      	bpl.n	8008fd4 <_fseeko_r+0x10c>
 8009000:	6823      	ldr	r3, [r4, #0]
 8009002:	6922      	ldr	r2, [r4, #16]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d0e5      	beq.n	8008fd4 <_fseeko_r+0x10c>
 8009008:	1a9b      	subs	r3, r3, r2
 800900a:	441d      	add	r5, r3
 800900c:	e7e2      	b.n	8008fd4 <_fseeko_r+0x10c>
 800900e:	2316      	movs	r3, #22
 8009010:	e782      	b.n	8008f18 <_fseeko_r+0x50>
 8009012:	89a3      	ldrh	r3, [r4, #12]
 8009014:	059a      	lsls	r2, r3, #22
 8009016:	d483      	bmi.n	8008f20 <_fseeko_r+0x58>
 8009018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800901a:	f000 f850 	bl	80090be <__retarget_lock_release_recursive>
 800901e:	e77f      	b.n	8008f20 <_fseeko_r+0x58>
 8009020:	4635      	mov	r5, r6
 8009022:	e77f      	b.n	8008f24 <_fseeko_r+0x5c>
 8009024:	0800a504 	.word	0x0800a504
 8009028:	0800a524 	.word	0x0800a524
 800902c:	0800a4e4 	.word	0x0800a4e4

08009030 <_fwalk_reent>:
 8009030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009034:	4606      	mov	r6, r0
 8009036:	4688      	mov	r8, r1
 8009038:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800903c:	2700      	movs	r7, #0
 800903e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009042:	f1b9 0901 	subs.w	r9, r9, #1
 8009046:	d505      	bpl.n	8009054 <_fwalk_reent+0x24>
 8009048:	6824      	ldr	r4, [r4, #0]
 800904a:	2c00      	cmp	r4, #0
 800904c:	d1f7      	bne.n	800903e <_fwalk_reent+0xe>
 800904e:	4638      	mov	r0, r7
 8009050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009054:	89ab      	ldrh	r3, [r5, #12]
 8009056:	2b01      	cmp	r3, #1
 8009058:	d907      	bls.n	800906a <_fwalk_reent+0x3a>
 800905a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800905e:	3301      	adds	r3, #1
 8009060:	d003      	beq.n	800906a <_fwalk_reent+0x3a>
 8009062:	4629      	mov	r1, r5
 8009064:	4630      	mov	r0, r6
 8009066:	47c0      	blx	r8
 8009068:	4307      	orrs	r7, r0
 800906a:	3568      	adds	r5, #104	; 0x68
 800906c:	e7e9      	b.n	8009042 <_fwalk_reent+0x12>
	...

08009070 <__libc_init_array>:
 8009070:	b570      	push	{r4, r5, r6, lr}
 8009072:	4d0d      	ldr	r5, [pc, #52]	; (80090a8 <__libc_init_array+0x38>)
 8009074:	4c0d      	ldr	r4, [pc, #52]	; (80090ac <__libc_init_array+0x3c>)
 8009076:	1b64      	subs	r4, r4, r5
 8009078:	10a4      	asrs	r4, r4, #2
 800907a:	2600      	movs	r6, #0
 800907c:	42a6      	cmp	r6, r4
 800907e:	d109      	bne.n	8009094 <__libc_init_array+0x24>
 8009080:	4d0b      	ldr	r5, [pc, #44]	; (80090b0 <__libc_init_array+0x40>)
 8009082:	4c0c      	ldr	r4, [pc, #48]	; (80090b4 <__libc_init_array+0x44>)
 8009084:	f001 f8fc 	bl	800a280 <_init>
 8009088:	1b64      	subs	r4, r4, r5
 800908a:	10a4      	asrs	r4, r4, #2
 800908c:	2600      	movs	r6, #0
 800908e:	42a6      	cmp	r6, r4
 8009090:	d105      	bne.n	800909e <__libc_init_array+0x2e>
 8009092:	bd70      	pop	{r4, r5, r6, pc}
 8009094:	f855 3b04 	ldr.w	r3, [r5], #4
 8009098:	4798      	blx	r3
 800909a:	3601      	adds	r6, #1
 800909c:	e7ee      	b.n	800907c <__libc_init_array+0xc>
 800909e:	f855 3b04 	ldr.w	r3, [r5], #4
 80090a2:	4798      	blx	r3
 80090a4:	3601      	adds	r6, #1
 80090a6:	e7f2      	b.n	800908e <__libc_init_array+0x1e>
 80090a8:	0800a5a0 	.word	0x0800a5a0
 80090ac:	0800a5a0 	.word	0x0800a5a0
 80090b0:	0800a5a0 	.word	0x0800a5a0
 80090b4:	0800a5a4 	.word	0x0800a5a4

080090b8 <__retarget_lock_init_recursive>:
 80090b8:	4770      	bx	lr

080090ba <__retarget_lock_close_recursive>:
 80090ba:	4770      	bx	lr

080090bc <__retarget_lock_acquire_recursive>:
 80090bc:	4770      	bx	lr

080090be <__retarget_lock_release_recursive>:
 80090be:	4770      	bx	lr

080090c0 <__swhatbuf_r>:
 80090c0:	b570      	push	{r4, r5, r6, lr}
 80090c2:	460e      	mov	r6, r1
 80090c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090c8:	2900      	cmp	r1, #0
 80090ca:	b096      	sub	sp, #88	; 0x58
 80090cc:	4614      	mov	r4, r2
 80090ce:	461d      	mov	r5, r3
 80090d0:	da08      	bge.n	80090e4 <__swhatbuf_r+0x24>
 80090d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80090d6:	2200      	movs	r2, #0
 80090d8:	602a      	str	r2, [r5, #0]
 80090da:	061a      	lsls	r2, r3, #24
 80090dc:	d410      	bmi.n	8009100 <__swhatbuf_r+0x40>
 80090de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090e2:	e00e      	b.n	8009102 <__swhatbuf_r+0x42>
 80090e4:	466a      	mov	r2, sp
 80090e6:	f000 fdcd 	bl	8009c84 <_fstat_r>
 80090ea:	2800      	cmp	r0, #0
 80090ec:	dbf1      	blt.n	80090d2 <__swhatbuf_r+0x12>
 80090ee:	9a01      	ldr	r2, [sp, #4]
 80090f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80090f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80090f8:	425a      	negs	r2, r3
 80090fa:	415a      	adcs	r2, r3
 80090fc:	602a      	str	r2, [r5, #0]
 80090fe:	e7ee      	b.n	80090de <__swhatbuf_r+0x1e>
 8009100:	2340      	movs	r3, #64	; 0x40
 8009102:	2000      	movs	r0, #0
 8009104:	6023      	str	r3, [r4, #0]
 8009106:	b016      	add	sp, #88	; 0x58
 8009108:	bd70      	pop	{r4, r5, r6, pc}
	...

0800910c <__smakebuf_r>:
 800910c:	898b      	ldrh	r3, [r1, #12]
 800910e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009110:	079d      	lsls	r5, r3, #30
 8009112:	4606      	mov	r6, r0
 8009114:	460c      	mov	r4, r1
 8009116:	d507      	bpl.n	8009128 <__smakebuf_r+0x1c>
 8009118:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800911c:	6023      	str	r3, [r4, #0]
 800911e:	6123      	str	r3, [r4, #16]
 8009120:	2301      	movs	r3, #1
 8009122:	6163      	str	r3, [r4, #20]
 8009124:	b002      	add	sp, #8
 8009126:	bd70      	pop	{r4, r5, r6, pc}
 8009128:	ab01      	add	r3, sp, #4
 800912a:	466a      	mov	r2, sp
 800912c:	f7ff ffc8 	bl	80090c0 <__swhatbuf_r>
 8009130:	9900      	ldr	r1, [sp, #0]
 8009132:	4605      	mov	r5, r0
 8009134:	4630      	mov	r0, r6
 8009136:	f000 f8ad 	bl	8009294 <_malloc_r>
 800913a:	b948      	cbnz	r0, 8009150 <__smakebuf_r+0x44>
 800913c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009140:	059a      	lsls	r2, r3, #22
 8009142:	d4ef      	bmi.n	8009124 <__smakebuf_r+0x18>
 8009144:	f023 0303 	bic.w	r3, r3, #3
 8009148:	f043 0302 	orr.w	r3, r3, #2
 800914c:	81a3      	strh	r3, [r4, #12]
 800914e:	e7e3      	b.n	8009118 <__smakebuf_r+0xc>
 8009150:	4b0d      	ldr	r3, [pc, #52]	; (8009188 <__smakebuf_r+0x7c>)
 8009152:	62b3      	str	r3, [r6, #40]	; 0x28
 8009154:	89a3      	ldrh	r3, [r4, #12]
 8009156:	6020      	str	r0, [r4, #0]
 8009158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800915c:	81a3      	strh	r3, [r4, #12]
 800915e:	9b00      	ldr	r3, [sp, #0]
 8009160:	6163      	str	r3, [r4, #20]
 8009162:	9b01      	ldr	r3, [sp, #4]
 8009164:	6120      	str	r0, [r4, #16]
 8009166:	b15b      	cbz	r3, 8009180 <__smakebuf_r+0x74>
 8009168:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800916c:	4630      	mov	r0, r6
 800916e:	f000 fd9b 	bl	8009ca8 <_isatty_r>
 8009172:	b128      	cbz	r0, 8009180 <__smakebuf_r+0x74>
 8009174:	89a3      	ldrh	r3, [r4, #12]
 8009176:	f023 0303 	bic.w	r3, r3, #3
 800917a:	f043 0301 	orr.w	r3, r3, #1
 800917e:	81a3      	strh	r3, [r4, #12]
 8009180:	89a0      	ldrh	r0, [r4, #12]
 8009182:	4305      	orrs	r5, r0
 8009184:	81a5      	strh	r5, [r4, #12]
 8009186:	e7cd      	b.n	8009124 <__smakebuf_r+0x18>
 8009188:	08008c85 	.word	0x08008c85

0800918c <malloc>:
 800918c:	4b02      	ldr	r3, [pc, #8]	; (8009198 <malloc+0xc>)
 800918e:	4601      	mov	r1, r0
 8009190:	6818      	ldr	r0, [r3, #0]
 8009192:	f000 b87f 	b.w	8009294 <_malloc_r>
 8009196:	bf00      	nop
 8009198:	2000002c 	.word	0x2000002c

0800919c <free>:
 800919c:	4b02      	ldr	r3, [pc, #8]	; (80091a8 <free+0xc>)
 800919e:	4601      	mov	r1, r0
 80091a0:	6818      	ldr	r0, [r3, #0]
 80091a2:	f000 b80b 	b.w	80091bc <_free_r>
 80091a6:	bf00      	nop
 80091a8:	2000002c 	.word	0x2000002c

080091ac <memset>:
 80091ac:	4402      	add	r2, r0
 80091ae:	4603      	mov	r3, r0
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d100      	bne.n	80091b6 <memset+0xa>
 80091b4:	4770      	bx	lr
 80091b6:	f803 1b01 	strb.w	r1, [r3], #1
 80091ba:	e7f9      	b.n	80091b0 <memset+0x4>

080091bc <_free_r>:
 80091bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091be:	2900      	cmp	r1, #0
 80091c0:	d044      	beq.n	800924c <_free_r+0x90>
 80091c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091c6:	9001      	str	r0, [sp, #4]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f1a1 0404 	sub.w	r4, r1, #4
 80091ce:	bfb8      	it	lt
 80091d0:	18e4      	addlt	r4, r4, r3
 80091d2:	f000 fd8b 	bl	8009cec <__malloc_lock>
 80091d6:	4a1e      	ldr	r2, [pc, #120]	; (8009250 <_free_r+0x94>)
 80091d8:	9801      	ldr	r0, [sp, #4]
 80091da:	6813      	ldr	r3, [r2, #0]
 80091dc:	b933      	cbnz	r3, 80091ec <_free_r+0x30>
 80091de:	6063      	str	r3, [r4, #4]
 80091e0:	6014      	str	r4, [r2, #0]
 80091e2:	b003      	add	sp, #12
 80091e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091e8:	f000 bd86 	b.w	8009cf8 <__malloc_unlock>
 80091ec:	42a3      	cmp	r3, r4
 80091ee:	d908      	bls.n	8009202 <_free_r+0x46>
 80091f0:	6825      	ldr	r5, [r4, #0]
 80091f2:	1961      	adds	r1, r4, r5
 80091f4:	428b      	cmp	r3, r1
 80091f6:	bf01      	itttt	eq
 80091f8:	6819      	ldreq	r1, [r3, #0]
 80091fa:	685b      	ldreq	r3, [r3, #4]
 80091fc:	1949      	addeq	r1, r1, r5
 80091fe:	6021      	streq	r1, [r4, #0]
 8009200:	e7ed      	b.n	80091de <_free_r+0x22>
 8009202:	461a      	mov	r2, r3
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	b10b      	cbz	r3, 800920c <_free_r+0x50>
 8009208:	42a3      	cmp	r3, r4
 800920a:	d9fa      	bls.n	8009202 <_free_r+0x46>
 800920c:	6811      	ldr	r1, [r2, #0]
 800920e:	1855      	adds	r5, r2, r1
 8009210:	42a5      	cmp	r5, r4
 8009212:	d10b      	bne.n	800922c <_free_r+0x70>
 8009214:	6824      	ldr	r4, [r4, #0]
 8009216:	4421      	add	r1, r4
 8009218:	1854      	adds	r4, r2, r1
 800921a:	42a3      	cmp	r3, r4
 800921c:	6011      	str	r1, [r2, #0]
 800921e:	d1e0      	bne.n	80091e2 <_free_r+0x26>
 8009220:	681c      	ldr	r4, [r3, #0]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	6053      	str	r3, [r2, #4]
 8009226:	4421      	add	r1, r4
 8009228:	6011      	str	r1, [r2, #0]
 800922a:	e7da      	b.n	80091e2 <_free_r+0x26>
 800922c:	d902      	bls.n	8009234 <_free_r+0x78>
 800922e:	230c      	movs	r3, #12
 8009230:	6003      	str	r3, [r0, #0]
 8009232:	e7d6      	b.n	80091e2 <_free_r+0x26>
 8009234:	6825      	ldr	r5, [r4, #0]
 8009236:	1961      	adds	r1, r4, r5
 8009238:	428b      	cmp	r3, r1
 800923a:	bf04      	itt	eq
 800923c:	6819      	ldreq	r1, [r3, #0]
 800923e:	685b      	ldreq	r3, [r3, #4]
 8009240:	6063      	str	r3, [r4, #4]
 8009242:	bf04      	itt	eq
 8009244:	1949      	addeq	r1, r1, r5
 8009246:	6021      	streq	r1, [r4, #0]
 8009248:	6054      	str	r4, [r2, #4]
 800924a:	e7ca      	b.n	80091e2 <_free_r+0x26>
 800924c:	b003      	add	sp, #12
 800924e:	bd30      	pop	{r4, r5, pc}
 8009250:	200008dc 	.word	0x200008dc

08009254 <sbrk_aligned>:
 8009254:	b570      	push	{r4, r5, r6, lr}
 8009256:	4e0e      	ldr	r6, [pc, #56]	; (8009290 <sbrk_aligned+0x3c>)
 8009258:	460c      	mov	r4, r1
 800925a:	6831      	ldr	r1, [r6, #0]
 800925c:	4605      	mov	r5, r0
 800925e:	b911      	cbnz	r1, 8009266 <sbrk_aligned+0x12>
 8009260:	f000 fba4 	bl	80099ac <_sbrk_r>
 8009264:	6030      	str	r0, [r6, #0]
 8009266:	4621      	mov	r1, r4
 8009268:	4628      	mov	r0, r5
 800926a:	f000 fb9f 	bl	80099ac <_sbrk_r>
 800926e:	1c43      	adds	r3, r0, #1
 8009270:	d00a      	beq.n	8009288 <sbrk_aligned+0x34>
 8009272:	1cc4      	adds	r4, r0, #3
 8009274:	f024 0403 	bic.w	r4, r4, #3
 8009278:	42a0      	cmp	r0, r4
 800927a:	d007      	beq.n	800928c <sbrk_aligned+0x38>
 800927c:	1a21      	subs	r1, r4, r0
 800927e:	4628      	mov	r0, r5
 8009280:	f000 fb94 	bl	80099ac <_sbrk_r>
 8009284:	3001      	adds	r0, #1
 8009286:	d101      	bne.n	800928c <sbrk_aligned+0x38>
 8009288:	f04f 34ff 	mov.w	r4, #4294967295
 800928c:	4620      	mov	r0, r4
 800928e:	bd70      	pop	{r4, r5, r6, pc}
 8009290:	200008e0 	.word	0x200008e0

08009294 <_malloc_r>:
 8009294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009298:	1ccd      	adds	r5, r1, #3
 800929a:	f025 0503 	bic.w	r5, r5, #3
 800929e:	3508      	adds	r5, #8
 80092a0:	2d0c      	cmp	r5, #12
 80092a2:	bf38      	it	cc
 80092a4:	250c      	movcc	r5, #12
 80092a6:	2d00      	cmp	r5, #0
 80092a8:	4607      	mov	r7, r0
 80092aa:	db01      	blt.n	80092b0 <_malloc_r+0x1c>
 80092ac:	42a9      	cmp	r1, r5
 80092ae:	d905      	bls.n	80092bc <_malloc_r+0x28>
 80092b0:	230c      	movs	r3, #12
 80092b2:	603b      	str	r3, [r7, #0]
 80092b4:	2600      	movs	r6, #0
 80092b6:	4630      	mov	r0, r6
 80092b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092bc:	4e2e      	ldr	r6, [pc, #184]	; (8009378 <_malloc_r+0xe4>)
 80092be:	f000 fd15 	bl	8009cec <__malloc_lock>
 80092c2:	6833      	ldr	r3, [r6, #0]
 80092c4:	461c      	mov	r4, r3
 80092c6:	bb34      	cbnz	r4, 8009316 <_malloc_r+0x82>
 80092c8:	4629      	mov	r1, r5
 80092ca:	4638      	mov	r0, r7
 80092cc:	f7ff ffc2 	bl	8009254 <sbrk_aligned>
 80092d0:	1c43      	adds	r3, r0, #1
 80092d2:	4604      	mov	r4, r0
 80092d4:	d14d      	bne.n	8009372 <_malloc_r+0xde>
 80092d6:	6834      	ldr	r4, [r6, #0]
 80092d8:	4626      	mov	r6, r4
 80092da:	2e00      	cmp	r6, #0
 80092dc:	d140      	bne.n	8009360 <_malloc_r+0xcc>
 80092de:	6823      	ldr	r3, [r4, #0]
 80092e0:	4631      	mov	r1, r6
 80092e2:	4638      	mov	r0, r7
 80092e4:	eb04 0803 	add.w	r8, r4, r3
 80092e8:	f000 fb60 	bl	80099ac <_sbrk_r>
 80092ec:	4580      	cmp	r8, r0
 80092ee:	d13a      	bne.n	8009366 <_malloc_r+0xd2>
 80092f0:	6821      	ldr	r1, [r4, #0]
 80092f2:	3503      	adds	r5, #3
 80092f4:	1a6d      	subs	r5, r5, r1
 80092f6:	f025 0503 	bic.w	r5, r5, #3
 80092fa:	3508      	adds	r5, #8
 80092fc:	2d0c      	cmp	r5, #12
 80092fe:	bf38      	it	cc
 8009300:	250c      	movcc	r5, #12
 8009302:	4629      	mov	r1, r5
 8009304:	4638      	mov	r0, r7
 8009306:	f7ff ffa5 	bl	8009254 <sbrk_aligned>
 800930a:	3001      	adds	r0, #1
 800930c:	d02b      	beq.n	8009366 <_malloc_r+0xd2>
 800930e:	6823      	ldr	r3, [r4, #0]
 8009310:	442b      	add	r3, r5
 8009312:	6023      	str	r3, [r4, #0]
 8009314:	e00e      	b.n	8009334 <_malloc_r+0xa0>
 8009316:	6822      	ldr	r2, [r4, #0]
 8009318:	1b52      	subs	r2, r2, r5
 800931a:	d41e      	bmi.n	800935a <_malloc_r+0xc6>
 800931c:	2a0b      	cmp	r2, #11
 800931e:	d916      	bls.n	800934e <_malloc_r+0xba>
 8009320:	1961      	adds	r1, r4, r5
 8009322:	42a3      	cmp	r3, r4
 8009324:	6025      	str	r5, [r4, #0]
 8009326:	bf18      	it	ne
 8009328:	6059      	strne	r1, [r3, #4]
 800932a:	6863      	ldr	r3, [r4, #4]
 800932c:	bf08      	it	eq
 800932e:	6031      	streq	r1, [r6, #0]
 8009330:	5162      	str	r2, [r4, r5]
 8009332:	604b      	str	r3, [r1, #4]
 8009334:	4638      	mov	r0, r7
 8009336:	f104 060b 	add.w	r6, r4, #11
 800933a:	f000 fcdd 	bl	8009cf8 <__malloc_unlock>
 800933e:	f026 0607 	bic.w	r6, r6, #7
 8009342:	1d23      	adds	r3, r4, #4
 8009344:	1af2      	subs	r2, r6, r3
 8009346:	d0b6      	beq.n	80092b6 <_malloc_r+0x22>
 8009348:	1b9b      	subs	r3, r3, r6
 800934a:	50a3      	str	r3, [r4, r2]
 800934c:	e7b3      	b.n	80092b6 <_malloc_r+0x22>
 800934e:	6862      	ldr	r2, [r4, #4]
 8009350:	42a3      	cmp	r3, r4
 8009352:	bf0c      	ite	eq
 8009354:	6032      	streq	r2, [r6, #0]
 8009356:	605a      	strne	r2, [r3, #4]
 8009358:	e7ec      	b.n	8009334 <_malloc_r+0xa0>
 800935a:	4623      	mov	r3, r4
 800935c:	6864      	ldr	r4, [r4, #4]
 800935e:	e7b2      	b.n	80092c6 <_malloc_r+0x32>
 8009360:	4634      	mov	r4, r6
 8009362:	6876      	ldr	r6, [r6, #4]
 8009364:	e7b9      	b.n	80092da <_malloc_r+0x46>
 8009366:	230c      	movs	r3, #12
 8009368:	603b      	str	r3, [r7, #0]
 800936a:	4638      	mov	r0, r7
 800936c:	f000 fcc4 	bl	8009cf8 <__malloc_unlock>
 8009370:	e7a1      	b.n	80092b6 <_malloc_r+0x22>
 8009372:	6025      	str	r5, [r4, #0]
 8009374:	e7de      	b.n	8009334 <_malloc_r+0xa0>
 8009376:	bf00      	nop
 8009378:	200008dc 	.word	0x200008dc

0800937c <__sfputc_r>:
 800937c:	6893      	ldr	r3, [r2, #8]
 800937e:	3b01      	subs	r3, #1
 8009380:	2b00      	cmp	r3, #0
 8009382:	b410      	push	{r4}
 8009384:	6093      	str	r3, [r2, #8]
 8009386:	da08      	bge.n	800939a <__sfputc_r+0x1e>
 8009388:	6994      	ldr	r4, [r2, #24]
 800938a:	42a3      	cmp	r3, r4
 800938c:	db01      	blt.n	8009392 <__sfputc_r+0x16>
 800938e:	290a      	cmp	r1, #10
 8009390:	d103      	bne.n	800939a <__sfputc_r+0x1e>
 8009392:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009396:	f000 bb5d 	b.w	8009a54 <__swbuf_r>
 800939a:	6813      	ldr	r3, [r2, #0]
 800939c:	1c58      	adds	r0, r3, #1
 800939e:	6010      	str	r0, [r2, #0]
 80093a0:	7019      	strb	r1, [r3, #0]
 80093a2:	4608      	mov	r0, r1
 80093a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <__sfputs_r>:
 80093aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ac:	4606      	mov	r6, r0
 80093ae:	460f      	mov	r7, r1
 80093b0:	4614      	mov	r4, r2
 80093b2:	18d5      	adds	r5, r2, r3
 80093b4:	42ac      	cmp	r4, r5
 80093b6:	d101      	bne.n	80093bc <__sfputs_r+0x12>
 80093b8:	2000      	movs	r0, #0
 80093ba:	e007      	b.n	80093cc <__sfputs_r+0x22>
 80093bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093c0:	463a      	mov	r2, r7
 80093c2:	4630      	mov	r0, r6
 80093c4:	f7ff ffda 	bl	800937c <__sfputc_r>
 80093c8:	1c43      	adds	r3, r0, #1
 80093ca:	d1f3      	bne.n	80093b4 <__sfputs_r+0xa>
 80093cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080093d0 <_vfiprintf_r>:
 80093d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d4:	460d      	mov	r5, r1
 80093d6:	b09d      	sub	sp, #116	; 0x74
 80093d8:	4614      	mov	r4, r2
 80093da:	4698      	mov	r8, r3
 80093dc:	4606      	mov	r6, r0
 80093de:	b118      	cbz	r0, 80093e8 <_vfiprintf_r+0x18>
 80093e0:	6983      	ldr	r3, [r0, #24]
 80093e2:	b90b      	cbnz	r3, 80093e8 <_vfiprintf_r+0x18>
 80093e4:	f7ff fc82 	bl	8008cec <__sinit>
 80093e8:	4b89      	ldr	r3, [pc, #548]	; (8009610 <_vfiprintf_r+0x240>)
 80093ea:	429d      	cmp	r5, r3
 80093ec:	d11b      	bne.n	8009426 <_vfiprintf_r+0x56>
 80093ee:	6875      	ldr	r5, [r6, #4]
 80093f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093f2:	07d9      	lsls	r1, r3, #31
 80093f4:	d405      	bmi.n	8009402 <_vfiprintf_r+0x32>
 80093f6:	89ab      	ldrh	r3, [r5, #12]
 80093f8:	059a      	lsls	r2, r3, #22
 80093fa:	d402      	bmi.n	8009402 <_vfiprintf_r+0x32>
 80093fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093fe:	f7ff fe5d 	bl	80090bc <__retarget_lock_acquire_recursive>
 8009402:	89ab      	ldrh	r3, [r5, #12]
 8009404:	071b      	lsls	r3, r3, #28
 8009406:	d501      	bpl.n	800940c <_vfiprintf_r+0x3c>
 8009408:	692b      	ldr	r3, [r5, #16]
 800940a:	b9eb      	cbnz	r3, 8009448 <_vfiprintf_r+0x78>
 800940c:	4629      	mov	r1, r5
 800940e:	4630      	mov	r0, r6
 8009410:	f000 fb84 	bl	8009b1c <__swsetup_r>
 8009414:	b1c0      	cbz	r0, 8009448 <_vfiprintf_r+0x78>
 8009416:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009418:	07dc      	lsls	r4, r3, #31
 800941a:	d50e      	bpl.n	800943a <_vfiprintf_r+0x6a>
 800941c:	f04f 30ff 	mov.w	r0, #4294967295
 8009420:	b01d      	add	sp, #116	; 0x74
 8009422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009426:	4b7b      	ldr	r3, [pc, #492]	; (8009614 <_vfiprintf_r+0x244>)
 8009428:	429d      	cmp	r5, r3
 800942a:	d101      	bne.n	8009430 <_vfiprintf_r+0x60>
 800942c:	68b5      	ldr	r5, [r6, #8]
 800942e:	e7df      	b.n	80093f0 <_vfiprintf_r+0x20>
 8009430:	4b79      	ldr	r3, [pc, #484]	; (8009618 <_vfiprintf_r+0x248>)
 8009432:	429d      	cmp	r5, r3
 8009434:	bf08      	it	eq
 8009436:	68f5      	ldreq	r5, [r6, #12]
 8009438:	e7da      	b.n	80093f0 <_vfiprintf_r+0x20>
 800943a:	89ab      	ldrh	r3, [r5, #12]
 800943c:	0598      	lsls	r0, r3, #22
 800943e:	d4ed      	bmi.n	800941c <_vfiprintf_r+0x4c>
 8009440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009442:	f7ff fe3c 	bl	80090be <__retarget_lock_release_recursive>
 8009446:	e7e9      	b.n	800941c <_vfiprintf_r+0x4c>
 8009448:	2300      	movs	r3, #0
 800944a:	9309      	str	r3, [sp, #36]	; 0x24
 800944c:	2320      	movs	r3, #32
 800944e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009452:	f8cd 800c 	str.w	r8, [sp, #12]
 8009456:	2330      	movs	r3, #48	; 0x30
 8009458:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800961c <_vfiprintf_r+0x24c>
 800945c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009460:	f04f 0901 	mov.w	r9, #1
 8009464:	4623      	mov	r3, r4
 8009466:	469a      	mov	sl, r3
 8009468:	f813 2b01 	ldrb.w	r2, [r3], #1
 800946c:	b10a      	cbz	r2, 8009472 <_vfiprintf_r+0xa2>
 800946e:	2a25      	cmp	r2, #37	; 0x25
 8009470:	d1f9      	bne.n	8009466 <_vfiprintf_r+0x96>
 8009472:	ebba 0b04 	subs.w	fp, sl, r4
 8009476:	d00b      	beq.n	8009490 <_vfiprintf_r+0xc0>
 8009478:	465b      	mov	r3, fp
 800947a:	4622      	mov	r2, r4
 800947c:	4629      	mov	r1, r5
 800947e:	4630      	mov	r0, r6
 8009480:	f7ff ff93 	bl	80093aa <__sfputs_r>
 8009484:	3001      	adds	r0, #1
 8009486:	f000 80aa 	beq.w	80095de <_vfiprintf_r+0x20e>
 800948a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800948c:	445a      	add	r2, fp
 800948e:	9209      	str	r2, [sp, #36]	; 0x24
 8009490:	f89a 3000 	ldrb.w	r3, [sl]
 8009494:	2b00      	cmp	r3, #0
 8009496:	f000 80a2 	beq.w	80095de <_vfiprintf_r+0x20e>
 800949a:	2300      	movs	r3, #0
 800949c:	f04f 32ff 	mov.w	r2, #4294967295
 80094a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094a4:	f10a 0a01 	add.w	sl, sl, #1
 80094a8:	9304      	str	r3, [sp, #16]
 80094aa:	9307      	str	r3, [sp, #28]
 80094ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094b0:	931a      	str	r3, [sp, #104]	; 0x68
 80094b2:	4654      	mov	r4, sl
 80094b4:	2205      	movs	r2, #5
 80094b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094ba:	4858      	ldr	r0, [pc, #352]	; (800961c <_vfiprintf_r+0x24c>)
 80094bc:	f7f6 fe90 	bl	80001e0 <memchr>
 80094c0:	9a04      	ldr	r2, [sp, #16]
 80094c2:	b9d8      	cbnz	r0, 80094fc <_vfiprintf_r+0x12c>
 80094c4:	06d1      	lsls	r1, r2, #27
 80094c6:	bf44      	itt	mi
 80094c8:	2320      	movmi	r3, #32
 80094ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094ce:	0713      	lsls	r3, r2, #28
 80094d0:	bf44      	itt	mi
 80094d2:	232b      	movmi	r3, #43	; 0x2b
 80094d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094d8:	f89a 3000 	ldrb.w	r3, [sl]
 80094dc:	2b2a      	cmp	r3, #42	; 0x2a
 80094de:	d015      	beq.n	800950c <_vfiprintf_r+0x13c>
 80094e0:	9a07      	ldr	r2, [sp, #28]
 80094e2:	4654      	mov	r4, sl
 80094e4:	2000      	movs	r0, #0
 80094e6:	f04f 0c0a 	mov.w	ip, #10
 80094ea:	4621      	mov	r1, r4
 80094ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094f0:	3b30      	subs	r3, #48	; 0x30
 80094f2:	2b09      	cmp	r3, #9
 80094f4:	d94e      	bls.n	8009594 <_vfiprintf_r+0x1c4>
 80094f6:	b1b0      	cbz	r0, 8009526 <_vfiprintf_r+0x156>
 80094f8:	9207      	str	r2, [sp, #28]
 80094fa:	e014      	b.n	8009526 <_vfiprintf_r+0x156>
 80094fc:	eba0 0308 	sub.w	r3, r0, r8
 8009500:	fa09 f303 	lsl.w	r3, r9, r3
 8009504:	4313      	orrs	r3, r2
 8009506:	9304      	str	r3, [sp, #16]
 8009508:	46a2      	mov	sl, r4
 800950a:	e7d2      	b.n	80094b2 <_vfiprintf_r+0xe2>
 800950c:	9b03      	ldr	r3, [sp, #12]
 800950e:	1d19      	adds	r1, r3, #4
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	9103      	str	r1, [sp, #12]
 8009514:	2b00      	cmp	r3, #0
 8009516:	bfbb      	ittet	lt
 8009518:	425b      	neglt	r3, r3
 800951a:	f042 0202 	orrlt.w	r2, r2, #2
 800951e:	9307      	strge	r3, [sp, #28]
 8009520:	9307      	strlt	r3, [sp, #28]
 8009522:	bfb8      	it	lt
 8009524:	9204      	strlt	r2, [sp, #16]
 8009526:	7823      	ldrb	r3, [r4, #0]
 8009528:	2b2e      	cmp	r3, #46	; 0x2e
 800952a:	d10c      	bne.n	8009546 <_vfiprintf_r+0x176>
 800952c:	7863      	ldrb	r3, [r4, #1]
 800952e:	2b2a      	cmp	r3, #42	; 0x2a
 8009530:	d135      	bne.n	800959e <_vfiprintf_r+0x1ce>
 8009532:	9b03      	ldr	r3, [sp, #12]
 8009534:	1d1a      	adds	r2, r3, #4
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	9203      	str	r2, [sp, #12]
 800953a:	2b00      	cmp	r3, #0
 800953c:	bfb8      	it	lt
 800953e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009542:	3402      	adds	r4, #2
 8009544:	9305      	str	r3, [sp, #20]
 8009546:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800962c <_vfiprintf_r+0x25c>
 800954a:	7821      	ldrb	r1, [r4, #0]
 800954c:	2203      	movs	r2, #3
 800954e:	4650      	mov	r0, sl
 8009550:	f7f6 fe46 	bl	80001e0 <memchr>
 8009554:	b140      	cbz	r0, 8009568 <_vfiprintf_r+0x198>
 8009556:	2340      	movs	r3, #64	; 0x40
 8009558:	eba0 000a 	sub.w	r0, r0, sl
 800955c:	fa03 f000 	lsl.w	r0, r3, r0
 8009560:	9b04      	ldr	r3, [sp, #16]
 8009562:	4303      	orrs	r3, r0
 8009564:	3401      	adds	r4, #1
 8009566:	9304      	str	r3, [sp, #16]
 8009568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800956c:	482c      	ldr	r0, [pc, #176]	; (8009620 <_vfiprintf_r+0x250>)
 800956e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009572:	2206      	movs	r2, #6
 8009574:	f7f6 fe34 	bl	80001e0 <memchr>
 8009578:	2800      	cmp	r0, #0
 800957a:	d03f      	beq.n	80095fc <_vfiprintf_r+0x22c>
 800957c:	4b29      	ldr	r3, [pc, #164]	; (8009624 <_vfiprintf_r+0x254>)
 800957e:	bb1b      	cbnz	r3, 80095c8 <_vfiprintf_r+0x1f8>
 8009580:	9b03      	ldr	r3, [sp, #12]
 8009582:	3307      	adds	r3, #7
 8009584:	f023 0307 	bic.w	r3, r3, #7
 8009588:	3308      	adds	r3, #8
 800958a:	9303      	str	r3, [sp, #12]
 800958c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800958e:	443b      	add	r3, r7
 8009590:	9309      	str	r3, [sp, #36]	; 0x24
 8009592:	e767      	b.n	8009464 <_vfiprintf_r+0x94>
 8009594:	fb0c 3202 	mla	r2, ip, r2, r3
 8009598:	460c      	mov	r4, r1
 800959a:	2001      	movs	r0, #1
 800959c:	e7a5      	b.n	80094ea <_vfiprintf_r+0x11a>
 800959e:	2300      	movs	r3, #0
 80095a0:	3401      	adds	r4, #1
 80095a2:	9305      	str	r3, [sp, #20]
 80095a4:	4619      	mov	r1, r3
 80095a6:	f04f 0c0a 	mov.w	ip, #10
 80095aa:	4620      	mov	r0, r4
 80095ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095b0:	3a30      	subs	r2, #48	; 0x30
 80095b2:	2a09      	cmp	r2, #9
 80095b4:	d903      	bls.n	80095be <_vfiprintf_r+0x1ee>
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d0c5      	beq.n	8009546 <_vfiprintf_r+0x176>
 80095ba:	9105      	str	r1, [sp, #20]
 80095bc:	e7c3      	b.n	8009546 <_vfiprintf_r+0x176>
 80095be:	fb0c 2101 	mla	r1, ip, r1, r2
 80095c2:	4604      	mov	r4, r0
 80095c4:	2301      	movs	r3, #1
 80095c6:	e7f0      	b.n	80095aa <_vfiprintf_r+0x1da>
 80095c8:	ab03      	add	r3, sp, #12
 80095ca:	9300      	str	r3, [sp, #0]
 80095cc:	462a      	mov	r2, r5
 80095ce:	4b16      	ldr	r3, [pc, #88]	; (8009628 <_vfiprintf_r+0x258>)
 80095d0:	a904      	add	r1, sp, #16
 80095d2:	4630      	mov	r0, r6
 80095d4:	f3af 8000 	nop.w
 80095d8:	4607      	mov	r7, r0
 80095da:	1c78      	adds	r0, r7, #1
 80095dc:	d1d6      	bne.n	800958c <_vfiprintf_r+0x1bc>
 80095de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095e0:	07d9      	lsls	r1, r3, #31
 80095e2:	d405      	bmi.n	80095f0 <_vfiprintf_r+0x220>
 80095e4:	89ab      	ldrh	r3, [r5, #12]
 80095e6:	059a      	lsls	r2, r3, #22
 80095e8:	d402      	bmi.n	80095f0 <_vfiprintf_r+0x220>
 80095ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095ec:	f7ff fd67 	bl	80090be <__retarget_lock_release_recursive>
 80095f0:	89ab      	ldrh	r3, [r5, #12]
 80095f2:	065b      	lsls	r3, r3, #25
 80095f4:	f53f af12 	bmi.w	800941c <_vfiprintf_r+0x4c>
 80095f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095fa:	e711      	b.n	8009420 <_vfiprintf_r+0x50>
 80095fc:	ab03      	add	r3, sp, #12
 80095fe:	9300      	str	r3, [sp, #0]
 8009600:	462a      	mov	r2, r5
 8009602:	4b09      	ldr	r3, [pc, #36]	; (8009628 <_vfiprintf_r+0x258>)
 8009604:	a904      	add	r1, sp, #16
 8009606:	4630      	mov	r0, r6
 8009608:	f000 f880 	bl	800970c <_printf_i>
 800960c:	e7e4      	b.n	80095d8 <_vfiprintf_r+0x208>
 800960e:	bf00      	nop
 8009610:	0800a504 	.word	0x0800a504
 8009614:	0800a524 	.word	0x0800a524
 8009618:	0800a4e4 	.word	0x0800a4e4
 800961c:	0800a548 	.word	0x0800a548
 8009620:	0800a552 	.word	0x0800a552
 8009624:	00000000 	.word	0x00000000
 8009628:	080093ab 	.word	0x080093ab
 800962c:	0800a54e 	.word	0x0800a54e

08009630 <_printf_common>:
 8009630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009634:	4616      	mov	r6, r2
 8009636:	4699      	mov	r9, r3
 8009638:	688a      	ldr	r2, [r1, #8]
 800963a:	690b      	ldr	r3, [r1, #16]
 800963c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009640:	4293      	cmp	r3, r2
 8009642:	bfb8      	it	lt
 8009644:	4613      	movlt	r3, r2
 8009646:	6033      	str	r3, [r6, #0]
 8009648:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800964c:	4607      	mov	r7, r0
 800964e:	460c      	mov	r4, r1
 8009650:	b10a      	cbz	r2, 8009656 <_printf_common+0x26>
 8009652:	3301      	adds	r3, #1
 8009654:	6033      	str	r3, [r6, #0]
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	0699      	lsls	r1, r3, #26
 800965a:	bf42      	ittt	mi
 800965c:	6833      	ldrmi	r3, [r6, #0]
 800965e:	3302      	addmi	r3, #2
 8009660:	6033      	strmi	r3, [r6, #0]
 8009662:	6825      	ldr	r5, [r4, #0]
 8009664:	f015 0506 	ands.w	r5, r5, #6
 8009668:	d106      	bne.n	8009678 <_printf_common+0x48>
 800966a:	f104 0a19 	add.w	sl, r4, #25
 800966e:	68e3      	ldr	r3, [r4, #12]
 8009670:	6832      	ldr	r2, [r6, #0]
 8009672:	1a9b      	subs	r3, r3, r2
 8009674:	42ab      	cmp	r3, r5
 8009676:	dc26      	bgt.n	80096c6 <_printf_common+0x96>
 8009678:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800967c:	1e13      	subs	r3, r2, #0
 800967e:	6822      	ldr	r2, [r4, #0]
 8009680:	bf18      	it	ne
 8009682:	2301      	movne	r3, #1
 8009684:	0692      	lsls	r2, r2, #26
 8009686:	d42b      	bmi.n	80096e0 <_printf_common+0xb0>
 8009688:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800968c:	4649      	mov	r1, r9
 800968e:	4638      	mov	r0, r7
 8009690:	47c0      	blx	r8
 8009692:	3001      	adds	r0, #1
 8009694:	d01e      	beq.n	80096d4 <_printf_common+0xa4>
 8009696:	6823      	ldr	r3, [r4, #0]
 8009698:	68e5      	ldr	r5, [r4, #12]
 800969a:	6832      	ldr	r2, [r6, #0]
 800969c:	f003 0306 	and.w	r3, r3, #6
 80096a0:	2b04      	cmp	r3, #4
 80096a2:	bf08      	it	eq
 80096a4:	1aad      	subeq	r5, r5, r2
 80096a6:	68a3      	ldr	r3, [r4, #8]
 80096a8:	6922      	ldr	r2, [r4, #16]
 80096aa:	bf0c      	ite	eq
 80096ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096b0:	2500      	movne	r5, #0
 80096b2:	4293      	cmp	r3, r2
 80096b4:	bfc4      	itt	gt
 80096b6:	1a9b      	subgt	r3, r3, r2
 80096b8:	18ed      	addgt	r5, r5, r3
 80096ba:	2600      	movs	r6, #0
 80096bc:	341a      	adds	r4, #26
 80096be:	42b5      	cmp	r5, r6
 80096c0:	d11a      	bne.n	80096f8 <_printf_common+0xc8>
 80096c2:	2000      	movs	r0, #0
 80096c4:	e008      	b.n	80096d8 <_printf_common+0xa8>
 80096c6:	2301      	movs	r3, #1
 80096c8:	4652      	mov	r2, sl
 80096ca:	4649      	mov	r1, r9
 80096cc:	4638      	mov	r0, r7
 80096ce:	47c0      	blx	r8
 80096d0:	3001      	adds	r0, #1
 80096d2:	d103      	bne.n	80096dc <_printf_common+0xac>
 80096d4:	f04f 30ff 	mov.w	r0, #4294967295
 80096d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096dc:	3501      	adds	r5, #1
 80096de:	e7c6      	b.n	800966e <_printf_common+0x3e>
 80096e0:	18e1      	adds	r1, r4, r3
 80096e2:	1c5a      	adds	r2, r3, #1
 80096e4:	2030      	movs	r0, #48	; 0x30
 80096e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80096ea:	4422      	add	r2, r4
 80096ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80096f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80096f4:	3302      	adds	r3, #2
 80096f6:	e7c7      	b.n	8009688 <_printf_common+0x58>
 80096f8:	2301      	movs	r3, #1
 80096fa:	4622      	mov	r2, r4
 80096fc:	4649      	mov	r1, r9
 80096fe:	4638      	mov	r0, r7
 8009700:	47c0      	blx	r8
 8009702:	3001      	adds	r0, #1
 8009704:	d0e6      	beq.n	80096d4 <_printf_common+0xa4>
 8009706:	3601      	adds	r6, #1
 8009708:	e7d9      	b.n	80096be <_printf_common+0x8e>
	...

0800970c <_printf_i>:
 800970c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009710:	7e0f      	ldrb	r7, [r1, #24]
 8009712:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009714:	2f78      	cmp	r7, #120	; 0x78
 8009716:	4691      	mov	r9, r2
 8009718:	4680      	mov	r8, r0
 800971a:	460c      	mov	r4, r1
 800971c:	469a      	mov	sl, r3
 800971e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009722:	d807      	bhi.n	8009734 <_printf_i+0x28>
 8009724:	2f62      	cmp	r7, #98	; 0x62
 8009726:	d80a      	bhi.n	800973e <_printf_i+0x32>
 8009728:	2f00      	cmp	r7, #0
 800972a:	f000 80d8 	beq.w	80098de <_printf_i+0x1d2>
 800972e:	2f58      	cmp	r7, #88	; 0x58
 8009730:	f000 80a3 	beq.w	800987a <_printf_i+0x16e>
 8009734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009738:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800973c:	e03a      	b.n	80097b4 <_printf_i+0xa8>
 800973e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009742:	2b15      	cmp	r3, #21
 8009744:	d8f6      	bhi.n	8009734 <_printf_i+0x28>
 8009746:	a101      	add	r1, pc, #4	; (adr r1, 800974c <_printf_i+0x40>)
 8009748:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800974c:	080097a5 	.word	0x080097a5
 8009750:	080097b9 	.word	0x080097b9
 8009754:	08009735 	.word	0x08009735
 8009758:	08009735 	.word	0x08009735
 800975c:	08009735 	.word	0x08009735
 8009760:	08009735 	.word	0x08009735
 8009764:	080097b9 	.word	0x080097b9
 8009768:	08009735 	.word	0x08009735
 800976c:	08009735 	.word	0x08009735
 8009770:	08009735 	.word	0x08009735
 8009774:	08009735 	.word	0x08009735
 8009778:	080098c5 	.word	0x080098c5
 800977c:	080097e9 	.word	0x080097e9
 8009780:	080098a7 	.word	0x080098a7
 8009784:	08009735 	.word	0x08009735
 8009788:	08009735 	.word	0x08009735
 800978c:	080098e7 	.word	0x080098e7
 8009790:	08009735 	.word	0x08009735
 8009794:	080097e9 	.word	0x080097e9
 8009798:	08009735 	.word	0x08009735
 800979c:	08009735 	.word	0x08009735
 80097a0:	080098af 	.word	0x080098af
 80097a4:	682b      	ldr	r3, [r5, #0]
 80097a6:	1d1a      	adds	r2, r3, #4
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	602a      	str	r2, [r5, #0]
 80097ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097b4:	2301      	movs	r3, #1
 80097b6:	e0a3      	b.n	8009900 <_printf_i+0x1f4>
 80097b8:	6820      	ldr	r0, [r4, #0]
 80097ba:	6829      	ldr	r1, [r5, #0]
 80097bc:	0606      	lsls	r6, r0, #24
 80097be:	f101 0304 	add.w	r3, r1, #4
 80097c2:	d50a      	bpl.n	80097da <_printf_i+0xce>
 80097c4:	680e      	ldr	r6, [r1, #0]
 80097c6:	602b      	str	r3, [r5, #0]
 80097c8:	2e00      	cmp	r6, #0
 80097ca:	da03      	bge.n	80097d4 <_printf_i+0xc8>
 80097cc:	232d      	movs	r3, #45	; 0x2d
 80097ce:	4276      	negs	r6, r6
 80097d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097d4:	485e      	ldr	r0, [pc, #376]	; (8009950 <_printf_i+0x244>)
 80097d6:	230a      	movs	r3, #10
 80097d8:	e019      	b.n	800980e <_printf_i+0x102>
 80097da:	680e      	ldr	r6, [r1, #0]
 80097dc:	602b      	str	r3, [r5, #0]
 80097de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80097e2:	bf18      	it	ne
 80097e4:	b236      	sxthne	r6, r6
 80097e6:	e7ef      	b.n	80097c8 <_printf_i+0xbc>
 80097e8:	682b      	ldr	r3, [r5, #0]
 80097ea:	6820      	ldr	r0, [r4, #0]
 80097ec:	1d19      	adds	r1, r3, #4
 80097ee:	6029      	str	r1, [r5, #0]
 80097f0:	0601      	lsls	r1, r0, #24
 80097f2:	d501      	bpl.n	80097f8 <_printf_i+0xec>
 80097f4:	681e      	ldr	r6, [r3, #0]
 80097f6:	e002      	b.n	80097fe <_printf_i+0xf2>
 80097f8:	0646      	lsls	r6, r0, #25
 80097fa:	d5fb      	bpl.n	80097f4 <_printf_i+0xe8>
 80097fc:	881e      	ldrh	r6, [r3, #0]
 80097fe:	4854      	ldr	r0, [pc, #336]	; (8009950 <_printf_i+0x244>)
 8009800:	2f6f      	cmp	r7, #111	; 0x6f
 8009802:	bf0c      	ite	eq
 8009804:	2308      	moveq	r3, #8
 8009806:	230a      	movne	r3, #10
 8009808:	2100      	movs	r1, #0
 800980a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800980e:	6865      	ldr	r5, [r4, #4]
 8009810:	60a5      	str	r5, [r4, #8]
 8009812:	2d00      	cmp	r5, #0
 8009814:	bfa2      	ittt	ge
 8009816:	6821      	ldrge	r1, [r4, #0]
 8009818:	f021 0104 	bicge.w	r1, r1, #4
 800981c:	6021      	strge	r1, [r4, #0]
 800981e:	b90e      	cbnz	r6, 8009824 <_printf_i+0x118>
 8009820:	2d00      	cmp	r5, #0
 8009822:	d04d      	beq.n	80098c0 <_printf_i+0x1b4>
 8009824:	4615      	mov	r5, r2
 8009826:	fbb6 f1f3 	udiv	r1, r6, r3
 800982a:	fb03 6711 	mls	r7, r3, r1, r6
 800982e:	5dc7      	ldrb	r7, [r0, r7]
 8009830:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009834:	4637      	mov	r7, r6
 8009836:	42bb      	cmp	r3, r7
 8009838:	460e      	mov	r6, r1
 800983a:	d9f4      	bls.n	8009826 <_printf_i+0x11a>
 800983c:	2b08      	cmp	r3, #8
 800983e:	d10b      	bne.n	8009858 <_printf_i+0x14c>
 8009840:	6823      	ldr	r3, [r4, #0]
 8009842:	07de      	lsls	r6, r3, #31
 8009844:	d508      	bpl.n	8009858 <_printf_i+0x14c>
 8009846:	6923      	ldr	r3, [r4, #16]
 8009848:	6861      	ldr	r1, [r4, #4]
 800984a:	4299      	cmp	r1, r3
 800984c:	bfde      	ittt	le
 800984e:	2330      	movle	r3, #48	; 0x30
 8009850:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009854:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009858:	1b52      	subs	r2, r2, r5
 800985a:	6122      	str	r2, [r4, #16]
 800985c:	f8cd a000 	str.w	sl, [sp]
 8009860:	464b      	mov	r3, r9
 8009862:	aa03      	add	r2, sp, #12
 8009864:	4621      	mov	r1, r4
 8009866:	4640      	mov	r0, r8
 8009868:	f7ff fee2 	bl	8009630 <_printf_common>
 800986c:	3001      	adds	r0, #1
 800986e:	d14c      	bne.n	800990a <_printf_i+0x1fe>
 8009870:	f04f 30ff 	mov.w	r0, #4294967295
 8009874:	b004      	add	sp, #16
 8009876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800987a:	4835      	ldr	r0, [pc, #212]	; (8009950 <_printf_i+0x244>)
 800987c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009880:	6829      	ldr	r1, [r5, #0]
 8009882:	6823      	ldr	r3, [r4, #0]
 8009884:	f851 6b04 	ldr.w	r6, [r1], #4
 8009888:	6029      	str	r1, [r5, #0]
 800988a:	061d      	lsls	r5, r3, #24
 800988c:	d514      	bpl.n	80098b8 <_printf_i+0x1ac>
 800988e:	07df      	lsls	r7, r3, #31
 8009890:	bf44      	itt	mi
 8009892:	f043 0320 	orrmi.w	r3, r3, #32
 8009896:	6023      	strmi	r3, [r4, #0]
 8009898:	b91e      	cbnz	r6, 80098a2 <_printf_i+0x196>
 800989a:	6823      	ldr	r3, [r4, #0]
 800989c:	f023 0320 	bic.w	r3, r3, #32
 80098a0:	6023      	str	r3, [r4, #0]
 80098a2:	2310      	movs	r3, #16
 80098a4:	e7b0      	b.n	8009808 <_printf_i+0xfc>
 80098a6:	6823      	ldr	r3, [r4, #0]
 80098a8:	f043 0320 	orr.w	r3, r3, #32
 80098ac:	6023      	str	r3, [r4, #0]
 80098ae:	2378      	movs	r3, #120	; 0x78
 80098b0:	4828      	ldr	r0, [pc, #160]	; (8009954 <_printf_i+0x248>)
 80098b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80098b6:	e7e3      	b.n	8009880 <_printf_i+0x174>
 80098b8:	0659      	lsls	r1, r3, #25
 80098ba:	bf48      	it	mi
 80098bc:	b2b6      	uxthmi	r6, r6
 80098be:	e7e6      	b.n	800988e <_printf_i+0x182>
 80098c0:	4615      	mov	r5, r2
 80098c2:	e7bb      	b.n	800983c <_printf_i+0x130>
 80098c4:	682b      	ldr	r3, [r5, #0]
 80098c6:	6826      	ldr	r6, [r4, #0]
 80098c8:	6961      	ldr	r1, [r4, #20]
 80098ca:	1d18      	adds	r0, r3, #4
 80098cc:	6028      	str	r0, [r5, #0]
 80098ce:	0635      	lsls	r5, r6, #24
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	d501      	bpl.n	80098d8 <_printf_i+0x1cc>
 80098d4:	6019      	str	r1, [r3, #0]
 80098d6:	e002      	b.n	80098de <_printf_i+0x1d2>
 80098d8:	0670      	lsls	r0, r6, #25
 80098da:	d5fb      	bpl.n	80098d4 <_printf_i+0x1c8>
 80098dc:	8019      	strh	r1, [r3, #0]
 80098de:	2300      	movs	r3, #0
 80098e0:	6123      	str	r3, [r4, #16]
 80098e2:	4615      	mov	r5, r2
 80098e4:	e7ba      	b.n	800985c <_printf_i+0x150>
 80098e6:	682b      	ldr	r3, [r5, #0]
 80098e8:	1d1a      	adds	r2, r3, #4
 80098ea:	602a      	str	r2, [r5, #0]
 80098ec:	681d      	ldr	r5, [r3, #0]
 80098ee:	6862      	ldr	r2, [r4, #4]
 80098f0:	2100      	movs	r1, #0
 80098f2:	4628      	mov	r0, r5
 80098f4:	f7f6 fc74 	bl	80001e0 <memchr>
 80098f8:	b108      	cbz	r0, 80098fe <_printf_i+0x1f2>
 80098fa:	1b40      	subs	r0, r0, r5
 80098fc:	6060      	str	r0, [r4, #4]
 80098fe:	6863      	ldr	r3, [r4, #4]
 8009900:	6123      	str	r3, [r4, #16]
 8009902:	2300      	movs	r3, #0
 8009904:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009908:	e7a8      	b.n	800985c <_printf_i+0x150>
 800990a:	6923      	ldr	r3, [r4, #16]
 800990c:	462a      	mov	r2, r5
 800990e:	4649      	mov	r1, r9
 8009910:	4640      	mov	r0, r8
 8009912:	47d0      	blx	sl
 8009914:	3001      	adds	r0, #1
 8009916:	d0ab      	beq.n	8009870 <_printf_i+0x164>
 8009918:	6823      	ldr	r3, [r4, #0]
 800991a:	079b      	lsls	r3, r3, #30
 800991c:	d413      	bmi.n	8009946 <_printf_i+0x23a>
 800991e:	68e0      	ldr	r0, [r4, #12]
 8009920:	9b03      	ldr	r3, [sp, #12]
 8009922:	4298      	cmp	r0, r3
 8009924:	bfb8      	it	lt
 8009926:	4618      	movlt	r0, r3
 8009928:	e7a4      	b.n	8009874 <_printf_i+0x168>
 800992a:	2301      	movs	r3, #1
 800992c:	4632      	mov	r2, r6
 800992e:	4649      	mov	r1, r9
 8009930:	4640      	mov	r0, r8
 8009932:	47d0      	blx	sl
 8009934:	3001      	adds	r0, #1
 8009936:	d09b      	beq.n	8009870 <_printf_i+0x164>
 8009938:	3501      	adds	r5, #1
 800993a:	68e3      	ldr	r3, [r4, #12]
 800993c:	9903      	ldr	r1, [sp, #12]
 800993e:	1a5b      	subs	r3, r3, r1
 8009940:	42ab      	cmp	r3, r5
 8009942:	dcf2      	bgt.n	800992a <_printf_i+0x21e>
 8009944:	e7eb      	b.n	800991e <_printf_i+0x212>
 8009946:	2500      	movs	r5, #0
 8009948:	f104 0619 	add.w	r6, r4, #25
 800994c:	e7f5      	b.n	800993a <_printf_i+0x22e>
 800994e:	bf00      	nop
 8009950:	0800a559 	.word	0x0800a559
 8009954:	0800a56a 	.word	0x0800a56a

08009958 <_open_r>:
 8009958:	b538      	push	{r3, r4, r5, lr}
 800995a:	4d07      	ldr	r5, [pc, #28]	; (8009978 <_open_r+0x20>)
 800995c:	4604      	mov	r4, r0
 800995e:	4608      	mov	r0, r1
 8009960:	4611      	mov	r1, r2
 8009962:	2200      	movs	r2, #0
 8009964:	602a      	str	r2, [r5, #0]
 8009966:	461a      	mov	r2, r3
 8009968:	f000 fb82 	bl	800a070 <_open>
 800996c:	1c43      	adds	r3, r0, #1
 800996e:	d102      	bne.n	8009976 <_open_r+0x1e>
 8009970:	682b      	ldr	r3, [r5, #0]
 8009972:	b103      	cbz	r3, 8009976 <_open_r+0x1e>
 8009974:	6023      	str	r3, [r4, #0]
 8009976:	bd38      	pop	{r3, r4, r5, pc}
 8009978:	200008e4 	.word	0x200008e4

0800997c <iprintf>:
 800997c:	b40f      	push	{r0, r1, r2, r3}
 800997e:	4b0a      	ldr	r3, [pc, #40]	; (80099a8 <iprintf+0x2c>)
 8009980:	b513      	push	{r0, r1, r4, lr}
 8009982:	681c      	ldr	r4, [r3, #0]
 8009984:	b124      	cbz	r4, 8009990 <iprintf+0x14>
 8009986:	69a3      	ldr	r3, [r4, #24]
 8009988:	b913      	cbnz	r3, 8009990 <iprintf+0x14>
 800998a:	4620      	mov	r0, r4
 800998c:	f7ff f9ae 	bl	8008cec <__sinit>
 8009990:	ab05      	add	r3, sp, #20
 8009992:	9a04      	ldr	r2, [sp, #16]
 8009994:	68a1      	ldr	r1, [r4, #8]
 8009996:	9301      	str	r3, [sp, #4]
 8009998:	4620      	mov	r0, r4
 800999a:	f7ff fd19 	bl	80093d0 <_vfiprintf_r>
 800999e:	b002      	add	sp, #8
 80099a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099a4:	b004      	add	sp, #16
 80099a6:	4770      	bx	lr
 80099a8:	2000002c 	.word	0x2000002c

080099ac <_sbrk_r>:
 80099ac:	b538      	push	{r3, r4, r5, lr}
 80099ae:	4d06      	ldr	r5, [pc, #24]	; (80099c8 <_sbrk_r+0x1c>)
 80099b0:	2300      	movs	r3, #0
 80099b2:	4604      	mov	r4, r0
 80099b4:	4608      	mov	r0, r1
 80099b6:	602b      	str	r3, [r5, #0]
 80099b8:	f7f7 faae 	bl	8000f18 <_sbrk>
 80099bc:	1c43      	adds	r3, r0, #1
 80099be:	d102      	bne.n	80099c6 <_sbrk_r+0x1a>
 80099c0:	682b      	ldr	r3, [r5, #0]
 80099c2:	b103      	cbz	r3, 80099c6 <_sbrk_r+0x1a>
 80099c4:	6023      	str	r3, [r4, #0]
 80099c6:	bd38      	pop	{r3, r4, r5, pc}
 80099c8:	200008e4 	.word	0x200008e4

080099cc <__sread>:
 80099cc:	b510      	push	{r4, lr}
 80099ce:	460c      	mov	r4, r1
 80099d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099d4:	f000 f996 	bl	8009d04 <_read_r>
 80099d8:	2800      	cmp	r0, #0
 80099da:	bfab      	itete	ge
 80099dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80099de:	89a3      	ldrhlt	r3, [r4, #12]
 80099e0:	181b      	addge	r3, r3, r0
 80099e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80099e6:	bfac      	ite	ge
 80099e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80099ea:	81a3      	strhlt	r3, [r4, #12]
 80099ec:	bd10      	pop	{r4, pc}

080099ee <__swrite>:
 80099ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099f2:	461f      	mov	r7, r3
 80099f4:	898b      	ldrh	r3, [r1, #12]
 80099f6:	05db      	lsls	r3, r3, #23
 80099f8:	4605      	mov	r5, r0
 80099fa:	460c      	mov	r4, r1
 80099fc:	4616      	mov	r6, r2
 80099fe:	d505      	bpl.n	8009a0c <__swrite+0x1e>
 8009a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a04:	2302      	movs	r3, #2
 8009a06:	2200      	movs	r2, #0
 8009a08:	f000 f95e 	bl	8009cc8 <_lseek_r>
 8009a0c:	89a3      	ldrh	r3, [r4, #12]
 8009a0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a16:	81a3      	strh	r3, [r4, #12]
 8009a18:	4632      	mov	r2, r6
 8009a1a:	463b      	mov	r3, r7
 8009a1c:	4628      	mov	r0, r5
 8009a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a22:	f000 b869 	b.w	8009af8 <_write_r>

08009a26 <__sseek>:
 8009a26:	b510      	push	{r4, lr}
 8009a28:	460c      	mov	r4, r1
 8009a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a2e:	f000 f94b 	bl	8009cc8 <_lseek_r>
 8009a32:	1c43      	adds	r3, r0, #1
 8009a34:	89a3      	ldrh	r3, [r4, #12]
 8009a36:	bf15      	itete	ne
 8009a38:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a42:	81a3      	strheq	r3, [r4, #12]
 8009a44:	bf18      	it	ne
 8009a46:	81a3      	strhne	r3, [r4, #12]
 8009a48:	bd10      	pop	{r4, pc}

08009a4a <__sclose>:
 8009a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a4e:	f000 b8d3 	b.w	8009bf8 <_close_r>
	...

08009a54 <__swbuf_r>:
 8009a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a56:	460e      	mov	r6, r1
 8009a58:	4614      	mov	r4, r2
 8009a5a:	4605      	mov	r5, r0
 8009a5c:	b118      	cbz	r0, 8009a66 <__swbuf_r+0x12>
 8009a5e:	6983      	ldr	r3, [r0, #24]
 8009a60:	b90b      	cbnz	r3, 8009a66 <__swbuf_r+0x12>
 8009a62:	f7ff f943 	bl	8008cec <__sinit>
 8009a66:	4b21      	ldr	r3, [pc, #132]	; (8009aec <__swbuf_r+0x98>)
 8009a68:	429c      	cmp	r4, r3
 8009a6a:	d12b      	bne.n	8009ac4 <__swbuf_r+0x70>
 8009a6c:	686c      	ldr	r4, [r5, #4]
 8009a6e:	69a3      	ldr	r3, [r4, #24]
 8009a70:	60a3      	str	r3, [r4, #8]
 8009a72:	89a3      	ldrh	r3, [r4, #12]
 8009a74:	071a      	lsls	r2, r3, #28
 8009a76:	d52f      	bpl.n	8009ad8 <__swbuf_r+0x84>
 8009a78:	6923      	ldr	r3, [r4, #16]
 8009a7a:	b36b      	cbz	r3, 8009ad8 <__swbuf_r+0x84>
 8009a7c:	6923      	ldr	r3, [r4, #16]
 8009a7e:	6820      	ldr	r0, [r4, #0]
 8009a80:	1ac0      	subs	r0, r0, r3
 8009a82:	6963      	ldr	r3, [r4, #20]
 8009a84:	b2f6      	uxtb	r6, r6
 8009a86:	4283      	cmp	r3, r0
 8009a88:	4637      	mov	r7, r6
 8009a8a:	dc04      	bgt.n	8009a96 <__swbuf_r+0x42>
 8009a8c:	4621      	mov	r1, r4
 8009a8e:	4628      	mov	r0, r5
 8009a90:	f7ff f886 	bl	8008ba0 <_fflush_r>
 8009a94:	bb30      	cbnz	r0, 8009ae4 <__swbuf_r+0x90>
 8009a96:	68a3      	ldr	r3, [r4, #8]
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	60a3      	str	r3, [r4, #8]
 8009a9c:	6823      	ldr	r3, [r4, #0]
 8009a9e:	1c5a      	adds	r2, r3, #1
 8009aa0:	6022      	str	r2, [r4, #0]
 8009aa2:	701e      	strb	r6, [r3, #0]
 8009aa4:	6963      	ldr	r3, [r4, #20]
 8009aa6:	3001      	adds	r0, #1
 8009aa8:	4283      	cmp	r3, r0
 8009aaa:	d004      	beq.n	8009ab6 <__swbuf_r+0x62>
 8009aac:	89a3      	ldrh	r3, [r4, #12]
 8009aae:	07db      	lsls	r3, r3, #31
 8009ab0:	d506      	bpl.n	8009ac0 <__swbuf_r+0x6c>
 8009ab2:	2e0a      	cmp	r6, #10
 8009ab4:	d104      	bne.n	8009ac0 <__swbuf_r+0x6c>
 8009ab6:	4621      	mov	r1, r4
 8009ab8:	4628      	mov	r0, r5
 8009aba:	f7ff f871 	bl	8008ba0 <_fflush_r>
 8009abe:	b988      	cbnz	r0, 8009ae4 <__swbuf_r+0x90>
 8009ac0:	4638      	mov	r0, r7
 8009ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ac4:	4b0a      	ldr	r3, [pc, #40]	; (8009af0 <__swbuf_r+0x9c>)
 8009ac6:	429c      	cmp	r4, r3
 8009ac8:	d101      	bne.n	8009ace <__swbuf_r+0x7a>
 8009aca:	68ac      	ldr	r4, [r5, #8]
 8009acc:	e7cf      	b.n	8009a6e <__swbuf_r+0x1a>
 8009ace:	4b09      	ldr	r3, [pc, #36]	; (8009af4 <__swbuf_r+0xa0>)
 8009ad0:	429c      	cmp	r4, r3
 8009ad2:	bf08      	it	eq
 8009ad4:	68ec      	ldreq	r4, [r5, #12]
 8009ad6:	e7ca      	b.n	8009a6e <__swbuf_r+0x1a>
 8009ad8:	4621      	mov	r1, r4
 8009ada:	4628      	mov	r0, r5
 8009adc:	f000 f81e 	bl	8009b1c <__swsetup_r>
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	d0cb      	beq.n	8009a7c <__swbuf_r+0x28>
 8009ae4:	f04f 37ff 	mov.w	r7, #4294967295
 8009ae8:	e7ea      	b.n	8009ac0 <__swbuf_r+0x6c>
 8009aea:	bf00      	nop
 8009aec:	0800a504 	.word	0x0800a504
 8009af0:	0800a524 	.word	0x0800a524
 8009af4:	0800a4e4 	.word	0x0800a4e4

08009af8 <_write_r>:
 8009af8:	b538      	push	{r3, r4, r5, lr}
 8009afa:	4d07      	ldr	r5, [pc, #28]	; (8009b18 <_write_r+0x20>)
 8009afc:	4604      	mov	r4, r0
 8009afe:	4608      	mov	r0, r1
 8009b00:	4611      	mov	r1, r2
 8009b02:	2200      	movs	r2, #0
 8009b04:	602a      	str	r2, [r5, #0]
 8009b06:	461a      	mov	r2, r3
 8009b08:	f000 f9b5 	bl	8009e76 <_write>
 8009b0c:	1c43      	adds	r3, r0, #1
 8009b0e:	d102      	bne.n	8009b16 <_write_r+0x1e>
 8009b10:	682b      	ldr	r3, [r5, #0]
 8009b12:	b103      	cbz	r3, 8009b16 <_write_r+0x1e>
 8009b14:	6023      	str	r3, [r4, #0]
 8009b16:	bd38      	pop	{r3, r4, r5, pc}
 8009b18:	200008e4 	.word	0x200008e4

08009b1c <__swsetup_r>:
 8009b1c:	4b32      	ldr	r3, [pc, #200]	; (8009be8 <__swsetup_r+0xcc>)
 8009b1e:	b570      	push	{r4, r5, r6, lr}
 8009b20:	681d      	ldr	r5, [r3, #0]
 8009b22:	4606      	mov	r6, r0
 8009b24:	460c      	mov	r4, r1
 8009b26:	b125      	cbz	r5, 8009b32 <__swsetup_r+0x16>
 8009b28:	69ab      	ldr	r3, [r5, #24]
 8009b2a:	b913      	cbnz	r3, 8009b32 <__swsetup_r+0x16>
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	f7ff f8dd 	bl	8008cec <__sinit>
 8009b32:	4b2e      	ldr	r3, [pc, #184]	; (8009bec <__swsetup_r+0xd0>)
 8009b34:	429c      	cmp	r4, r3
 8009b36:	d10f      	bne.n	8009b58 <__swsetup_r+0x3c>
 8009b38:	686c      	ldr	r4, [r5, #4]
 8009b3a:	89a3      	ldrh	r3, [r4, #12]
 8009b3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b40:	0719      	lsls	r1, r3, #28
 8009b42:	d42c      	bmi.n	8009b9e <__swsetup_r+0x82>
 8009b44:	06dd      	lsls	r5, r3, #27
 8009b46:	d411      	bmi.n	8009b6c <__swsetup_r+0x50>
 8009b48:	2309      	movs	r3, #9
 8009b4a:	6033      	str	r3, [r6, #0]
 8009b4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b50:	81a3      	strh	r3, [r4, #12]
 8009b52:	f04f 30ff 	mov.w	r0, #4294967295
 8009b56:	e03e      	b.n	8009bd6 <__swsetup_r+0xba>
 8009b58:	4b25      	ldr	r3, [pc, #148]	; (8009bf0 <__swsetup_r+0xd4>)
 8009b5a:	429c      	cmp	r4, r3
 8009b5c:	d101      	bne.n	8009b62 <__swsetup_r+0x46>
 8009b5e:	68ac      	ldr	r4, [r5, #8]
 8009b60:	e7eb      	b.n	8009b3a <__swsetup_r+0x1e>
 8009b62:	4b24      	ldr	r3, [pc, #144]	; (8009bf4 <__swsetup_r+0xd8>)
 8009b64:	429c      	cmp	r4, r3
 8009b66:	bf08      	it	eq
 8009b68:	68ec      	ldreq	r4, [r5, #12]
 8009b6a:	e7e6      	b.n	8009b3a <__swsetup_r+0x1e>
 8009b6c:	0758      	lsls	r0, r3, #29
 8009b6e:	d512      	bpl.n	8009b96 <__swsetup_r+0x7a>
 8009b70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b72:	b141      	cbz	r1, 8009b86 <__swsetup_r+0x6a>
 8009b74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b78:	4299      	cmp	r1, r3
 8009b7a:	d002      	beq.n	8009b82 <__swsetup_r+0x66>
 8009b7c:	4630      	mov	r0, r6
 8009b7e:	f7ff fb1d 	bl	80091bc <_free_r>
 8009b82:	2300      	movs	r3, #0
 8009b84:	6363      	str	r3, [r4, #52]	; 0x34
 8009b86:	89a3      	ldrh	r3, [r4, #12]
 8009b88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b8c:	81a3      	strh	r3, [r4, #12]
 8009b8e:	2300      	movs	r3, #0
 8009b90:	6063      	str	r3, [r4, #4]
 8009b92:	6923      	ldr	r3, [r4, #16]
 8009b94:	6023      	str	r3, [r4, #0]
 8009b96:	89a3      	ldrh	r3, [r4, #12]
 8009b98:	f043 0308 	orr.w	r3, r3, #8
 8009b9c:	81a3      	strh	r3, [r4, #12]
 8009b9e:	6923      	ldr	r3, [r4, #16]
 8009ba0:	b94b      	cbnz	r3, 8009bb6 <__swsetup_r+0x9a>
 8009ba2:	89a3      	ldrh	r3, [r4, #12]
 8009ba4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bac:	d003      	beq.n	8009bb6 <__swsetup_r+0x9a>
 8009bae:	4621      	mov	r1, r4
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	f7ff faab 	bl	800910c <__smakebuf_r>
 8009bb6:	89a0      	ldrh	r0, [r4, #12]
 8009bb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bbc:	f010 0301 	ands.w	r3, r0, #1
 8009bc0:	d00a      	beq.n	8009bd8 <__swsetup_r+0xbc>
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	60a3      	str	r3, [r4, #8]
 8009bc6:	6963      	ldr	r3, [r4, #20]
 8009bc8:	425b      	negs	r3, r3
 8009bca:	61a3      	str	r3, [r4, #24]
 8009bcc:	6923      	ldr	r3, [r4, #16]
 8009bce:	b943      	cbnz	r3, 8009be2 <__swsetup_r+0xc6>
 8009bd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009bd4:	d1ba      	bne.n	8009b4c <__swsetup_r+0x30>
 8009bd6:	bd70      	pop	{r4, r5, r6, pc}
 8009bd8:	0781      	lsls	r1, r0, #30
 8009bda:	bf58      	it	pl
 8009bdc:	6963      	ldrpl	r3, [r4, #20]
 8009bde:	60a3      	str	r3, [r4, #8]
 8009be0:	e7f4      	b.n	8009bcc <__swsetup_r+0xb0>
 8009be2:	2000      	movs	r0, #0
 8009be4:	e7f7      	b.n	8009bd6 <__swsetup_r+0xba>
 8009be6:	bf00      	nop
 8009be8:	2000002c 	.word	0x2000002c
 8009bec:	0800a504 	.word	0x0800a504
 8009bf0:	0800a524 	.word	0x0800a524
 8009bf4:	0800a4e4 	.word	0x0800a4e4

08009bf8 <_close_r>:
 8009bf8:	b538      	push	{r3, r4, r5, lr}
 8009bfa:	4d06      	ldr	r5, [pc, #24]	; (8009c14 <_close_r+0x1c>)
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	4604      	mov	r4, r0
 8009c00:	4608      	mov	r0, r1
 8009c02:	602b      	str	r3, [r5, #0]
 8009c04:	f000 f968 	bl	8009ed8 <_close>
 8009c08:	1c43      	adds	r3, r0, #1
 8009c0a:	d102      	bne.n	8009c12 <_close_r+0x1a>
 8009c0c:	682b      	ldr	r3, [r5, #0]
 8009c0e:	b103      	cbz	r3, 8009c12 <_close_r+0x1a>
 8009c10:	6023      	str	r3, [r4, #0]
 8009c12:	bd38      	pop	{r3, r4, r5, pc}
 8009c14:	200008e4 	.word	0x200008e4

08009c18 <__sflags>:
 8009c18:	780b      	ldrb	r3, [r1, #0]
 8009c1a:	2b72      	cmp	r3, #114	; 0x72
 8009c1c:	b530      	push	{r4, r5, lr}
 8009c1e:	d022      	beq.n	8009c66 <__sflags+0x4e>
 8009c20:	2b77      	cmp	r3, #119	; 0x77
 8009c22:	d024      	beq.n	8009c6e <__sflags+0x56>
 8009c24:	2b61      	cmp	r3, #97	; 0x61
 8009c26:	d027      	beq.n	8009c78 <__sflags+0x60>
 8009c28:	2316      	movs	r3, #22
 8009c2a:	6003      	str	r3, [r0, #0]
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	bd30      	pop	{r4, r5, pc}
 8009c30:	2d62      	cmp	r5, #98	; 0x62
 8009c32:	d012      	beq.n	8009c5a <__sflags+0x42>
 8009c34:	2d78      	cmp	r5, #120	; 0x78
 8009c36:	d013      	beq.n	8009c60 <__sflags+0x48>
 8009c38:	2d2b      	cmp	r5, #43	; 0x2b
 8009c3a:	d107      	bne.n	8009c4c <__sflags+0x34>
 8009c3c:	f020 001c 	bic.w	r0, r0, #28
 8009c40:	f023 0303 	bic.w	r3, r3, #3
 8009c44:	f040 0010 	orr.w	r0, r0, #16
 8009c48:	f043 0302 	orr.w	r3, r3, #2
 8009c4c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8009c50:	2d00      	cmp	r5, #0
 8009c52:	d1ed      	bne.n	8009c30 <__sflags+0x18>
 8009c54:	4323      	orrs	r3, r4
 8009c56:	6013      	str	r3, [r2, #0]
 8009c58:	e7e9      	b.n	8009c2e <__sflags+0x16>
 8009c5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c5e:	e7f5      	b.n	8009c4c <__sflags+0x34>
 8009c60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009c64:	e7f2      	b.n	8009c4c <__sflags+0x34>
 8009c66:	2400      	movs	r4, #0
 8009c68:	4623      	mov	r3, r4
 8009c6a:	2004      	movs	r0, #4
 8009c6c:	e7ee      	b.n	8009c4c <__sflags+0x34>
 8009c6e:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 8009c72:	2301      	movs	r3, #1
 8009c74:	2008      	movs	r0, #8
 8009c76:	e7e9      	b.n	8009c4c <__sflags+0x34>
 8009c78:	f44f 7402 	mov.w	r4, #520	; 0x208
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	f44f 7084 	mov.w	r0, #264	; 0x108
 8009c82:	e7e3      	b.n	8009c4c <__sflags+0x34>

08009c84 <_fstat_r>:
 8009c84:	b538      	push	{r3, r4, r5, lr}
 8009c86:	4d07      	ldr	r5, [pc, #28]	; (8009ca4 <_fstat_r+0x20>)
 8009c88:	2300      	movs	r3, #0
 8009c8a:	4604      	mov	r4, r0
 8009c8c:	4608      	mov	r0, r1
 8009c8e:	4611      	mov	r1, r2
 8009c90:	602b      	str	r3, [r5, #0]
 8009c92:	f000 f968 	bl	8009f66 <_fstat>
 8009c96:	1c43      	adds	r3, r0, #1
 8009c98:	d102      	bne.n	8009ca0 <_fstat_r+0x1c>
 8009c9a:	682b      	ldr	r3, [r5, #0]
 8009c9c:	b103      	cbz	r3, 8009ca0 <_fstat_r+0x1c>
 8009c9e:	6023      	str	r3, [r4, #0]
 8009ca0:	bd38      	pop	{r3, r4, r5, pc}
 8009ca2:	bf00      	nop
 8009ca4:	200008e4 	.word	0x200008e4

08009ca8 <_isatty_r>:
 8009ca8:	b538      	push	{r3, r4, r5, lr}
 8009caa:	4d06      	ldr	r5, [pc, #24]	; (8009cc4 <_isatty_r+0x1c>)
 8009cac:	2300      	movs	r3, #0
 8009cae:	4604      	mov	r4, r0
 8009cb0:	4608      	mov	r0, r1
 8009cb2:	602b      	str	r3, [r5, #0]
 8009cb4:	f000 fac8 	bl	800a248 <_isatty>
 8009cb8:	1c43      	adds	r3, r0, #1
 8009cba:	d102      	bne.n	8009cc2 <_isatty_r+0x1a>
 8009cbc:	682b      	ldr	r3, [r5, #0]
 8009cbe:	b103      	cbz	r3, 8009cc2 <_isatty_r+0x1a>
 8009cc0:	6023      	str	r3, [r4, #0]
 8009cc2:	bd38      	pop	{r3, r4, r5, pc}
 8009cc4:	200008e4 	.word	0x200008e4

08009cc8 <_lseek_r>:
 8009cc8:	b538      	push	{r3, r4, r5, lr}
 8009cca:	4d07      	ldr	r5, [pc, #28]	; (8009ce8 <_lseek_r+0x20>)
 8009ccc:	4604      	mov	r4, r0
 8009cce:	4608      	mov	r0, r1
 8009cd0:	4611      	mov	r1, r2
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	602a      	str	r2, [r5, #0]
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	f000 f8bb 	bl	8009e52 <_lseek>
 8009cdc:	1c43      	adds	r3, r0, #1
 8009cde:	d102      	bne.n	8009ce6 <_lseek_r+0x1e>
 8009ce0:	682b      	ldr	r3, [r5, #0]
 8009ce2:	b103      	cbz	r3, 8009ce6 <_lseek_r+0x1e>
 8009ce4:	6023      	str	r3, [r4, #0]
 8009ce6:	bd38      	pop	{r3, r4, r5, pc}
 8009ce8:	200008e4 	.word	0x200008e4

08009cec <__malloc_lock>:
 8009cec:	4801      	ldr	r0, [pc, #4]	; (8009cf4 <__malloc_lock+0x8>)
 8009cee:	f7ff b9e5 	b.w	80090bc <__retarget_lock_acquire_recursive>
 8009cf2:	bf00      	nop
 8009cf4:	200008d8 	.word	0x200008d8

08009cf8 <__malloc_unlock>:
 8009cf8:	4801      	ldr	r0, [pc, #4]	; (8009d00 <__malloc_unlock+0x8>)
 8009cfa:	f7ff b9e0 	b.w	80090be <__retarget_lock_release_recursive>
 8009cfe:	bf00      	nop
 8009d00:	200008d8 	.word	0x200008d8

08009d04 <_read_r>:
 8009d04:	b538      	push	{r3, r4, r5, lr}
 8009d06:	4d07      	ldr	r5, [pc, #28]	; (8009d24 <_read_r+0x20>)
 8009d08:	4604      	mov	r4, r0
 8009d0a:	4608      	mov	r0, r1
 8009d0c:	4611      	mov	r1, r2
 8009d0e:	2200      	movs	r2, #0
 8009d10:	602a      	str	r2, [r5, #0]
 8009d12:	461a      	mov	r2, r3
 8009d14:	f000 f845 	bl	8009da2 <_read>
 8009d18:	1c43      	adds	r3, r0, #1
 8009d1a:	d102      	bne.n	8009d22 <_read_r+0x1e>
 8009d1c:	682b      	ldr	r3, [r5, #0]
 8009d1e:	b103      	cbz	r3, 8009d22 <_read_r+0x1e>
 8009d20:	6023      	str	r3, [r4, #0]
 8009d22:	bd38      	pop	{r3, r4, r5, pc}
 8009d24:	200008e4 	.word	0x200008e4

08009d28 <findslot>:
 8009d28:	4b0a      	ldr	r3, [pc, #40]	; (8009d54 <findslot+0x2c>)
 8009d2a:	b510      	push	{r4, lr}
 8009d2c:	4604      	mov	r4, r0
 8009d2e:	6818      	ldr	r0, [r3, #0]
 8009d30:	b118      	cbz	r0, 8009d3a <findslot+0x12>
 8009d32:	6983      	ldr	r3, [r0, #24]
 8009d34:	b90b      	cbnz	r3, 8009d3a <findslot+0x12>
 8009d36:	f7fe ffd9 	bl	8008cec <__sinit>
 8009d3a:	2c13      	cmp	r4, #19
 8009d3c:	d807      	bhi.n	8009d4e <findslot+0x26>
 8009d3e:	4806      	ldr	r0, [pc, #24]	; (8009d58 <findslot+0x30>)
 8009d40:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8009d44:	3201      	adds	r2, #1
 8009d46:	d002      	beq.n	8009d4e <findslot+0x26>
 8009d48:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8009d4c:	bd10      	pop	{r4, pc}
 8009d4e:	2000      	movs	r0, #0
 8009d50:	e7fc      	b.n	8009d4c <findslot+0x24>
 8009d52:	bf00      	nop
 8009d54:	2000002c 	.word	0x2000002c
 8009d58:	200008f4 	.word	0x200008f4

08009d5c <error>:
 8009d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d5e:	4604      	mov	r4, r0
 8009d60:	f7fe fe1e 	bl	80089a0 <__errno>
 8009d64:	2613      	movs	r6, #19
 8009d66:	4605      	mov	r5, r0
 8009d68:	2700      	movs	r7, #0
 8009d6a:	4630      	mov	r0, r6
 8009d6c:	4639      	mov	r1, r7
 8009d6e:	beab      	bkpt	0x00ab
 8009d70:	4606      	mov	r6, r0
 8009d72:	602e      	str	r6, [r5, #0]
 8009d74:	4620      	mov	r0, r4
 8009d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d78 <checkerror>:
 8009d78:	1c43      	adds	r3, r0, #1
 8009d7a:	d101      	bne.n	8009d80 <checkerror+0x8>
 8009d7c:	f7ff bfee 	b.w	8009d5c <error>
 8009d80:	4770      	bx	lr

08009d82 <_swiread>:
 8009d82:	b530      	push	{r4, r5, lr}
 8009d84:	b085      	sub	sp, #20
 8009d86:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8009d8a:	9203      	str	r2, [sp, #12]
 8009d8c:	2406      	movs	r4, #6
 8009d8e:	ad01      	add	r5, sp, #4
 8009d90:	4620      	mov	r0, r4
 8009d92:	4629      	mov	r1, r5
 8009d94:	beab      	bkpt	0x00ab
 8009d96:	4604      	mov	r4, r0
 8009d98:	4620      	mov	r0, r4
 8009d9a:	f7ff ffed 	bl	8009d78 <checkerror>
 8009d9e:	b005      	add	sp, #20
 8009da0:	bd30      	pop	{r4, r5, pc}

08009da2 <_read>:
 8009da2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009da4:	4615      	mov	r5, r2
 8009da6:	9101      	str	r1, [sp, #4]
 8009da8:	f7ff ffbe 	bl	8009d28 <findslot>
 8009dac:	9901      	ldr	r1, [sp, #4]
 8009dae:	4604      	mov	r4, r0
 8009db0:	b938      	cbnz	r0, 8009dc2 <_read+0x20>
 8009db2:	f7fe fdf5 	bl	80089a0 <__errno>
 8009db6:	2309      	movs	r3, #9
 8009db8:	6003      	str	r3, [r0, #0]
 8009dba:	f04f 30ff 	mov.w	r0, #4294967295
 8009dbe:	b003      	add	sp, #12
 8009dc0:	bd30      	pop	{r4, r5, pc}
 8009dc2:	6800      	ldr	r0, [r0, #0]
 8009dc4:	462a      	mov	r2, r5
 8009dc6:	f7ff ffdc 	bl	8009d82 <_swiread>
 8009dca:	1c43      	adds	r3, r0, #1
 8009dcc:	d0f7      	beq.n	8009dbe <_read+0x1c>
 8009dce:	6863      	ldr	r3, [r4, #4]
 8009dd0:	1a2a      	subs	r2, r5, r0
 8009dd2:	4413      	add	r3, r2
 8009dd4:	6063      	str	r3, [r4, #4]
 8009dd6:	4610      	mov	r0, r2
 8009dd8:	e7f1      	b.n	8009dbe <_read+0x1c>

08009dda <_swilseek>:
 8009dda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ddc:	460c      	mov	r4, r1
 8009dde:	4616      	mov	r6, r2
 8009de0:	f7ff ffa2 	bl	8009d28 <findslot>
 8009de4:	4605      	mov	r5, r0
 8009de6:	b940      	cbnz	r0, 8009dfa <_swilseek+0x20>
 8009de8:	f7fe fdda 	bl	80089a0 <__errno>
 8009dec:	2309      	movs	r3, #9
 8009dee:	6003      	str	r3, [r0, #0]
 8009df0:	f04f 34ff 	mov.w	r4, #4294967295
 8009df4:	4620      	mov	r0, r4
 8009df6:	b003      	add	sp, #12
 8009df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dfa:	2e02      	cmp	r6, #2
 8009dfc:	d903      	bls.n	8009e06 <_swilseek+0x2c>
 8009dfe:	f7fe fdcf 	bl	80089a0 <__errno>
 8009e02:	2316      	movs	r3, #22
 8009e04:	e7f3      	b.n	8009dee <_swilseek+0x14>
 8009e06:	2e01      	cmp	r6, #1
 8009e08:	d112      	bne.n	8009e30 <_swilseek+0x56>
 8009e0a:	6843      	ldr	r3, [r0, #4]
 8009e0c:	18e4      	adds	r4, r4, r3
 8009e0e:	d4f6      	bmi.n	8009dfe <_swilseek+0x24>
 8009e10:	682b      	ldr	r3, [r5, #0]
 8009e12:	260a      	movs	r6, #10
 8009e14:	e9cd 3400 	strd	r3, r4, [sp]
 8009e18:	466f      	mov	r7, sp
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	4639      	mov	r1, r7
 8009e1e:	beab      	bkpt	0x00ab
 8009e20:	4606      	mov	r6, r0
 8009e22:	4630      	mov	r0, r6
 8009e24:	f7ff ffa8 	bl	8009d78 <checkerror>
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	dbe1      	blt.n	8009df0 <_swilseek+0x16>
 8009e2c:	606c      	str	r4, [r5, #4]
 8009e2e:	e7e1      	b.n	8009df4 <_swilseek+0x1a>
 8009e30:	2e02      	cmp	r6, #2
 8009e32:	d1ed      	bne.n	8009e10 <_swilseek+0x36>
 8009e34:	6803      	ldr	r3, [r0, #0]
 8009e36:	9300      	str	r3, [sp, #0]
 8009e38:	260c      	movs	r6, #12
 8009e3a:	466f      	mov	r7, sp
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	4639      	mov	r1, r7
 8009e40:	beab      	bkpt	0x00ab
 8009e42:	4606      	mov	r6, r0
 8009e44:	4630      	mov	r0, r6
 8009e46:	f7ff ff97 	bl	8009d78 <checkerror>
 8009e4a:	1c43      	adds	r3, r0, #1
 8009e4c:	d0d0      	beq.n	8009df0 <_swilseek+0x16>
 8009e4e:	4404      	add	r4, r0
 8009e50:	e7de      	b.n	8009e10 <_swilseek+0x36>

08009e52 <_lseek>:
 8009e52:	f7ff bfc2 	b.w	8009dda <_swilseek>

08009e56 <_swiwrite>:
 8009e56:	b530      	push	{r4, r5, lr}
 8009e58:	b085      	sub	sp, #20
 8009e5a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8009e5e:	9203      	str	r2, [sp, #12]
 8009e60:	2405      	movs	r4, #5
 8009e62:	ad01      	add	r5, sp, #4
 8009e64:	4620      	mov	r0, r4
 8009e66:	4629      	mov	r1, r5
 8009e68:	beab      	bkpt	0x00ab
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	f7ff ff83 	bl	8009d78 <checkerror>
 8009e72:	b005      	add	sp, #20
 8009e74:	bd30      	pop	{r4, r5, pc}

08009e76 <_write>:
 8009e76:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e78:	4615      	mov	r5, r2
 8009e7a:	9101      	str	r1, [sp, #4]
 8009e7c:	f7ff ff54 	bl	8009d28 <findslot>
 8009e80:	9901      	ldr	r1, [sp, #4]
 8009e82:	4604      	mov	r4, r0
 8009e84:	b930      	cbnz	r0, 8009e94 <_write+0x1e>
 8009e86:	f7fe fd8b 	bl	80089a0 <__errno>
 8009e8a:	2309      	movs	r3, #9
 8009e8c:	6003      	str	r3, [r0, #0]
 8009e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e92:	e012      	b.n	8009eba <_write+0x44>
 8009e94:	6800      	ldr	r0, [r0, #0]
 8009e96:	462a      	mov	r2, r5
 8009e98:	f7ff ffdd 	bl	8009e56 <_swiwrite>
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	dbf6      	blt.n	8009e8e <_write+0x18>
 8009ea0:	6862      	ldr	r2, [r4, #4]
 8009ea2:	1a2b      	subs	r3, r5, r0
 8009ea4:	441a      	add	r2, r3
 8009ea6:	42a8      	cmp	r0, r5
 8009ea8:	6062      	str	r2, [r4, #4]
 8009eaa:	d105      	bne.n	8009eb8 <_write+0x42>
 8009eac:	2000      	movs	r0, #0
 8009eae:	b003      	add	sp, #12
 8009eb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009eb4:	f7ff bf52 	b.w	8009d5c <error>
 8009eb8:	4618      	mov	r0, r3
 8009eba:	b003      	add	sp, #12
 8009ebc:	bd30      	pop	{r4, r5, pc}

08009ebe <_swiclose>:
 8009ebe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ec0:	2402      	movs	r4, #2
 8009ec2:	9001      	str	r0, [sp, #4]
 8009ec4:	ad01      	add	r5, sp, #4
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	4629      	mov	r1, r5
 8009eca:	beab      	bkpt	0x00ab
 8009ecc:	4604      	mov	r4, r0
 8009ece:	4620      	mov	r0, r4
 8009ed0:	f7ff ff52 	bl	8009d78 <checkerror>
 8009ed4:	b003      	add	sp, #12
 8009ed6:	bd30      	pop	{r4, r5, pc}

08009ed8 <_close>:
 8009ed8:	b538      	push	{r3, r4, r5, lr}
 8009eda:	4605      	mov	r5, r0
 8009edc:	f7ff ff24 	bl	8009d28 <findslot>
 8009ee0:	4604      	mov	r4, r0
 8009ee2:	b930      	cbnz	r0, 8009ef2 <_close+0x1a>
 8009ee4:	f7fe fd5c 	bl	80089a0 <__errno>
 8009ee8:	2309      	movs	r3, #9
 8009eea:	6003      	str	r3, [r0, #0]
 8009eec:	f04f 30ff 	mov.w	r0, #4294967295
 8009ef0:	bd38      	pop	{r3, r4, r5, pc}
 8009ef2:	3d01      	subs	r5, #1
 8009ef4:	2d01      	cmp	r5, #1
 8009ef6:	d809      	bhi.n	8009f0c <_close+0x34>
 8009ef8:	4b09      	ldr	r3, [pc, #36]	; (8009f20 <_close+0x48>)
 8009efa:	689a      	ldr	r2, [r3, #8]
 8009efc:	691b      	ldr	r3, [r3, #16]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d104      	bne.n	8009f0c <_close+0x34>
 8009f02:	f04f 33ff 	mov.w	r3, #4294967295
 8009f06:	6003      	str	r3, [r0, #0]
 8009f08:	2000      	movs	r0, #0
 8009f0a:	e7f1      	b.n	8009ef0 <_close+0x18>
 8009f0c:	6820      	ldr	r0, [r4, #0]
 8009f0e:	f7ff ffd6 	bl	8009ebe <_swiclose>
 8009f12:	2800      	cmp	r0, #0
 8009f14:	d1ec      	bne.n	8009ef0 <_close+0x18>
 8009f16:	f04f 33ff 	mov.w	r3, #4294967295
 8009f1a:	6023      	str	r3, [r4, #0]
 8009f1c:	e7e8      	b.n	8009ef0 <_close+0x18>
 8009f1e:	bf00      	nop
 8009f20:	200008f4 	.word	0x200008f4

08009f24 <_swistat>:
 8009f24:	b570      	push	{r4, r5, r6, lr}
 8009f26:	460c      	mov	r4, r1
 8009f28:	f7ff fefe 	bl	8009d28 <findslot>
 8009f2c:	4605      	mov	r5, r0
 8009f2e:	b930      	cbnz	r0, 8009f3e <_swistat+0x1a>
 8009f30:	f7fe fd36 	bl	80089a0 <__errno>
 8009f34:	2309      	movs	r3, #9
 8009f36:	6003      	str	r3, [r0, #0]
 8009f38:	f04f 30ff 	mov.w	r0, #4294967295
 8009f3c:	bd70      	pop	{r4, r5, r6, pc}
 8009f3e:	6863      	ldr	r3, [r4, #4]
 8009f40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009f44:	6063      	str	r3, [r4, #4]
 8009f46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f4a:	64a3      	str	r3, [r4, #72]	; 0x48
 8009f4c:	260c      	movs	r6, #12
 8009f4e:	4630      	mov	r0, r6
 8009f50:	4629      	mov	r1, r5
 8009f52:	beab      	bkpt	0x00ab
 8009f54:	4605      	mov	r5, r0
 8009f56:	4628      	mov	r0, r5
 8009f58:	f7ff ff0e 	bl	8009d78 <checkerror>
 8009f5c:	1c43      	adds	r3, r0, #1
 8009f5e:	bf1c      	itt	ne
 8009f60:	6120      	strne	r0, [r4, #16]
 8009f62:	2000      	movne	r0, #0
 8009f64:	e7ea      	b.n	8009f3c <_swistat+0x18>

08009f66 <_fstat>:
 8009f66:	460b      	mov	r3, r1
 8009f68:	b510      	push	{r4, lr}
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	4604      	mov	r4, r0
 8009f6e:	2258      	movs	r2, #88	; 0x58
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7ff f91b 	bl	80091ac <memset>
 8009f76:	4601      	mov	r1, r0
 8009f78:	4620      	mov	r0, r4
 8009f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f7e:	f7ff bfd1 	b.w	8009f24 <_swistat>

08009f82 <_stat>:
 8009f82:	b538      	push	{r3, r4, r5, lr}
 8009f84:	460d      	mov	r5, r1
 8009f86:	4604      	mov	r4, r0
 8009f88:	2258      	movs	r2, #88	; 0x58
 8009f8a:	2100      	movs	r1, #0
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	f7ff f90d 	bl	80091ac <memset>
 8009f92:	4620      	mov	r0, r4
 8009f94:	2100      	movs	r1, #0
 8009f96:	f000 f811 	bl	8009fbc <_swiopen>
 8009f9a:	1c43      	adds	r3, r0, #1
 8009f9c:	4604      	mov	r4, r0
 8009f9e:	d00b      	beq.n	8009fb8 <_stat+0x36>
 8009fa0:	686b      	ldr	r3, [r5, #4]
 8009fa2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009fa6:	606b      	str	r3, [r5, #4]
 8009fa8:	4629      	mov	r1, r5
 8009faa:	f7ff ffbb 	bl	8009f24 <_swistat>
 8009fae:	4605      	mov	r5, r0
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	f7ff ff91 	bl	8009ed8 <_close>
 8009fb6:	462c      	mov	r4, r5
 8009fb8:	4620      	mov	r0, r4
 8009fba:	bd38      	pop	{r3, r4, r5, pc}

08009fbc <_swiopen>:
 8009fbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009fc0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800a06c <_swiopen+0xb0>
 8009fc4:	b097      	sub	sp, #92	; 0x5c
 8009fc6:	4607      	mov	r7, r0
 8009fc8:	460e      	mov	r6, r1
 8009fca:	2500      	movs	r5, #0
 8009fcc:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8009fd0:	1c61      	adds	r1, r4, #1
 8009fd2:	d037      	beq.n	800a044 <_swiopen+0x88>
 8009fd4:	3501      	adds	r5, #1
 8009fd6:	2d14      	cmp	r5, #20
 8009fd8:	d1f8      	bne.n	8009fcc <_swiopen+0x10>
 8009fda:	f7fe fce1 	bl	80089a0 <__errno>
 8009fde:	2318      	movs	r3, #24
 8009fe0:	6003      	str	r3, [r0, #0]
 8009fe2:	f04f 34ff 	mov.w	r4, #4294967295
 8009fe6:	e03d      	b.n	800a064 <_swiopen+0xa8>
 8009fe8:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8009fec:	f240 6301 	movw	r3, #1537	; 0x601
 8009ff0:	07b2      	lsls	r2, r6, #30
 8009ff2:	bf48      	it	mi
 8009ff4:	f044 0402 	orrmi.w	r4, r4, #2
 8009ff8:	421e      	tst	r6, r3
 8009ffa:	bf18      	it	ne
 8009ffc:	f044 0404 	orrne.w	r4, r4, #4
 800a000:	0733      	lsls	r3, r6, #28
 800a002:	bf48      	it	mi
 800a004:	f024 0404 	bicmi.w	r4, r4, #4
 800a008:	4638      	mov	r0, r7
 800a00a:	bf48      	it	mi
 800a00c:	f044 0408 	orrmi.w	r4, r4, #8
 800a010:	9700      	str	r7, [sp, #0]
 800a012:	f7f6 f935 	bl	8000280 <strlen>
 800a016:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800a01a:	2401      	movs	r4, #1
 800a01c:	4620      	mov	r0, r4
 800a01e:	4649      	mov	r1, r9
 800a020:	beab      	bkpt	0x00ab
 800a022:	4604      	mov	r4, r0
 800a024:	2c00      	cmp	r4, #0
 800a026:	db08      	blt.n	800a03a <_swiopen+0x7e>
 800a028:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 800a02c:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 800a030:	2300      	movs	r3, #0
 800a032:	f8c8 3004 	str.w	r3, [r8, #4]
 800a036:	462c      	mov	r4, r5
 800a038:	e014      	b.n	800a064 <_swiopen+0xa8>
 800a03a:	4620      	mov	r0, r4
 800a03c:	f7ff fe8e 	bl	8009d5c <error>
 800a040:	4604      	mov	r4, r0
 800a042:	e00f      	b.n	800a064 <_swiopen+0xa8>
 800a044:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800a048:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800a04c:	46e9      	mov	r9, sp
 800a04e:	d1cb      	bne.n	8009fe8 <_swiopen+0x2c>
 800a050:	4649      	mov	r1, r9
 800a052:	4638      	mov	r0, r7
 800a054:	f7ff ff95 	bl	8009f82 <_stat>
 800a058:	3001      	adds	r0, #1
 800a05a:	d0c5      	beq.n	8009fe8 <_swiopen+0x2c>
 800a05c:	f7fe fca0 	bl	80089a0 <__errno>
 800a060:	2311      	movs	r3, #17
 800a062:	6003      	str	r3, [r0, #0]
 800a064:	4620      	mov	r0, r4
 800a066:	b017      	add	sp, #92	; 0x5c
 800a068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a06c:	200008f4 	.word	0x200008f4

0800a070 <_open>:
 800a070:	b40e      	push	{r1, r2, r3}
 800a072:	b500      	push	{lr}
 800a074:	9901      	ldr	r1, [sp, #4]
 800a076:	f7ff ffa1 	bl	8009fbc <_swiopen>
 800a07a:	f85d eb04 	ldr.w	lr, [sp], #4
 800a07e:	b003      	add	sp, #12
 800a080:	4770      	bx	lr
	...

0800a084 <_get_semihosting_exts>:
 800a084:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a088:	4606      	mov	r6, r0
 800a08a:	460f      	mov	r7, r1
 800a08c:	482a      	ldr	r0, [pc, #168]	; (800a138 <_get_semihosting_exts+0xb4>)
 800a08e:	2100      	movs	r1, #0
 800a090:	4615      	mov	r5, r2
 800a092:	f7ff ff93 	bl	8009fbc <_swiopen>
 800a096:	462a      	mov	r2, r5
 800a098:	4604      	mov	r4, r0
 800a09a:	2100      	movs	r1, #0
 800a09c:	4630      	mov	r0, r6
 800a09e:	f7ff f885 	bl	80091ac <memset>
 800a0a2:	1c63      	adds	r3, r4, #1
 800a0a4:	d016      	beq.n	800a0d4 <_get_semihosting_exts+0x50>
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	f7ff fe3e 	bl	8009d28 <findslot>
 800a0ac:	f04f 090c 	mov.w	r9, #12
 800a0b0:	4680      	mov	r8, r0
 800a0b2:	4648      	mov	r0, r9
 800a0b4:	4641      	mov	r1, r8
 800a0b6:	beab      	bkpt	0x00ab
 800a0b8:	4680      	mov	r8, r0
 800a0ba:	4640      	mov	r0, r8
 800a0bc:	f7ff fe5c 	bl	8009d78 <checkerror>
 800a0c0:	2803      	cmp	r0, #3
 800a0c2:	dd02      	ble.n	800a0ca <_get_semihosting_exts+0x46>
 800a0c4:	1ec3      	subs	r3, r0, #3
 800a0c6:	42ab      	cmp	r3, r5
 800a0c8:	dc08      	bgt.n	800a0dc <_get_semihosting_exts+0x58>
 800a0ca:	4620      	mov	r0, r4
 800a0cc:	f7ff ff04 	bl	8009ed8 <_close>
 800a0d0:	f04f 34ff 	mov.w	r4, #4294967295
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	b003      	add	sp, #12
 800a0d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0dc:	2204      	movs	r2, #4
 800a0de:	eb0d 0102 	add.w	r1, sp, r2
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	f7ff fe5d 	bl	8009da2 <_read>
 800a0e8:	2803      	cmp	r0, #3
 800a0ea:	ddee      	ble.n	800a0ca <_get_semihosting_exts+0x46>
 800a0ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a0f0:	2b53      	cmp	r3, #83	; 0x53
 800a0f2:	d1ea      	bne.n	800a0ca <_get_semihosting_exts+0x46>
 800a0f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a0f8:	2b48      	cmp	r3, #72	; 0x48
 800a0fa:	d1e6      	bne.n	800a0ca <_get_semihosting_exts+0x46>
 800a0fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a100:	2b46      	cmp	r3, #70	; 0x46
 800a102:	d1e2      	bne.n	800a0ca <_get_semihosting_exts+0x46>
 800a104:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a108:	2b42      	cmp	r3, #66	; 0x42
 800a10a:	d1de      	bne.n	800a0ca <_get_semihosting_exts+0x46>
 800a10c:	2201      	movs	r2, #1
 800a10e:	4639      	mov	r1, r7
 800a110:	4620      	mov	r0, r4
 800a112:	f7ff fe62 	bl	8009dda <_swilseek>
 800a116:	2800      	cmp	r0, #0
 800a118:	dbd7      	blt.n	800a0ca <_get_semihosting_exts+0x46>
 800a11a:	462a      	mov	r2, r5
 800a11c:	4631      	mov	r1, r6
 800a11e:	4620      	mov	r0, r4
 800a120:	f7ff fe3f 	bl	8009da2 <_read>
 800a124:	4605      	mov	r5, r0
 800a126:	4620      	mov	r0, r4
 800a128:	f7ff fed6 	bl	8009ed8 <_close>
 800a12c:	4628      	mov	r0, r5
 800a12e:	f7ff fe23 	bl	8009d78 <checkerror>
 800a132:	4604      	mov	r4, r0
 800a134:	e7ce      	b.n	800a0d4 <_get_semihosting_exts+0x50>
 800a136:	bf00      	nop
 800a138:	0800a57b 	.word	0x0800a57b

0800a13c <initialise_semihosting_exts>:
 800a13c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a13e:	4d0a      	ldr	r5, [pc, #40]	; (800a168 <initialise_semihosting_exts+0x2c>)
 800a140:	4c0a      	ldr	r4, [pc, #40]	; (800a16c <initialise_semihosting_exts+0x30>)
 800a142:	2100      	movs	r1, #0
 800a144:	2201      	movs	r2, #1
 800a146:	a801      	add	r0, sp, #4
 800a148:	6029      	str	r1, [r5, #0]
 800a14a:	6022      	str	r2, [r4, #0]
 800a14c:	f7ff ff9a 	bl	800a084 <_get_semihosting_exts>
 800a150:	2800      	cmp	r0, #0
 800a152:	dd07      	ble.n	800a164 <initialise_semihosting_exts+0x28>
 800a154:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a158:	f003 0201 	and.w	r2, r3, #1
 800a15c:	f003 0302 	and.w	r3, r3, #2
 800a160:	602a      	str	r2, [r5, #0]
 800a162:	6023      	str	r3, [r4, #0]
 800a164:	b003      	add	sp, #12
 800a166:	bd30      	pop	{r4, r5, pc}
 800a168:	20000090 	.word	0x20000090
 800a16c:	20000094 	.word	0x20000094

0800a170 <_has_ext_stdout_stderr>:
 800a170:	b510      	push	{r4, lr}
 800a172:	4c04      	ldr	r4, [pc, #16]	; (800a184 <_has_ext_stdout_stderr+0x14>)
 800a174:	6823      	ldr	r3, [r4, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	da01      	bge.n	800a17e <_has_ext_stdout_stderr+0xe>
 800a17a:	f7ff ffdf 	bl	800a13c <initialise_semihosting_exts>
 800a17e:	6820      	ldr	r0, [r4, #0]
 800a180:	bd10      	pop	{r4, pc}
 800a182:	bf00      	nop
 800a184:	20000094 	.word	0x20000094

0800a188 <initialise_monitor_handles>:
 800a188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a18c:	b085      	sub	sp, #20
 800a18e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800a240 <initialise_monitor_handles+0xb8>
 800a192:	f8cd 9004 	str.w	r9, [sp, #4]
 800a196:	2303      	movs	r3, #3
 800a198:	2400      	movs	r4, #0
 800a19a:	9303      	str	r3, [sp, #12]
 800a19c:	af01      	add	r7, sp, #4
 800a19e:	9402      	str	r4, [sp, #8]
 800a1a0:	2501      	movs	r5, #1
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	4639      	mov	r1, r7
 800a1a6:	beab      	bkpt	0x00ab
 800a1a8:	4605      	mov	r5, r0
 800a1aa:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800a244 <initialise_monitor_handles+0xbc>
 800a1ae:	4623      	mov	r3, r4
 800a1b0:	4c20      	ldr	r4, [pc, #128]	; (800a234 <initialise_monitor_handles+0xac>)
 800a1b2:	f8c8 5000 	str.w	r5, [r8]
 800a1b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ba:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800a1be:	3301      	adds	r3, #1
 800a1c0:	2b14      	cmp	r3, #20
 800a1c2:	d1fa      	bne.n	800a1ba <initialise_monitor_handles+0x32>
 800a1c4:	f7ff ffd4 	bl	800a170 <_has_ext_stdout_stderr>
 800a1c8:	4d1b      	ldr	r5, [pc, #108]	; (800a238 <initialise_monitor_handles+0xb0>)
 800a1ca:	b1d0      	cbz	r0, 800a202 <initialise_monitor_handles+0x7a>
 800a1cc:	f04f 0a03 	mov.w	sl, #3
 800a1d0:	2304      	movs	r3, #4
 800a1d2:	f8cd 9004 	str.w	r9, [sp, #4]
 800a1d6:	2601      	movs	r6, #1
 800a1d8:	f8cd a00c 	str.w	sl, [sp, #12]
 800a1dc:	9302      	str	r3, [sp, #8]
 800a1de:	4630      	mov	r0, r6
 800a1e0:	4639      	mov	r1, r7
 800a1e2:	beab      	bkpt	0x00ab
 800a1e4:	4683      	mov	fp, r0
 800a1e6:	4b15      	ldr	r3, [pc, #84]	; (800a23c <initialise_monitor_handles+0xb4>)
 800a1e8:	f8cd 9004 	str.w	r9, [sp, #4]
 800a1ec:	f8c3 b000 	str.w	fp, [r3]
 800a1f0:	2308      	movs	r3, #8
 800a1f2:	f8cd a00c 	str.w	sl, [sp, #12]
 800a1f6:	9302      	str	r3, [sp, #8]
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	4639      	mov	r1, r7
 800a1fc:	beab      	bkpt	0x00ab
 800a1fe:	4606      	mov	r6, r0
 800a200:	602e      	str	r6, [r5, #0]
 800a202:	682b      	ldr	r3, [r5, #0]
 800a204:	3301      	adds	r3, #1
 800a206:	bf02      	ittt	eq
 800a208:	4b0c      	ldreq	r3, [pc, #48]	; (800a23c <initialise_monitor_handles+0xb4>)
 800a20a:	681b      	ldreq	r3, [r3, #0]
 800a20c:	602b      	streq	r3, [r5, #0]
 800a20e:	2600      	movs	r6, #0
 800a210:	f8d8 3000 	ldr.w	r3, [r8]
 800a214:	6023      	str	r3, [r4, #0]
 800a216:	6066      	str	r6, [r4, #4]
 800a218:	f7ff ffaa 	bl	800a170 <_has_ext_stdout_stderr>
 800a21c:	b130      	cbz	r0, 800a22c <initialise_monitor_handles+0xa4>
 800a21e:	4b07      	ldr	r3, [pc, #28]	; (800a23c <initialise_monitor_handles+0xb4>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800a226:	682b      	ldr	r3, [r5, #0]
 800a228:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800a22c:	b005      	add	sp, #20
 800a22e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a232:	bf00      	nop
 800a234:	200008f4 	.word	0x200008f4
 800a238:	200008e8 	.word	0x200008e8
 800a23c:	200008f0 	.word	0x200008f0
 800a240:	0800a591 	.word	0x0800a591
 800a244:	200008ec 	.word	0x200008ec

0800a248 <_isatty>:
 800a248:	b570      	push	{r4, r5, r6, lr}
 800a24a:	f7ff fd6d 	bl	8009d28 <findslot>
 800a24e:	2509      	movs	r5, #9
 800a250:	4604      	mov	r4, r0
 800a252:	b920      	cbnz	r0, 800a25e <_isatty+0x16>
 800a254:	f7fe fba4 	bl	80089a0 <__errno>
 800a258:	6005      	str	r5, [r0, #0]
 800a25a:	4620      	mov	r0, r4
 800a25c:	bd70      	pop	{r4, r5, r6, pc}
 800a25e:	4628      	mov	r0, r5
 800a260:	4621      	mov	r1, r4
 800a262:	beab      	bkpt	0x00ab
 800a264:	4604      	mov	r4, r0
 800a266:	2c01      	cmp	r4, #1
 800a268:	d0f7      	beq.n	800a25a <_isatty+0x12>
 800a26a:	f7fe fb99 	bl	80089a0 <__errno>
 800a26e:	2400      	movs	r4, #0
 800a270:	4605      	mov	r5, r0
 800a272:	2613      	movs	r6, #19
 800a274:	4630      	mov	r0, r6
 800a276:	4621      	mov	r1, r4
 800a278:	beab      	bkpt	0x00ab
 800a27a:	4606      	mov	r6, r0
 800a27c:	602e      	str	r6, [r5, #0]
 800a27e:	e7ec      	b.n	800a25a <_isatty+0x12>

0800a280 <_init>:
 800a280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a282:	bf00      	nop
 800a284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a286:	bc08      	pop	{r3}
 800a288:	469e      	mov	lr, r3
 800a28a:	4770      	bx	lr

0800a28c <_fini>:
 800a28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a28e:	bf00      	nop
 800a290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a292:	bc08      	pop	{r3}
 800a294:	469e      	mov	lr, r3
 800a296:	4770      	bx	lr
